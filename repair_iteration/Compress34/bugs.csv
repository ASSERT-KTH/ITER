bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this.gid = ZipUtil.longToBig(l); [FE] AssertionError [CONTEXT] public void setGID(long l) { [BUGGY] this.gid = ZipUtil.longToBig(l); [BUGGY] } [CLASS] X7875_NewUnix [METHOD] setGID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	122	122	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setGID(long l) { [BUGGY] [BUGGY] this.gid = ZipUtil.longToBig(l); } [CLASS] X7875_NewUnix [METHOD] setGID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	122	122	1	add	
3	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void setGID(long l) { this.gid = ZipUtil.longToBig(l); [BUGGY] } [BUGGY]  [CLASS] X7875_NewUnix [METHOD] setGID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	123	123	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setGID(long l) { this.gid = ZipUtil.longToBig(l); [BUGGY] [BUGGY] } [CLASS] X7875_NewUnix [METHOD] setGID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	123	123	1	add	
5	[BUG] [BUGGY] return getLocalFileDataLength(); [FE] AssertionError [CONTEXT] public ZipShort getCentralDirectoryLength() { [BUGGY] return getLocalFileDataLength(); [BUGGY] } [CLASS] X7875_NewUnix [METHOD] getCentralDirectoryLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	146	146	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipShort getCentralDirectoryLength() { [BUGGY] [BUGGY] return getLocalFileDataLength(); } [CLASS] X7875_NewUnix [METHOD] getCentralDirectoryLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	1.0	146	146	1	add	
7	[BUG] [BUGGY] public long getUID() { return ZipUtil.bigToLong(uid); } [FE] AssertionError [CONTEXT] [BUGGY] public long getUID() { return ZipUtil.bigToLong(uid); } [BUGGY]  [CLASS] X7875_NewUnix [METHOD] getUID [RETURN_TYPE] long  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	95	95	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public long getUID() { return ZipUtil.bigToLong(uid); } [CLASS] X7875_NewUnix [METHOD] getUID [RETURN_TYPE] long  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	95	95	1	add	
9	[BUG] [BUGGY] public long getGID() { return ZipUtil.bigToLong(gid); } [FE] AssertionError [CONTEXT] [BUGGY] public long getGID() { return ZipUtil.bigToLong(gid); } [BUGGY]  [CLASS] X7875_NewUnix [METHOD] getGID [RETURN_TYPE] long  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	105	105	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public long getGID() { return ZipUtil.bigToLong(gid); } [CLASS] X7875_NewUnix [METHOD] getGID [RETURN_TYPE] long  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	105	105	1	add	
11	[BUG] [BUGGY] this.uid = ZipUtil.longToBig(l); [FE] AssertionError [CONTEXT] public void setUID(long l) { [BUGGY] this.uid = ZipUtil.longToBig(l); [BUGGY] } [CLASS] X7875_NewUnix [METHOD] setUID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	113	113	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setUID(long l) { [BUGGY] [BUGGY] this.uid = ZipUtil.longToBig(l); } [CLASS] X7875_NewUnix [METHOD] setUID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	113	113	1	add	
13	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void setUID(long l) { this.uid = ZipUtil.longToBig(l); [BUGGY] } [BUGGY]  [CLASS] X7875_NewUnix [METHOD] setUID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	114	114	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setUID(long l) { this.uid = ZipUtil.longToBig(l); [BUGGY] [BUGGY] } [CLASS] X7875_NewUnix [METHOD] setUID [RETURN_TYPE] void  long l [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	114	114	1	add	
15	[BUG] [BUGGY] int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { [BUGGY] int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; [BUGGY] int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;  return new ZipShort(3 + uidSize + gidSize); } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	132	132	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { [BUGGY] [BUGGY] int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;  return new ZipShort(3 + uidSize + gidSize); } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	132	132	1	add	
17	[BUG] [BUGGY] int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length; [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; [BUGGY] int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length; [BUGGY]   return new ZipShort(3 + uidSize + gidSize); } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	133	133	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; [BUGGY] [BUGGY] int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;  return new ZipShort(3 + uidSize + gidSize); } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	133	133	1	add	
19	[BUG] [BUGGY] return new ZipShort(3 + uidSize + gidSize); [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;  [BUGGY] return new ZipShort(3 + uidSize + gidSize); [BUGGY] } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	136	136	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipShort getLocalFileDataLength() { int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length; int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;  [BUGGY] [BUGGY] return new ZipShort(3 + uidSize + gidSize); } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	136	136	1	add	
21	[BUG] [BUGGY] byte[] uidBytes = uid.toByteArray(); [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { [BUGGY] byte[] uidBytes = uid.toByteArray(); [BUGGY] byte[] gidBytes = gid.toByteArray();    uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);    [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	156	156	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { [BUGGY] [BUGGY] byte[] uidBytes = uid.toByteArray(); byte[] gidBytes = gid.toByteArray();    uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);    [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	156	156	1	add	
23	[BUG] [BUGGY] byte[] gidBytes = gid.toByteArray(); [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); [BUGGY] byte[] gidBytes = gid.toByteArray(); [BUGGY]     uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);     [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	157	157	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); [BUGGY] [BUGGY] byte[] gidBytes = gid.toByteArray();    uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);     [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	157	157	1	add	
25	[BUG] [BUGGY] uidBytes = trimLeadingZeroesForceMinLength(uidBytes); [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); byte[] gidBytes = gid.toByteArray();    [BUGGY] uidBytes = trimLeadingZeroesForceMinLength(uidBytes); [BUGGY] gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];   [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	162	162	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); byte[] gidBytes = gid.toByteArray();    [BUGGY] [BUGGY] uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];   [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	162	162	1	add	
27	[BUG] [BUGGY] gidBytes = trimLeadingZeroesForceMinLength(gidBytes); [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); byte[] gidBytes = gid.toByteArray();    uidBytes = trimLeadingZeroesForceMinLength(uidBytes); [BUGGY] gidBytes = trimLeadingZeroesForceMinLength(gidBytes); [BUGGY]       byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	163	163	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public byte[] getLocalFileDataData() { byte[] uidBytes = uid.toByteArray(); byte[] gidBytes = gid.toByteArray();    uidBytes = trimLeadingZeroesForceMinLength(uidBytes); [BUGGY] [BUGGY] gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	163	163	1	add	
29	[BUG] [BUGGY] byte[] data = new byte[3 + uidBytes.length + gidBytes.length]; [FE] AssertionError [CONTEXT]   uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      [BUGGY] byte[] data = new byte[3 + uidBytes.length + gidBytes.length]; [BUGGY]   reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	170	170	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   uidBytes = trimLeadingZeroesForceMinLength(uidBytes); gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      [BUGGY] [BUGGY] byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	170	170	1	add	
31	[BUG] [BUGGY] reverse(uidBytes); [FE] AssertionError [CONTEXT] gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  [BUGGY] reverse(uidBytes); [BUGGY] reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	173	173	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] gidBytes = trimLeadingZeroesForceMinLength(gidBytes);      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  [BUGGY] [BUGGY] reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	173	173	1	add	
33	[BUG] [BUGGY] reverse(gidBytes); [FE] AssertionError [CONTEXT]      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); [BUGGY] reverse(gidBytes); [BUGGY]  int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	174	174	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]      byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); [BUGGY] [BUGGY] reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	174	174	1	add	
35	[BUG] [BUGGY] int pos = 0; [FE] AssertionError [CONTEXT]     byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); [BUGGY] int pos = 0; [BUGGY] data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	176	176	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]     byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); [BUGGY] [BUGGY] int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	176	176	1	add	
37	[BUG] [BUGGY] data[pos++] = unsignedIntToSignedByte(version); [FE] AssertionError [CONTEXT]    byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; [BUGGY] data[pos++] = unsignedIntToSignedByte(version); [BUGGY] data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	177	177	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]    byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; [BUGGY] [BUGGY] data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	177	177	1	add	
39	[BUG] [BUGGY] data[pos++] = unsignedIntToSignedByte(uidBytes.length); [FE] AssertionError [CONTEXT]   byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); [BUGGY] data[pos++] = unsignedIntToSignedByte(uidBytes.length); [BUGGY] System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	178	178	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); [BUGGY] [BUGGY] data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	178	178	1	add	
41	[BUG] [BUGGY] System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); [FE] AssertionError [CONTEXT]  byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); [BUGGY] System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); [BUGGY] pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	179	179	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); [BUGGY] [BUGGY] System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	179	179	1	add	
43	[BUG] [BUGGY] pos += uidBytes.length; [FE] AssertionError [CONTEXT] byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); [BUGGY] pos += uidBytes.length; [BUGGY] data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	180	180	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] byte[] data = new byte[3 + uidBytes.length + gidBytes.length];  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); [BUGGY] [BUGGY] pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	180	180	1	add	
45	[BUG] [BUGGY] data[pos++] = unsignedIntToSignedByte(gidBytes.length); [FE] AssertionError [CONTEXT]  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; [BUGGY] data[pos++] = unsignedIntToSignedByte(gidBytes.length); [BUGGY] System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	181	181	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; [BUGGY] [BUGGY] data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	181	181	1	add	
47	[BUG] [BUGGY] System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); [FE] AssertionError [CONTEXT]  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); [BUGGY] System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); [BUGGY] return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	182	182	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); [BUGGY] [BUGGY] System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	182	182	1	add	
49	[BUG] [BUGGY] return data; [FE] AssertionError [CONTEXT] reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); [BUGGY] return data; [BUGGY] } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	183	183	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] reverse(uidBytes); reverse(gidBytes); int pos = 0; data[pos++] = unsignedIntToSignedByte(version); data[pos++] = unsignedIntToSignedByte(uidBytes.length); System.arraycopy(uidBytes, 0, data, pos, uidBytes.length); pos += uidBytes.length; data[pos++] = unsignedIntToSignedByte(gidBytes.length); System.arraycopy(gidBytes, 0, data, pos, gidBytes.length); [BUGGY] [BUGGY] return data; } [CLASS] X7875_NewUnix [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	183	183	1	add	
51	[BUG] [BUGGY] reset(); [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { [BUGGY] reset(); [BUGGY] this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	207	207	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { [BUGGY] [BUGGY] reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	207	207	1	add	
53	[BUG] [BUGGY] this.version = signedByteToUnsignedInt(data[offset++]); [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); [BUGGY] this.version = signedByteToUnsignedInt(data[offset++]); [BUGGY] int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	208	208	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); [BUGGY] [BUGGY] this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	208	208	1	add	
55	[BUG] [BUGGY] int uidSize = signedByteToUnsignedInt(data[offset++]); [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); [BUGGY] int uidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	209	209	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); [BUGGY] [BUGGY] int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	209	209	1	add	
57	[BUG] [BUGGY] byte[] uidBytes = new byte[uidSize]; [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] byte[] uidBytes = new byte[uidSize]; [BUGGY] System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	210	210	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] [BUGGY] byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	210	210	1	add	
59	[BUG] [BUGGY] System.arraycopy(data, offset, uidBytes, 0, uidSize); [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; [BUGGY] System.arraycopy(data, offset, uidBytes, 0, uidSize); [BUGGY] offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	211	211	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; [BUGGY] [BUGGY] System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	211	211	1	add	
61	[BUG] [BUGGY] offset += uidSize; [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); [BUGGY] offset += uidSize; [BUGGY] this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	212	212	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); [BUGGY] [BUGGY] offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	212	212	1	add	
63	[BUG] [BUGGY] this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; [BUGGY] this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive    int gidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY]  int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	213	215	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void parseFromLocalFileData( byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; [BUGGY] [BUGGY] this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive    int gidSize = signedByteToUnsignedInt(data[offset++]); int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	213	215	1	add	
65	[BUG] [BUGGY] int gidSize = signedByteToUnsignedInt(data[offset++]); [FE] AssertionError [CONTEXT] byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive [BUGGY] int gidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	215	215	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] byte[] data, int offset, int length ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive [BUGGY] [BUGGY] int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	215	215	1	add	
67	[BUG] [BUGGY] byte[] gidBytes = new byte[gidSize]; [FE] AssertionError [CONTEXT] ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] byte[] gidBytes = new byte[gidSize]; [BUGGY] System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	216	216	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] ) throws ZipException { reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); [BUGGY] [BUGGY] byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	216	216	1	add	
69	[BUG] [BUGGY] System.arraycopy(data, offset, gidBytes, 0, gidSize); [FE] AssertionError [CONTEXT] reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; [BUGGY] System.arraycopy(data, offset, gidBytes, 0, gidSize); [BUGGY] this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	217	217	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] reset(); this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; [BUGGY] [BUGGY] System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	217	217	1	add	
71	[BUG] [BUGGY] this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [FE] AssertionError [CONTEXT] this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); [BUGGY] this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } [BUGGY] } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	218	219	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.version = signedByteToUnsignedInt(data[offset++]); int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); [BUGGY] [BUGGY] this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive } } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	218	219	1	add	
73	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive [BUGGY] } [BUGGY]  [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	219	219	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int uidSize = signedByteToUnsignedInt(data[offset++]); byte[] uidBytes = new byte[uidSize]; System.arraycopy(data, offset, uidBytes, 0, uidSize); offset += uidSize; this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive int gidSize = signedByteToUnsignedInt(data[offset++]); byte[] gidBytes = new byte[gidSize]; System.arraycopy(data, offset, gidBytes, 0, gidSize); this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive [BUGGY] [BUGGY] } [CLASS] X7875_NewUnix [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] data int offset int length [VARIABLES] byte[] data gidBytes uidBytes BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long l serialVersionUID int gidSize length offset pos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.7071067811865475	219	219	1	add	
75	[BUG] [BUGGY] if (array == null) { [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { [BUGGY] if (array == null) { [BUGGY] return array; } int pos = 0; for (byte b : array) { if (b == 0) { pos++; } else { break; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	288	288	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { [BUGGY] [BUGGY] if (array == null) { return array; } int pos = 0; for (byte b : array) { if (b == 0) { pos++; } else { break; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	288	288	1	add	
77	[BUG] [BUGGY] int pos = 0; [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } [BUGGY] int pos = 0; [BUGGY] for (byte b : array) { if (b == 0) { pos++; } else { break; } }   [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	292	292	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } [BUGGY] [BUGGY] int pos = 0; for (byte b : array) { if (b == 0) { pos++; } else { break; } }   [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	292	292	1	add	
79	[BUG] [BUGGY] for (byte b : array) { [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; [BUGGY] for (byte b : array) { [BUGGY] if (b == 0) { pos++; } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	293	293	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; [BUGGY] [BUGGY] for (byte b : array) { if (b == 0) { pos++; } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	293	293	1	add	
81	[BUG] [BUGGY] if (b == 0) { [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; for (byte b : array) { [BUGGY] if (b == 0) { [BUGGY] pos++; } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: InfoZip (the tool I am using to test interop) always sets these [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	294	294	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; for (byte b : array) { [BUGGY] [BUGGY] if (b == 0) { pos++; } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: InfoZip (the tool I am using to test interop) always sets these [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	294	294	1	add	
83	[BUG] [BUGGY] pos++; [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; for (byte b : array) { if (b == 0) { [BUGGY] pos++; [BUGGY] } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: InfoZip (the tool I am using to test interop) always sets these to length=4.And so a UID of 0 (typically root) for example is [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	295	295	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] static byte[] trimLeadingZeroesForceMinLength(byte[] array) { if (array == null) { return array; } int pos = 0; for (byte b : array) { if (b == 0) { [BUGGY] [BUGGY] pos++; } else { break; } }   I agonized over my choice of MIN_LENGTH=1.Here's the situation: InfoZip (the tool I am using to test interop) always sets these to length=4.And so a UID of 0 (typically root) for example is [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	295	295	1	add	
85	[BUG] [BUGGY] final int MIN_LENGTH = 1; [FE] AssertionError [CONTEXT] And thus it is decided:MIN_LENGTH=1. If anyone runs into interop problems from this, feel free to set it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  [BUGGY] final int MIN_LENGTH = 1; [BUGGY]  byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	338	338	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] And thus it is decided:MIN_LENGTH=1. If anyone runs into interop problems from this, feel free to set it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  [BUGGY] [BUGGY] final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	338	338	1	add	
87	[BUG] [BUGGY] byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; [FE] AssertionError [CONTEXT] If anyone runs into interop problems from this, feel free to set it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; [BUGGY] byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; [BUGGY] int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	340	340	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] If anyone runs into interop problems from this, feel free to set it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; [BUGGY] [BUGGY] byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	340	340	1	add	
89	[BUG] [BUGGY] int startPos = trimmedArray.length - (array.length - pos); [FE] AssertionError [CONTEXT] it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; [BUGGY] int startPos = trimmedArray.length - (array.length - pos); [BUGGY] System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	341	341	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] it to MIN_LENGTH=4 at some future time, and then we will behave exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; [BUGGY] [BUGGY] int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	341	341	1	add	
91	[BUG] [BUGGY] System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); [FE] AssertionError [CONTEXT] exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); [BUGGY] System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); [BUGGY] return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	342	342	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] exactly like InfoZip (requires changes to unit tests, though). And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); [BUGGY] [BUGGY] System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	342	342	1	add	
93	[BUG] [BUGGY] return trimmedArray; [FE] AssertionError [CONTEXT] And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); [BUGGY] return trimmedArray; [BUGGY] } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	343	343	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] And I am sorry that the time you spent reading this comment is now gone and you can never have it back.  final int MIN_LENGTH = 1; byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)]; int startPos = trimmedArray.length - (array.length - pos); System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos); [BUGGY] [BUGGY] return trimmedArray; } [CLASS] X7875_NewUnix [METHOD] trimLeadingZeroesForceMinLength [RETURN_TYPE] byte[]  byte[] array [VARIABLES] byte[] array trimmedArray ZipShort HEADER_ID boolean byte b BigInteger ONE_THOUSAND gid uid long l serialVersionUID int MIN_LENGTH gidSize hc length offset pos startPos uidSize version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.5773502691896258	343	343	1	add	
95	[BUG] [BUGGY] public X7875_NewUnix() { [FE] AssertionError [CONTEXT] [BUGGY] public X7875_NewUnix() { [BUGGY] reset(); } [CLASS] X7875_NewUnix [METHOD] <init> [RETURN_TYPE] X7875_NewUnix()  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	74	74	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public X7875_NewUnix() { reset(); } [CLASS] X7875_NewUnix [METHOD] <init> [RETURN_TYPE] X7875_NewUnix()  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	74	74	1	add	
97	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] X7875_NewUnix  [VARIABLES] 	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	61	61	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] X7875_NewUnix  [VARIABLES] 	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	61	61	1	add	
99	[BUG] [BUGGY] reset(); [FE] AssertionError [CONTEXT] public X7875_NewUnix() { [BUGGY] reset(); [BUGGY] } [CLASS] X7875_NewUnix [METHOD] <init> [RETURN_TYPE] X7875_NewUnix()  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	75	75	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public X7875_NewUnix() { [BUGGY] [BUGGY] reset(); } [CLASS] X7875_NewUnix [METHOD] <init> [RETURN_TYPE] X7875_NewUnix()  [VARIABLES] BigInteger ONE_THOUSAND gid uid ZipShort HEADER_ID boolean long serialVersionUID int version  	projects/Compress34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java	0.4472135954999579	75	75	1	add	
