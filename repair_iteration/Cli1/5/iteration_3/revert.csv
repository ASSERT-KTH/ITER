projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap.put(opt,true);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null||options.containsKey(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap.put(opt,false);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap=true;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)!=null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)==null){if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)==null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){thrownewIllegalArgumentException("");}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)||hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringopt:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap<String,Object>());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.keySet()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newLinkedList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newLinkedList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options>=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}If(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.clear();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(opt,false);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=hashcodeMap.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.keySet()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(opt,true);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)||options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(args.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,names);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,name);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options>=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}If(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)==false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap=true;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);else{returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);Optionsoptions=options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.values()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);elsereturnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.hashCode());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=true;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newLinkedHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap<String,Object>(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);options.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);if(options.containsKey(opt)||options.containsValue(opt)){returnoptions.containsKey(opt)||options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);if(options.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);||options.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);if(options.containsKey(opt)||options.containsValue(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt)||hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69booleanhasOption=hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newLinkedHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newArrayList();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringopt:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=arrays.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler<String,Object>options=newOptionHandler<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(option,newHashMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap(),hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt-1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(args,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(args.hashCode(),opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){for(Stringopt:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=getHashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=(HashCodeMap)this.names.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(opt,null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(option,true);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);}else{options.add(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);options.addValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){options=newHashMap();}if(options==null){
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,symbol);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options==null&&options.containsKey(opt)){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newArrayList<String>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=names.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=args.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||args.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Returnoptions.containsKey(opt)||args.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||args.containsKey(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt))returntrue;if(options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newLinkedHashSet<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.size()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.keySet(),options.size()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.values()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)names.get(opt,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)names.get(opt,args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=(Options)names.get(opt,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)names.get(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)hashcodeMap.get(opt,hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)hashcodeMap.get(opt,args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)hashcodeMap.get(opt,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringopt:options.values()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)this.options.clone();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)this.names.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt)){thrownewIllegalArgumentException("");}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&args.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.contains(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt)&0xFFFF;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt)||args.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashCodeMap.containsKey(opt)||args.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCodeMap.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashcodeMap.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.hasValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newCommandLine());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,this);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newLinkedHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap<String,Object>(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap<String,Object>(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options,args.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(args,options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null||options.containsKey(opt)){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(option,false);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||args.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCodeMap().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions().hashCodeMap().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length,options.length);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length-1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.size()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.values());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.keySet(),options.size()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt)){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Options.put(opt,newHashMap<String,Object>());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap<String,Object>()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newLinkedHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newArrayList();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.contains(opt)||options.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.contains(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||args.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(names.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.hashCode(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69booleanhasOption=options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}else{Optionoption=options.get(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+2);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)||options.containsValue(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt)||options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt)||options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=names.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=list.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=args.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt.toLowerCase());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt,false);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt,hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.hashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.hashmap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);options.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)){returnoptions.containsKey(opt)&&options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)&&options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt+1));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt),options.size());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);else{returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap=false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap=null;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap&=opt.toLowerCase();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=args.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=names.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("_")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("/")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt).booleanValue();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returnthis.options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returnthis.options.containsOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.equals("")){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("_")){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("*")){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.hashCodeMap(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.values();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)options.get(opt,opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)options.get(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)this.options.get(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}else{options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)){returnoptions.containsKey(opt)||options.containsKey(opt);}else{options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=names.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=hashcodeMap.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);Optionsoptions=options.getValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=this.hashcodeMap.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=args.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);options.containsKey(opt)||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);if(options.containsKey(opt)||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);if(options.containsKey(opt)||options.containsKey(opt+1)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);if(options.containsKey(opt)||options.containsKey(opt+1)){thrownewIllegalArgumentException("");}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.hashCode(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt)||options.containsKey(opt);elsereturnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);elsereturnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=arrays.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.hasOption(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)&&options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)||options.hasArg(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)==null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=null;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=newHashcodeMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);if(options!=null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69booleanhasOption=options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);if(options==null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,0);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,defaultValue);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.hashCodeMap().get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.has(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.hashCodeMap(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashCodeMap.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:this.options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=this.options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=args.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=names.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.hasOption(opt)==false){returnoptions.hasOption(opt)==false;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.hasOption(opt)!=false){returnoptions.hasOption(opt)==false;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.hasOption(opt)==false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.contains(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||args.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.keySet()&&options.containsKey(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);options.containsKey(opt)&&hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)&&hashcodeMap.containsKey(opt)){returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)||hashcodeMap.containsKey(opt)){returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)&&hashcodeMap.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)&&hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.size());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),names.hashCode());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)&&args.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||args.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(opt!=null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt)||options.containsKey(opt);options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(optionNames.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.containsKey(opt)||options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(optionNames.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(opt,args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null||options.values()!=null){for(Stringoption:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=(HashCodeMap)options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.hashCode()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.hashCodeMap()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.hashCodeMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt)||options.containsKey(opt);if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)==null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)==null){if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.hashCodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.hashCode()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)options.clone();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)this.options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.hashCode();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.handleOption(opt,newHashMap<String,Object>());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newArrayList<String>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||opt.containsKey(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasKey(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCode(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.hashCode()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnnames.containsKey(opt)||hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("*")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)&&options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)||options.indexOf(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap<String,String>());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOptions();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,value);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsValue(opt);options.addValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.hashCode()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.keySet());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);HashcodeMapoptions=(HashCodeMap)options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);HashcodeMap<String,Object>options=hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);Optionoptions=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);HashcodeMapoptions=(HashCodeMap)options.clone();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);HashcodeMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.getOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt,args);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt,true);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&names.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newLinkedList<String>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.add(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=options.hashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=options.hashCode();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);if(options!=null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)options.get(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,names,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,opt,names);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,opt,hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options.addValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options.add(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.hashCodeMaps();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);Optionoptions=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);Stringopt=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt),options.hashCode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt-1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);Optionoptions=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);Optionsoptions=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals(".")){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.add(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapoptions=options.hashCodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.keySet().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.hashCodeMap(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)==null){if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)!=null){if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)!=false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69args.hasOption(opt)==false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCode(opt)==false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsKey(opt)||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsKey(opt)){returnoptions.get(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsKey(opt)){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCode(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=(Options)args.get(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){options=newHashMap<String,Object>();}else{options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){options.put(opt,newHashMap<String,Object>());}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.values();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options>=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)){returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){thrownewIllegalArgumentException("");}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions().hashKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)&&options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){if(options!=newHashMap<String,Object>()){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=(Options)args.get(opt,opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.handleOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsValue(opt)){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOptions();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)||options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=options.values();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.hasKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null&&options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);if(options.containsKey(opt)||options.containsKey(opt+1)){returnoptions.containsKey(opt+1);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);OptionHandler.checkArgument(options.containsKey(opt)||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}if(options==null){
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=newHashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);HashcodeMaphashcodeMap=hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")||opt.equals("-")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options!=null){returnoptions.containsKey(opt)&&options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);if(options.containsKey(opt)&&options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=options.values();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)!=null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.hasKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.values());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.keySet());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.hashCode().hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null||options.containsKey(opt)){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null||options.containsKey(opt)){options=newLinkedList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.handleOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=hashcodeMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.get(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){for(Stringopt:options.values()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(opt.toLowerCase());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashcodeMap().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hashCode().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt);elsereturnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt);else{returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)){returnoptions.containsKey(opt);}else{returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt),options.hashCode());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)&&hashcodeMap.containsKey(opt);}else{returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)&&hashcodeMap.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);if(options.containsKey(opt)||hashcodeMap.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options.add(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)hashcodeMap.get(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options.containsValue(opt)==null){if(options.containsValue(opt)==null){returnoptions.getValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.handleOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.handleOption(opt,newHashMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.containsKey(opt),options.hashCode());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}else{options=options.get(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=options.hashcodeMap().get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);OptionHandler.checkArgument(options.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);if(options.containsKey(opt)||options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.hasOption(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(opt==null);
