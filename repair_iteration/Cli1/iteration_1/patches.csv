bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	new_failing_test_number
3	[BUG]  [BUGGY]  return  new  HashCodeMap( "HashCode   ",  hashcodeMap);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "HashCode   ",  hashcodeMap);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "HashCode   ",  hashcodeMap);	      return    new    HashCodeMap(   "HashCode   ");    	non-compiled	[CE]  illegal  start  of  type	305	None
4	[BUG]  [BUGGY]  return  new  HashCodeMap( "HashCode  = ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "HashCode  = ");  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "HashCode  = ");	      return    new    HashCodeMap(   "HashCode   ");    	non-compiled	[CE]  illegal  start  of  type	305	None
11	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  null;  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  null;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt)?  opt  :  null;	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
13	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  null  :  opt;  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt)?  null  :  opt;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt)?  null  :  opt;	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
14	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(option)?  opt  :  null;  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(option)?  opt  :  null;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(option)?  opt  :  null;	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	        private    final    Map    Option    =    new    HashMap();    private  final  Map  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
22	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  option  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
22	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Option  =  new  HashMap();  [CE]  variable  Option  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  Option  =  new  HashMap();	  	non-compiled	[CE]  variable  Option  is  already  defined  in  class  CommandLine	245	None
23	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  options  =  new  HashMap();  [CE]  variable  options  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  options  =  new  HashMap();	  	non-compiled	[CE]  variable  options  is  already  defined  in  class  CommandLine	245	None
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  public  final  Map  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	        private    final    Map    Option    =    new    HashMap();    public  final  Map  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
25	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  public  final  Map  option  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  public  final  Map  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    public  final  Map  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	        private    final    Map    Option    =    new    HashMap();    private  final  Map  Options  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
26	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  Options  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
31	[BUG]  [BUGGY]  List.sort(values);  [CE]  method  sort  in  interface  List<E>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  List.sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	List.sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  method  sort  in  interface  List<E>  cannot  be  applied  to  given  types;	274	None
33	[BUG]  [BUGGY]  Sort(values);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  cannot  find  symbol	274	None
34	[BUG]  [BUGGY]  Collections.sort(values);  [CE]  cannot  find  symbol  Collections  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Collections.sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Collections.sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  cannot  find  symbol  Collections	274	None
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ".opt ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ ".opt ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
43	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ".opt ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ".opt ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ".opt ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
43	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1 "  vs ");  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1 "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  1 "  vs ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  	264	None
52	[BUG]  [BUGGY]  if(opt!=  null)  {  if(args.contains( "-- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(args.contains( "-- "))  {  return  this;  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(args.contains( "-- "))  {  return  this;  }	      if(opt!=    null)    {    if(args.contains(   "-   "))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None
53	[BUG]  [BUGGY]  if(opt!=  null)  {  if(args.contains( ".- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(args.contains( ".- "))  {  return  this;  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(args.contains( ".- "))  {  return  this;  }	      if(opt!=    null)    {    if(args.contains(   "-   "))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None
54	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(args.contains( "- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(args.contains( "- "))  {  return  this;  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(args.contains( "- "))  {  return  this;  }	      if(opt!=    null)    {    if(args.contains(   "-   "))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None
61	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	163	None
62	[BUG]  [BUGGY]  if(opt.isEmpty())  {  if(!args.containsKey(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.isEmpty())  {  if(!args.containsKey(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.isEmpty())  {  if(!args.containsKey(opt))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	163	None
63	[BUG]  [BUGGY]  if(opt.isEmpty())  {  if(!args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.isEmpty())  {  if(!args.contains(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.isEmpty())  {  if(!args.contains(opt))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	163	None
64	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.equals( " "))  {  args  |=  options.containsKey(opt);  if(args.containsValue(opt))  {  return  false;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	163	None
71	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList(args.size());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList(args.size());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  new  ArrayList(args.size());	  	non-compiled	[CE]  illegal  start  of  type	132	None
72	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  type	132	None
73	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args.toArray(new  LinkedList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args.toArray(new  LinkedList());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  args.toArray(new  LinkedList());	  	non-compiled	[CE]  illegal  start  of  type	132	None
74	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  ArrayList(args);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  new  ArrayList(args);	  	non-compiled	[CE]  illegal  start  of  type	132	None
75	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  LinkedList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  new  LinkedList();	  	non-compiled	[CE]  illegal  start  of  type	132	None
83	[BUG]  [BUGGY]  if(!options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	333	None
84	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	333	None
91	[BUG]  [BUGGY]  opt  =  options.getOptionValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  options.getOptionValue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  options.getOptionValue(opt);	      opt    =    this.options.getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	284	None
93	[BUG]  [BUGGY]  opt  =  optionNames.getOptionValue(opt);  [CE]  cannot  find  symbol  optionNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  optionNames.getOptionValue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  optionNames.getOptionValue(opt);	      opt    =    this.options.getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  optionNames	284	None
94	[BUG]  [BUGGY]  opt  =  Options.getOptionValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  Options.getOptionValue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  Options.getOptionValue(opt);	      opt    =    this.options.getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	284	None
101	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	62	None
102	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt)||  options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	62	None
103	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(!options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(!options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	62	None
104	[BUG]  [BUGGY]  if(opt.hasOption(options))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt.hasOption(options))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt.hasOption(options))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	62	None
111	[BUG]  [BUGGY]  String[]  values  =  opt.toLowerCase();  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  opt.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  opt.toLowerCase();	      	non-compiled	[CE]  incompatible  types	65	None
112	[BUG]  [BUGGY]  String[]  values  =  opt.toString();  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  opt.toString();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  opt.toString();	      	non-compiled	[CE]  incompatible  types	65	None
113	[BUG]  [BUGGY]  String[]  values  =  opt.getValues();  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  opt.getValues();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  opt.getValues();	      	non-compiled	[CE]  cannot  find  symbol	65	None
123	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)))  {  return  false;  }	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	185	None
124	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt)))  {  return  false;  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt)))  {  return  false;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt)))  {  return  false;	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	185	None
132	[BUG]  [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
133	[BUG]  [BUGGY]  if(options.getKey()!=  opt)  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()!=  opt)  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()!=  opt)  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
134	[BUG]  [BUGGY]  if(options.getKey()!=  null)  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()!=  null)  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()!=  null)  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
143	[BUG]  [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
144	[BUG]  [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
151	[BUG]  [BUGGY]  if(values.equals(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values.equals(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values.equals(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(values))    {    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None
153	[BUG]  [BUGGY]  if(!opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(values))    {    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None
154	[BUG]  [BUGGY]  if(options.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(values))    {    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None
161	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  if(opt.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  if(opt.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  if(opt.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	281	None
162	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  if(opt.length()  >  0)  {  return  (args  ==  null)?  null  :  args[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  if(opt.length()  >  0)  {  return  (args  ==  null)?  null  :  args[0];  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  if(opt.length()  >  0)  {  return  (args  ==  null)?  null  :  args[0];  }	  	non-compiled	[CE]  illegal  start  of  expression	281	None
164	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  args  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  args  =  getOptionArgs(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    args  =  getOptionArgs(opt);	  	non-compiled	[CE]  cannot  find  symbol	281	None
165	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  args  =  getOptionArgs(opt);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  args  =  getOptionArgs(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  String[]  args  =  getOptionArgs(opt);  }	  	non-compiled	[CE]  cannot  find  symbol	281	None
173	[BUG]  [BUGGY]  return  old  LinkedList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  old  LinkedList();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  old  LinkedList();	      return    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	112	None
174	[BUG]  [BUGGY]  return  new  TreeSet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  TreeSet();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  TreeSet();	      return    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	112	None
183	[BUG]  [BUGGY]  return  isOption(String.valueOf(opt)+ "  : ");  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String.valueOf(opt)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String.valueOf(opt)+ "  : ");	  return    hasOption(String.valueOf(opt)+   "    :   ");    	non-compiled	[CE]  cannot  find  symbol	165	None
192	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  illegal  start  of  expression	424	None
194	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  args  =  options.get(opt);  if(args.contains(args))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  args  =  options.get(opt);  if(args.contains(args))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  args  =  options.get(opt);  if(args.contains(args))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  illegal  start  of  expression	424	None
201	[BUG]  [BUGGY]  if(options.equals(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.equals(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.equals(opt)))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getOption(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	325	None
211	[BUG]  [BUGGY]  Options.sort(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Options.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Options.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  cannot  find  symbol	482	None
213	[BUG]  [BUGGY]  List.sort(opt);  [CE]  method  sort  in  interface  List<E>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  List.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	List.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  method  sort  in  interface  List<E>  cannot  be  applied  to  given  types;	482	None
214	[BUG]  [BUGGY]  options.sort(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  options.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	options.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  cannot  find  symbol	482	None
223	[BUG]  [BUGGY]  if(opt.equals( "  + "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  + "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  + "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    this.options.get(opt);    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
224	[BUG]  [BUGGY]  if(opt.equals( ". "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( ". "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( ". "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    this.options.get(opt);    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
231	[BUG]  [BUGGY]  Preconditions.checkArgument(opt.length()  ==  0);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(opt.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(opt.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	63	None
232	[BUG]  [BUGGY]  Preconditions.checkArgument(option.length()  ==  0);  [CE]  cannot  find  symbol  option  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(option.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(option.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol  option	63	None
233	[BUG]  [BUGGY]  Preconditions.checkArgument(args.length()  ==  0);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(args.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(args.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol	63	None
234	[BUG]  [BUGGY]  Preconditions.checkArgument(opt,  opt.length()  ==  0);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(opt,  opt.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(opt,  opt.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	63	None
243	[BUG]  [BUGGY]  return  old  HashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  old  HashcodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  old  HashcodeMap();	      return    new    HashcodeMap();    	non-compiled	[CE]  illegal  start  of  type	304	None
244	[BUG]  [BUGGY]  return(new  HashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashcodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(new  HashcodeMap();	      return    new    HashcodeMap();    	non-compiled	[CE]  illegal  start  of  type	304	None
251	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  super.setOptions(options);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  super.setOptions(options);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    super.setOptions(options);	  	non-compiled	[CE]  illegal  start  of  type	23	None
252	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  new  HashMap();	  	non-compiled	[CE]  illegal  start  of  type	23	None
253	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.toHashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.toHashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  options.toHashMap();	  	non-compiled	[CE]  illegal  start  of  type	23	None
254	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashSet  <  Map>();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashSet  <  Map>();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  new  HashSet  <  Map>();	  	non-compiled	[CE]  illegal  start  of  type	23	None
255	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashSet  <  String>();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashSet  <  String>();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  new  HashSet  <  String>();	  	non-compiled	[CE]  illegal  start  of  type	23	None
263	[BUG]  [BUGGY]  return  isOption(String,  opt.valueOf(opt));  [CE]  cannot  find  symbol  String  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String,  opt.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String,  opt.valueOf(opt));	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  String	163	None
264	[BUG]  [BUGGY]  return  isOption(StringUtils.valueOf(opt));  [CE]  cannot  find  symbol  StringUtils  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(StringUtils.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(StringUtils.valueOf(opt));	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	163	None
272	[BUG]  [BUGGY]  opt  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArgs(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArgs(opt);	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
273	[BUG]  [BUGGY]  opt  =  getOptionKey(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionKey(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionKey(opt);	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
274	[BUG]  [BUGGY]  opt  =  getOptionValue();  [CE]  no  suitable  method  found  for  getOptionValue()  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionValue();  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionValue();	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValue()	282	None
283	[BUG]  [BUGGY]  return(values!=  null)?  null  :  values[0],  opt;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values!=  null)?  null  :  values[0],  opt;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values!=  null)?  null  :  values[0],  opt;	  return(values    ==    null)?    null    :    values[0],    opt;    	non-compiled	[CE]  ';'  expected	4	None
284	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1],  opt;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1],  opt;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[1],  opt;	  return(values    ==    null)?    null    :    values[0],    opt;    	non-compiled	[CE]  ';'  expected	4	None
291	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
292	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
294	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
295	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
302	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  options.toLowerCase();  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  options.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  options.toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  ';'  expected	62	None
303	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  opt.toLowerCase();  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  opt.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  opt.toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  ';'  expected	62	None
304	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  toLowerCase();  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  ';'  expected	62	None
311	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
312	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(hashcodeMap,  opt);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(hashcodeMap,  opt);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(hashcodeMap,  opt);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
313	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  args);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  args);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  args);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
314	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  default);  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  default);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  default);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None
321	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  false);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  true,  false);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean,boolean)	451	None
322	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  true);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  true);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  true);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	451	None
323	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  opt);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean,String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  true,  opt);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean,String)	451	None
324	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  args);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean,List)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  args);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  true,  args);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean,List)	451	None
331	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options.getKey()));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options.getKey()));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  getOptionValue(String.valueOf(options.getKey()));	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	185	None
332	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options.keySet()));  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options.keySet()));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  getOptionValue(String.valueOf(options.keySet()));	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  incompatible  types	185	None
333	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt));  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  getOptionValue(String.valueOf(opt));	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  incompatible  types	185	None
334	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options.chompTo(opt)));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options.chompTo(opt)));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  getOptionValue(String.valueOf(options.chompTo(opt)));	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	185	None
343	[BUG]  [BUGGY]  opt  =  getOptionArgs(opt.toLowerCase());  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArgs(opt.toLowerCase());  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArgs(opt.toLowerCase());	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
344	[BUG]  [BUGGY]  opt  =  getOptionArgsFromLocalName(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArgsFromLocalName(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArgsFromLocalName(opt);	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
353	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	181	None
354	[BUG]  [BUGGY]  if(options.hasOption(String,  opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String,  opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String,  opt)))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	181	None
362	[BUG]  [BUGGY]  super.addAll(args,  new  LinkedList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  new  LinkedList());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  new  LinkedList());	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
363	[BUG]  [BUGGY]  super.addAll(args,  CommandLine.COMMAND_LINE);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  CommandLine.COMMAND_LINE);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  CommandLine.COMMAND_LINE);	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
364	[BUG]  [BUGGY]  super.addAll(args,  CommandLine.COMMAND);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  CommandLine.COMMAND);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  CommandLine.COMMAND);	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
372	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	121	None
374	[BUG]  [BUGGY]  if(values  ==  null  ||!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	121	None
382	[BUG]  [BUGGY]  args  =  getOptionArgs(opt,  options);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  args  =  getOptionArgs(opt,  options);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	args  =  getOptionArgs(opt,  options);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	143	None
383	[BUG]  [BUGGY]  List  args  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  List  args  =  getOptionArgs(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	List  args  =  getOptionArgs(opt);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	143	None
384	[BUG]  [BUGGY]  Args  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  Args  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Args  =  getOptionArgs(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Args  =  getOptionArgs(opt);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol  Args	143	None
391	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
392	[BUG]  [BUGGY]  private  static  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  static  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
393	[BUG]  [BUGGY]  private  static  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  static  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
394	[BUG]  [BUGGY]  private  new  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  new  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  new  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
401	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  false);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  false);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	454	None
404	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  arguments,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  arguments,  false);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	454	None
411	[BUG]  [BUGGY]  return  System.identityHashCode(hashcodeMap);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  System.identityHashCode(hashcodeMap);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  System.identityHashCode(hashcodeMap);	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
412	[BUG]  [BUGGY]  return  hashcodeMap.keySet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  hashcodeMap.keySet();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  hashcodeMap.keySet();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
414	[BUG]  [BUGGY]  return  super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  super.hashcodeMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
421	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)	453	None
422	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(options,  opt);  [CE]  no  suitable  method  found  for  getOptionValues(Map,String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(options,  opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(options,  opt);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(Map,String)	453	None
423	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  HashCodeMap);  [CE]  cannot  find  symbol  HashCodeMap  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  HashCodeMap);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  HashCodeMap);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  cannot  find  symbol  HashCodeMap	453	None
432	[BUG]  [BUGGY]  return  hashcodeMap.containsKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hashcodeMap.containsKey(opt)||  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hashcodeMap.containsKey(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None
433	[BUG]  [BUGGY]  return  options.containsKey(opt)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)&&  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)&&  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None
434	[BUG]  [BUGGY]  return  options.hasOption(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.hasOption(opt)||  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.hasOption(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None
441	[BUG]  [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	391	None
452	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt),  args);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt),  args);  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt),  args);	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  cannot  find  symbol	393	None
453	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt),  opt);  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt),  opt);	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  cannot  find  symbol	393	None
462	[BUG]  [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
463	[BUG]  [BUGGY]  if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
464	[BUG]  [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains(. "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains(. "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains(. "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
471	[BUG]  [BUGGY]  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values.length))  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  missing  return  statement	275	None
473	[BUG]  [BUGGY]  if(opt!=  null)  {  if(values.length.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(values.length.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(values.length.equals(values.length))  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None
474	[BUG]  [BUGGY]  if(opt!=  null)  {  if(values.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(values.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(values.equals(values.length))  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None
481	[BUG]  [BUGGY]  for(String  args  :  opt.toLowerCase())  {  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  for(String  args  :  opt.toLowerCase())  {  if(args.contains(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	for(String  args  :  opt.toLowerCase())  {  if(args.contains(opt))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	35	None
482	[BUG]  [BUGGY]  for(String  args  :  opt.toLowerCase())  {  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  for(String  args  :  opt.toLowerCase())  {  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	for(String  args  :  opt.toLowerCase())  {  if(args.contains( "- "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	35	None
483	[BUG]  [BUGGY]  for(String  args  :  opt.values())  {  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  for(String  args  :  opt.values())  {  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	for(String  args  :  opt.values())  {  if(args.contains( "- "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	35	None
484	[BUG]  [BUGGY]  for(String  args  :  opt.getKey())  {  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  for(String  args  :  opt.getKey())  {  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	for(String  args  :  opt.getKey())  {  if(args.contains( "- "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	35	None
491	[BUG]  [BUGGY]  return  new  LinkedList(args.size());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  LinkedList(args.size());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  LinkedList(args.size());	      return    new    ArrayList(args.size());    	non-compiled	[CE]  illegal  start  of  type	111	None
492	[BUG]  [BUGGY]  return  new  ArrayList(args.size()  +  1);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args.size()  +  1);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args.size()  +  1);	      return    new    ArrayList(args.size());    	non-compiled	[CE]  illegal  start  of  type	111	None
493	[BUG]  [BUGGY]  return  new  ArrayList(args.size()  -  1);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args.size()  -  1);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args.size()  -  1);	      return    new    ArrayList(args.size());    	non-compiled	[CE]  illegal  start  of  type	111	None
501	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	21	None
502	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  static  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  static  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  static  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	21	None
503	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	21	None
504	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  new  HashCodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  new  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  new  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	21	None
505	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  static  final  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  static  final  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  static  final  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	21	None
511	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
513	[BUG]  [BUGGY]  return(values!=  null)?  null  :  values[0].equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values!=  null)?  null  :  values[0].equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values!=  null)?  null  :  values[0].equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
514	[BUG]  [BUGGY]  return(values  ==  null)  :  values[0].equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values  ==  null)  :  values[0].equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values  ==  null)  :  values[0].equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
522	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.containsKey(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
523	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.containsKey(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.containsKey(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
524	[BUG]  [BUGGY]  if(opt!=  null)  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {	      if(opt!=    null)    {    if(!args.containsKey(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
531	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt!=  null  &&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  opt!=  null  &&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  opt!=  null  &&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    null    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	43	None
533	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt!=  null  &&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt!=  null  &&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)&&  opt!=  null  &&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    null    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	43	None
534	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt  ==  null  &&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt  ==  null  &&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)&&  opt  ==  null  &&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    null    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	43	None
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	private  static  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
543	[BUG]  [BUGGY]  private  static  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  static  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	protected  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
544	[BUG]  [BUGGY]  protected  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	public  static  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
545	[BUG]  [BUGGY]  public  static  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  static  final  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
551	[BUG]  [BUGGY]  super.removeHashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.removeHashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.removeHashCodeMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
552	[BUG]  [BUGGY]  super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.hashcodeMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
553	[BUG]  [BUGGY]  super.removeHashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.removeHashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.removeHashcodeMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
554	[BUG]  [BUGGY]  super.reset();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.reset();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.reset();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
562	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
563	[BUG]  [BUGGY]  if(opt!=  null)  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
564	[BUG]  [BUGGY]  if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
572	[BUG]  [BUGGY]  if(values!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	272	None
573	[BUG]  [BUGGY]  if(values  ==  null  ||!values.isEmpty())  {  return  getOptionValue(opt);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!values.isEmpty())  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!values.isEmpty())  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  cannot  find  symbol	272	None
574	[BUG]  [BUGGY]  if(opt.isEmpty())  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.isEmpty())  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.isEmpty())  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	272	None
582	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  opt);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  opt);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	285	None
583	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  args);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  args);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  args);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	285	None
584	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  default);  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  default);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  default);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  illegal  start  of  expression	285	None
593	[BUG]  [BUGGY]  Validator.notNull(opt);  [CE]  cannot  find  symbol  Validator  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Validator.notNull(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Validator.notNull(opt);	      Validate.notNull(opt);    	non-compiled	[CE]  cannot  find  symbol  Validator	481	None
594	[BUG]  [BUGGY]  OptionNames.notNull(opt);  [CE]  cannot  find  symbol  OptionNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.notNull(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.notNull(opt);	      Validate.notNull(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionNames	481	None
601	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
602	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
603	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(0);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(0);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
604	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
613	[BUG]  [BUGGY]  private  Map  hashcodeMap  =  new  HashCodeMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  Map  hashcodeMap  =  new  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  Map  hashcodeMap  =  new  HashCodeMap();	      super.hashcodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  cannot  find  symbol	55	None
614	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashCodeMap(0,  0);	      super.hashcodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	55	None
621	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	423	None
622	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	423	None
623	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "vs "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "vs "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "vs "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	423	None
624	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	423	None
625	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	423	None
631	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.toHashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.toHashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  options.toHashMap();	  	non-compiled	[CE]  illegal  start  of  type	21	None
632	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  new  HashMap();	  	non-compiled	[CE]  illegal  start  of  type	21	None
633	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.iterate();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.iterate();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  options.iterate();	  	non-compiled	[CE]  illegal  start  of  type	21	None
634	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.keySet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.keySet();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  options.keySet();	  	non-compiled	[CE]  illegal  start  of  type	21	None
635	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.get( "- ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.get( "- ");  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  options.get( "- ");	  	non-compiled	[CE]  illegal  start  of  type	21	None
642	[BUG]  [BUGGY]  private  static  final  Map  option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  private  static  final  Map  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map  option  =  new  HashMap();	  private    final    Map    option    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	202	None
643	[BUG]  [BUGGY]  private  final  HashMap  option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  private  final  HashMap  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  HashMap  option  =  new  HashMap();	  private    final    Map    option    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	202	None
644	[BUG]  [BUGGY]  private  final  Linked  Map  option  =  new  HashMap();  [CE]  ';'  expected  [CONTEXT]      [BUGGY]  private  final  Linked  Map  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Linked  Map  option  =  new  HashMap();	  private    final    Map    option    =    new    HashMap();    	non-compiled	[CE]  ';'  expected	202	None
653	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	61	None
654	[BUG]  [BUGGY]  if(opt!=  null)  {  if(opt.length()  >  0)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(opt.length()  >  0)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(opt.length()  >  0)  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	61	None
662	[BUG]  [BUGGY]  return  old  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  old  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  old  HashMap();	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
663	[BUG]  [BUGGY]  return(new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return(new  HashMap();	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
664	[BUG]  [BUGGY]  return  0  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  0  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  0  HashMap();	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
672	[BUG]  [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
673	[BUG]  [BUGGY]  if(options.getKey()  ==  opt)  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()  ==  opt)  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()  ==  opt)  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
674	[BUG]  [BUGGY]  if(option.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(option.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(option.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
681	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(this.options,  opt);  [CE]  no  suitable  method  found  for  getOptionValues(Map,String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(this.options,  opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(this.options,  opt);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(Map,String)	63	None
682	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.args);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,List)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.args);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  this.args);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,List)	63	None
683	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  args);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,List)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  args);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  args);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,List)	63	None
684	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.hashcodeMap);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.hashcodeMap);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  this.hashcodeMap);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)	63	None
691	[BUG]  [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt!=  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
692	[BUG]  [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
694	[BUG]  [BUGGY]  if(options  ==  null  ||  options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||  options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||  options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
701	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
702	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
703	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
704	[BUG]  [BUGGY]  if(opt.equals( "- "))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.equals( "- "))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.equals( "- "))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ ".opt ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ ".opt ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
714	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ ".opt ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ ".opt ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ ".opt ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ ",  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ ",  vs ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
715	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ ",  vs ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ ",  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ ",  vs ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
721	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None
722	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None
723	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None
724	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None
725	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  args.valueOf(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  args.valueOf(opt);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(!args.contains(opt))  {  args  =  new  HashMap  <  String,Option>();  if(args.contains(opt))  {  return  args.valueOf(opt);  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None
731	[BUG]  [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashCodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	395	None
734	[BUG]  [BUGGY]  if(options!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options!=  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args   "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashCodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	395	None
742	[BUG]  [BUGGY]  return  hashCode.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  hashCode.create();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  hashCode.create();	      return    HashCode.create();    	non-compiled	[CE]  illegal  start  of  type	303	None
743	[BUG]  [BUGGY]  return  HashCode.newInstance();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCode.newInstance();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCode.newInstance();	      return    HashCode.create();    	non-compiled	[CE]  illegal  start  of  type	303	None
751	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(hashcodeMap);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(hashcodeMap);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  System.identityHashCode(hashcodeMap);	  	non-compiled	[CE]  illegal  start  of  type	153	None
752	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  super.hashcodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
753	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap  =  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    super.hashcodeMap  =  new  HashMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
754	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  new  HashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
755	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    super.hashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	protected  final  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
762	[BUG]  [BUGGY]  protected  final  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  final  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	final  protected  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
764	[BUG]  [BUGGY]  final  protected  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	final  protected  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
764	[BUG]  [BUGGY]  protected  List  options  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  protected  List  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  List  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	24	None
773	[BUG]  [BUGGY]  if(opt.hasOption(options))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.hasOption(options))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.hasOption(options))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	321	None
774	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(!options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(!options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	321	None
782	[BUG]  [BUGGY]  if(values!=  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values!=  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values!=  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	271	None
783	[BUG]  [BUGGY]  if(values  ==  null  ||!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	271	None
793	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt)+   ":   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None
794	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt)+   ":   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None
803	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  / ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  / ");	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
804	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  / ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  / ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  / ");	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
804	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
805	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
812	[BUG]  [BUGGY]  private  final  Map.Entry  >>  K,  V>  options  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.Entry  >>  K,  V>  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.Entry  >>  K,  V>  options  =  new  HashMap();	      private    final    Map.Entry    <    K,    V>    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	243	None
813	[BUG]  [BUGGY]  private  static  final  Map.Entry  <  K,  V>  options  =  new  HashMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  static  final  Map.Entry  <  K,  V>  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map.Entry  <  K,  V>  options  =  new  HashMap();	      private    final    Map.Entry    <    K,    V>    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	243	None
814	[BUG]  [BUGGY]  private  final  Map.Entry  Prezent  K,  V>  options  =  new  HashMap();  [CE]  ';'  expected  [CONTEXT]      [BUGGY]  private  final  Map.Entry  Prezent  K,  V>  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.Entry  Prezent  K,  V>  options  =  new  HashMap();	      private    final    Map.Entry    <    K,    V>    options    =    new    HashMap();    	non-compiled	[CE]  ';'  expected	243	None
822	[BUG]  [BUGGY]  checkArgument(!Options.isEmpty(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  checkArgument(!Options.isEmpty(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	checkArgument(!Options.isEmpty(),  opt);	      checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	484	None
824	[BUG]  [BUGGY]  checkAnswer(!Options.isEmpty());  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  checkAnswer(!Options.isEmpty());  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	checkAnswer(!Options.isEmpty());	      checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	484	None
831	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  List  args  =  new  ArrayList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  List  args  =  new  ArrayList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  final  List  args  =  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
832	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  List  args  =  new  LinkedList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  List  args  =  new  LinkedList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  final  List  args  =  new  LinkedList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
833	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  static  List  args  =  new  ArrayList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  static  List  args  =  new  ArrayList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  static  List  args  =  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
834	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  ArrayList  args  =  new  ArrayList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  final  ArrayList  args  =  new  ArrayList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  final  ArrayList  args  =  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
835	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  static  final  List  args  =  new  ArrayList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  static  final  List  args  =  new  ArrayList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  static  final  List  args  =  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
842	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None
843	[BUG]  [BUGGY]  if(values!=  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values!=  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values!=  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None
853	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)))  {  return  true;  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  missing  return  statement	184	None
854	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt)))  {  return  true;  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt)))  {  return  true;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt)))  {  return  true;	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
861	[BUG]  [BUGGY]  opt  =  String.valueOf(opt);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(opt);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  values	64	None
862	[BUG]  [BUGGY]  opt  =  String.valueOf(string);  [CE]  cannot  find  symbol  string  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(string);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(string);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  string	64	None
863	[BUG]  [BUGGY]  opt  =  String.valueOf(text);  [CE]  cannot  find  symbol  text  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(text);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(text);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  text	64	None
864	[BUG]  [BUGGY]  opt  =  String.valueOf(topt);  [CE]  cannot  find  symbol  topt  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(topt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(topt);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  topt	64	None
871	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.keySet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.keySet();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  hashcodeMap.keySet();	  	non-compiled	[CE]  illegal  start  of  type	151	None
872	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  new  HashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	151	None
873	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    hashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	151	None
874	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap  =  new  HashCode();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap  =  new  HashCode();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    hashcodeMap  =  new  HashCode();	  	non-compiled	[CE]  <identifier>  expected	151	None
875	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap.put( "/ "  +  getClass().getName());  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  hashcodeMap.put( "/ "  +  getClass().getName());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    hashcodeMap.put( "/ "  +  getClass().getName());	  	non-compiled	[CE]  <identifier>  expected	151	None
883	[BUG]  [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None
884	[BUG]  [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None
891	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  illegal  start  of  expression	263	None
892	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  for(String  vs  :  options.keySet())  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  for(String  vs  :  options.keySet())  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    for(String  vs  :  options.keySet())  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  illegal  start  of  expression	263	None
893	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  illegal  start  of  expression	263	None
902	[BUG]  [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
903	[BUG]  [BUGGY]  if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
904	[BUG]  [BUGGY]  if(option  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(option  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(option  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
914	[BUG]  [BUGGY]  return  new  ArrayList(args.values());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args.values());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args.values());	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	133	None
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	private  static  final  Map  options  =  new  HashMap();	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
923	[BUG]  [BUGGY]  private  static  final  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map  options  =  new  HashMap();	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	private  static  Map  options  =  new  HashMap();	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
925	[BUG]  [BUGGY]  private  static  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  Map  options  =  new  HashMap();	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
932	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)+  args;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt)+  args;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt)+  args;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None
933	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)+  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt)+  2;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt)+  2;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None
942	[BUG]  [BUGGY]  super.setOptions(options,  new  HashMap());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  new  HashMap());  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  new  HashMap());	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
943	[BUG]  [BUGGY]  super.setOptions(options,  CommandLine.DEFAULT_LOAD_FACTOR);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  CommandLine.DEFAULT_LOAD_FACTOR);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  CommandLine.DEFAULT_LOAD_FACTOR);	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
944	[BUG]  [BUGGY]  super.setOptions(options,  true);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  true);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  true);	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
952	[BUG]  [BUGGY]  return  old  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  old  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  old  HashCodeMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
953	[BUG]  [BUGGY]  return(new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(new  HashCodeMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
954	[BUG]  [BUGGY]  return  0  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  0  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  0  HashCodeMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
962	[BUG]  [BUGGY]  if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
964	[BUG]  [BUGGY]  if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
971	[BUG]  [BUGGY]  return  new  LinkedList(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  LinkedList(args);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  LinkedList(args);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
973	[BUG]  [BUGGY]  return  new  ArrayList(args,  null);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  null);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  null);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
974	[BUG]  [BUGGY]  return  new  ArrayList(args,  CommandLine.COMMAND);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  CommandLine.COMMAND);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  CommandLine.COMMAND);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  LinkedList  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	private  LinkedList  args  =  new  LinkedList();	  private    List    args    =    new    ArrayList();    	compilable	  [FE]  AssertionFailedError  testCLI13	131	1
985	[BUG]  [BUGGY]  private  LinkedList  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  LinkedList  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  LinkedList  args  =  new  LinkedList();	  private    List    args    =    new    ArrayList();    	compilable	  [FE]  AssertionFailedError  testCLI13	131	1
992	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	public  final  Map  options  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
993	[BUG]  [BUGGY]  public  final  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  final  Map  options  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
993	[BUG]  [BUGGY]  public  List  options  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  public  List  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  List  options  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	25	None
994	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  Map  options  =  new  HashMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	public  Map  options  =  new  HashMap(32);	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
995	[BUG]  [BUGGY]  public  Map  options  =  new  HashMap(32);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  Map  options  =  new  HashMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  Map  options  =  new  HashMap(32);	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
1001	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt  ==  String.valueOf(args));  [CE]  incomparable  types:  char  and  String  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)&&  opt  ==  String.valueOf(args));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)&&  opt  ==  String.valueOf(args));	  return    hasOption(String.valueOf(opt)||    opt    ==    String.valueOf(args));    	non-compiled	[CE]  incomparable  types:  char  and  String	44	None
1003	[BUG]  [BUGGY]  return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(args));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(args));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(args));	  return    hasOption(String.valueOf(opt)||    opt    ==    String.valueOf(args));    	non-compiled	[CE]  cannot  find  symbol	44	None
1004	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  args  ==  String.valueOf(opt));  [CE]  incomparable  types:  List  and  String  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  args  ==  String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  args  ==  String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    String.valueOf(args));    	non-compiled	[CE]  incomparable  types:  List  and  String	44	None
1011	[BUG]  [BUGGY]  if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }  [CE]  unexpected  type  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  unexpected  type	184	None
1012	[BUG]  [BUGGY]  if(opt!=  null)  {  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  hasOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	184	None
1013	[BUG]  [BUGGY]  if(!hasOption(opt))  {  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(opt))  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(opt))  {  hasOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  missing  return  statement	184	None
1014	[BUG]  [BUGGY]  if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }  else  {  options.setOption(String.valueOf(opt));  }  [CE]  unexpected  type  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }  else  {  options.setOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  instanceof  String)  {  hasOption(String.valueOf(opt));  }  else  {  options.setOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  unexpected  type	184	None
1022	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt,  hashcodeMap);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt,  hashcodeMap);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt,  hashcodeMap);	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	144	None
1023	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt,  options);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt,  options);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt,  options);	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	144	None
1024	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt)?  opt  :  null;  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt)?  opt  :  null;  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt)?  opt  :  null;	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	144	None
1032	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	public  final  Map  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	155	1
1033	[BUG]  [BUGGY]  public  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  final  Map  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	155	1
1033	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  HashMap  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	public  HashMap  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	155	1
1034	[BUG]  [BUGGY]  public  HashMap  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  HashMap  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  HashMap  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	155	1
1034	[BUG]  [BUGGY]  public  List  hashcodeMap  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  public  List  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  List  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	155	None
1041	[BUG]  [BUGGY]  for(String  args  :  options.keySet())  {  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  for(String  args  :  options.keySet())  {  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	for(String  args  :  options.keySet())  {  if(args.size()  >  1)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None
1042	[BUG]  [BUGGY]  for(String  args  :  options.keySet())  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  for(String  args  :  options.keySet())  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	for(String  args  :  options.keySet())  {  if(args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None
1053	[BUG]  [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None
1054	[BUG]  [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None
1062	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
1063	[BUG]  [BUGGY]  if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.contains(opt))  {  if(!args.contains(opt))  {  return  getOptionValue();  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
1064	[BUG]  [BUGGY]  if(args  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(args  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(args  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None
1074	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values!=  null)?  null  :  values[0];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	add	return(values!=  null)?  null  :  values[0];	  return(values    ==    null)?    null    :    values[1];    	compilable	  [FE]  ComparisonFailure  testCLI13	75	1
1075	[BUG]  [BUGGY]  return(values!=  null)?  null  :  values[0];  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values!=  null)?  null  :  values[0];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values!=  null)?  null  :  values[0];	  return(values    ==    null)?    null    :    values[1];    	compilable	  [FE]  ComparisonFailure  testCLI13	75	1
1081	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1082	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1083	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1084	[BUG]  [BUGGY]  if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1091	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	162	None
1092	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	162	None
1093	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	162	None
1094	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	162	None
1095	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(!hasOption(opt))  {  args  =  options.get(0);  if(args.contains(opt))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	162	None
1101	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(opt)||  options.containsValue(opt);	  	non-compiled	[CE]  unreachable  statement	164	None
1102	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)&&  options.containsValue(opt);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)&&  options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(opt)&&  options.containsValue(opt);	  	non-compiled	[CE]  unreachable  statement	164	None
1104	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(string)||  options.containsValue(opt);  [CE]  cannot  find  symbol  string  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(string)||  options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(string)||  options.containsValue(opt);	  	non-compiled	[CE]  cannot  find  symbol  string	164	None
1105	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.hasOption(opt)||  options.containsKey(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.hasOption(opt)||  options.containsKey(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.hasOption(opt)||  options.containsKey(opt);	  	non-compiled	[CE]  cannot  find  symbol	164	None
1113	[BUG]  [BUGGY]  super.setOptions(false,  true);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(false,  true);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(false,  true);	      super.setOptions(false);    	non-compiled	[CE]  illegal  start  of  type	15	None
1114	[BUG]  [BUGGY]  super.setOptions(true,  true);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(true,  true);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(true,  true);	      super.setOptions(false);    	non-compiled	[CE]  illegal  start  of  type	15	None
1121	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)&&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)&&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)&&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	42	None
1132	[BUG]  [BUGGY]  return  HashCodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCodeMap.create();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCodeMap.create();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
1133	[BUG]  [BUGGY]  return  hashcodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  hashcodeMap.create();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  hashcodeMap.create();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
1134	[BUG]  [BUGGY]  return  HashcodeMap.newInstance();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashcodeMap.newInstance();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashcodeMap.newInstance();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
1141	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  final  HashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
1142	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  final  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
1143	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  static  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
1144	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  HashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  HashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  static  HashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
1145	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  HashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  HashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  HashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
1151	[BUG]  [BUGGY]  protected  List  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  protected  List  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	protected  List  args  =  new  ArrayList();	  protected    List    args    =    new    LinkedList();    	non-compiled	[CE]  cannot  find  symbol	134	None
1152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	protected  final  List  args  =  new  LinkedList();	  protected    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	134	1
1153	[BUG]  [BUGGY]  protected  final  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  final  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	protected  final  List  args  =  new  LinkedList();	  protected    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	134	1
1153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	final  protected  List  args  =  new  LinkedList();	  protected    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	134	1
1154	[BUG]  [BUGGY]  final  protected  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	final  protected  List  args  =  new  LinkedList();	  protected    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	134	1
1154	[BUG]  [BUGGY]  protected  final  List  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  protected  final  List  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	protected  final  List  args  =  new  ArrayList();	  protected    List    args    =    new    LinkedList();    	non-compiled	[CE]  cannot  find  symbol	134	None
1163	[BUG]  [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(!opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	324	None
1172	[BUG]  [BUGGY]  private  static  final  Map  Option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  private  static  final  Map  Option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map  Option  =  new  HashMap();	      private    final    Map    Option    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	246	None
1173	[BUG]  [BUGGY]  private  static  Map  Option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  private  static  Map  Option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  Map  Option  =  new  HashMap();	      private    final    Map    Option    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	246	None
1184	[BUG]  [BUGGY]  return  haveOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  haveOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  haveOption(String.valueOf(opt));	  return    hasOption(String.valueOf(options));    	non-compiled	[CE]  cannot  find  symbol	425	None
1192	[BUG]  [BUGGY]  super.setOptions(false;  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(false;  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(false;	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
1193	[BUG]  [BUGGY]  super.setOptions(null);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(null);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(null);	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
1194	[BUG]  [BUGGY]  super.setOption(false);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOption(false);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOption(false);	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
1201	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
1202	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
1203	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
1204	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
1212	[BUG]  [BUGGY]  if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
1213	[BUG]  [BUGGY]  if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(option.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
1214	[BUG]  [BUGGY]  if(!opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
1222	[BUG]  [BUGGY]  Validate.notEmpty(values);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Validate.notEmpty(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Validate.notEmpty(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Validate	224	None
1223	[BUG]  [BUGGY]  Validator.notNull(values);  [CE]  cannot  find  symbol  Validator  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Validator.notNull(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Validator.notNull(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Validator	224	None
1224	[BUG]  [BUGGY]  Validates.notNull(values);  [CE]  cannot  find  symbol  Validates  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Validates.notNull(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Validates.notNull(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Validates	224	None
1232	[BUG]  [BUGGY]  OptionNames.put(opt,  options.getKey(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(opt,  options.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(opt,  options.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol	283	None
1233	[BUG]  [BUGGY]  OptionNames.put(opt,  optionNames.getKey(),  opt);  [CE]  cannot  find  symbol  optionNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(opt,  optionNames.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(opt,  optionNames.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol  optionNames	283	None
1234	[BUG]  [BUGGY]  OptionNames.put(opt,  opt.getKey(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(opt,  opt.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(opt,  opt.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol	283	None
1251	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	22	None
1252	[BUG]  [BUGGY]  private  static  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  static  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  Map.hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	22	None
1253	[BUG]  [BUGGY]  private  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  Map.hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	22	None
1254	[BUG]  [BUGGY]  private  new  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  new  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  new  Map.hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	22	None
1263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ ": "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	84	1
1264	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": "  +  opt);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ": "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	84	1
1264	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1 ": ");  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1 ": ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  1 ": ");	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  	84	None
1271	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
1272	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
1273	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.args.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.args.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.args.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
1274	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args.containsValue(opt))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
1275	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.containsKey(opt))  {  args  =  this.options.get(opt);  if(args!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
1282	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  3);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+  3);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1283	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  3);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  3);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  3);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1283	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+  2);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1284	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  2);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  2);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+  0);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1285	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  0);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  0);	  return    getOptionValue(String.valueOf(opt)+    1);    	compilable	  [FE]  ComparisonFailure  testCLI13	83	1
1291	[BUG]  [BUGGY]  return  args.containsKey(opt)||  options.containsValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  args.containsKey(opt)||  options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  args.containsKey(opt)||  options.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None
1293	[BUG]  [BUGGY]  return  args.containsKey(opt)||  alternatives.containsValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  args.containsKey(opt)||  alternatives.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  args.containsKey(opt)||  alternatives.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None
1294	[BUG]  [BUGGY]  return  hashcodeMap.containsKey(opt)||  args.containsValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hashcodeMap.containsKey(opt)||  args.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hashcodeMap.containsKey(opt)||  args.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None
1301	[BUG]  [BUGGY]  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  missing  return  statement	75	None
1302	[BUG]  [BUGGY]  if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  options.put(opt,  values);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  options.put(opt,  values);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  options.put(opt,  values);  }	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
1303	[BUG]  [BUGGY]  if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  names.put(opt,  values);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  names.put(opt,  values);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  args  =  new  ArrayList  <  String>(values.toLowerCase());  }  else  {  names.put(opt,  values);  }	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
1304	[BUG]  [BUGGY]  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  else  {  options.put(opt,  values);  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  else  {  options.put(opt,  values);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  else  {  options.put(opt,  values);  }	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  missing  return  statement	75	None
1312	[BUG]  [BUGGY]  return  options.getOptionValue(String.valueOf(opt));  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  options.getOptionValue(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  options.getOptionValue(String.valueOf(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  cannot  find  symbol	85	None
1313	[BUG]  [BUGGY]  return  getValue(String.valueOf(opt));  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getValue(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getValue(String.valueOf(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  cannot  find  symbol	85	None
1314	[BUG]  [BUGGY]  return  getOptionValue(StringUtils.safeToInt(opt));  [CE]  cannot  find  symbol  StringUtils  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(StringUtils.safeToInt(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(StringUtils.safeToInt(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  cannot  find  symbol  StringUtils	85	None
1322	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	182	None
1323	[BUG]  [BUGGY]  if(option!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  option  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(option!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(option!=  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  option	182	None
1324	[BUG]  [BUGGY]  if(option  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  option  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(option  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(option  ==  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  option	182	None
1331	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
1333	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
1334	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
1342	[BUG]  [BUGGY]  private  HashMap();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  HashMap();	      new    HashMap();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None
1343	[BUG]  [BUGGY]  public  HashMap();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  public  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  HashMap();	      new    HashMap();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None
1344	[BUG]  [BUGGY]  final  HashMap();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  final  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	final  HashMap();	      new    HashMap();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None
1352	[BUG]  [BUGGY]  private  super.hashCodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  super.hashCodeMap  =  new  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  super.hashCodeMap  =  new  HashCodeMap();	      super.hashCodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	53	None
1353	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashCodeMap(0,  0);	      super.hashCodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	53	None
1362	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None
1363	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(!args.contains(opt))  {  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None
1364	[BUG]  [BUGGY]  if(!args.contains(opt))  {  return  null;  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!args.contains(opt))  {  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!args.contains(opt))  {  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  missing  return  statement	125	None
1372	[BUG]  [BUGGY]  return  hashcodeMap.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hashcodeMap.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hashcodeMap.hasOption(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	32	None
1373	[BUG]  [BUGGY]  return  args.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  args.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  args.hasOption(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	32	None
1374	[BUG]  [BUGGY]  return  option.hasOption(opt);  [CE]  cannot  find  symbol  option  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  option.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  option.hasOption(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	32	None
1382	[BUG]  [BUGGY]  return  this.options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.hasOption(opt);	  return    this.options.containsKey(opt);    	non-compiled	[CE]  cannot  find  symbol	515	None
1383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt)||  this.options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	add	return  this.options.containsKey(opt)||  this.options.containsValue(opt);	  return    this.options.containsKey(opt);    	compilable	  [FE]  AssertionFailedError  testCLI13	515	1
1384	[BUG]  [BUGGY]  return  this.options.containsKey(opt)||  this.options.containsValue(opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt)||  this.options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.containsKey(opt)||  this.options.containsValue(opt);	  return    this.options.containsKey(opt);    	compilable	  [FE]  AssertionFailedError  testCLI13	515	1
1384	[BUG]  [BUGGY]  return  this.options.containsValue(opt);  [CE]  error  reading  /home/heye/.maven/repository/junit/jars/junit-3.8.1.jar;  java.io.EOFException  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.containsValue(opt);	  return    this.options.containsKey(opt);    	non-compiled	[CE]  error  reading  /home/heye/.maven/repository/junit/jars/junit-3.8.1.jar;  java.io.EOFException	515	None
1391	[BUG]  [BUGGY]  private  final  Map  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  final  Map  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  final  Map  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1392	[BUG]  [BUGGY]  private  static  Map  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  static  Map  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  static  Map  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1393	[BUG]  [BUGGY]  private  Map  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  Map  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  Map  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1394	[BUG]  [BUGGY]  private  Map  final  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  Map  final  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  Map  final  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1403	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(1)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(1)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(1)))  {  return  hasOption(String.valueOf(opt));  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  missing  return  statement	333	None
1404	[BUG]  [BUGGY]  if(!options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  missing  return  statement	333	None
1411	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
1412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	332	1
1413	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	332	1
1413	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.valueOf(opt)))  {  if(options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
1414	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  instanceof  String)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  instanceof  String)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  instanceof  String)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
1415	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.keyOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.keyOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.keyOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
1423	[BUG]  [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  + "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
1424	[BUG]  [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( ". "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None
1432	[BUG]  [BUGGY]  Validator.notEmpty(opt);  [CE]  cannot  find  symbol  Validator  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Validator.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Validator.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  cannot  find  symbol  Validator	485	None
1433	[BUG]  [BUGGY]  OptionNames.notEmpty(opt);  [CE]  cannot  find  symbol  OptionNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionNames	485	None
1442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  2);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1443	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  2);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  0);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1444	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  0);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  3);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  3);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1445	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  3);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  3);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  3);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
1452	[BUG]  [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1453	[BUG]  [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "--> "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "--> "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "--> "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1454	[BUG]  [BUGGY]  if(opt!=  null)  {  opt  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  opt  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  opt  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1462	[BUG]  [BUGGY]  Preconditions.checkArgument(!Options.isEmpty(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(!Options.isEmpty(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(!Options.isEmpty(),  opt);	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	483	None
1463	[BUG]  [BUGGY]  Preconditions.checkArgument(!Options,  opt.isEmpty());  [CE]  cannot  find  symbol  Options  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(!Options,  opt.isEmpty());  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(!Options,  opt.isEmpty());	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  Options	483	None
1464	[BUG]  [BUGGY]  Preconditions.checkArgument(! "Options.isEmpty());  [CE]  unclosed  string  literal  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(! "Options.isEmpty());  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(! "Options.isEmpty());	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  unclosed  string  literal	483	None
1471	[BUG]  [BUGGY]  if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	65	None
1472	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	65	None
1482	[BUG]  [BUGGY]  private  static  Map();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  static  Map();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  Map();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
1483	[BUG]  [BUGGY]  public  final  Map();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  public  final  Map();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  final  Map();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
1484	[BUG]  [BUGGY]  protected  final  Map();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  protected  final  Map();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  final  Map();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
1493	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  2;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  2;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  2;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
1494	[BUG]  [BUGGY]  return(values!=  null)?  null  :  values[0],  1;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values!=  null)?  null  :  values[0],  1;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values!=  null)?  null  :  values[0],  1;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
1501	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(!args.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	83	None
1502	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  if(!args.contains( "- "))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	83	None
1504	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.containsKey(opt))  {  String  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  	83	None
1513	[BUG]  [BUGGY]  return  old  ArrayList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  old  ArrayList();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  old  ArrayList();	      return    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	115	None
1514	[BUG]  [BUGGY]  return  new  DefaultList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  DefaultList();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  DefaultList();	      return    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	115	None
1522	[BUG]  [BUGGY]  if(values  ==  null)  {  if(!values.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  if(!values.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  if(!values.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	273	None
1524	[BUG]  [BUGGY]  if(values!=  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values!=  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values!=  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	273	None
1533	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
1534	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
1542	[BUG]  [BUGGY]  return  options.toHashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.toHashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.toHashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
1543	[BUG]  [BUGGY]  return  options.keySet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.keySet();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.keySet();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
1544	[BUG]  [BUGGY]  return  options.iterate();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.iterate();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.iterate();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
1551	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt!=  null)  {  if(!hasOption(opt))  {  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None
1553	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt  ==  null)  {  if(!hasOption(opt))  {  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None
1554	[BUG]  [BUGGY]  if(options  ==  null  ||  options.hasOption(opt))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||  options.hasOption(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||  options.hasOption(opt))  {  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	392	None
1563	[BUG]  [BUGGY]  if(values  ==  null  ||!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	123	None
1564	[BUG]  [BUGGY]  if(values  ==  null)  {  if(!args.contains( "-- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null)  {  if(!args.contains( "-- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null)  {  if(!args.contains( "-- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None
1573	[BUG]  [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    (values    ==    null)?    null    :    values[0];    }    	non-compiled	[CE]  illegal  start  of  expression	141	None
1574	[BUG]  [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  <<  null)?  null  :  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  <<  null)?  null  :  values[0];  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  <<  null)?  null  :  values[0];  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    (values    ==    null)?    null    :    values[0];    }    	non-compiled	[CE]  illegal  start  of  expression	141	None
1581	[BUG]  [BUGGY]  private  static  List  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  static  List  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  static  List  args  =  new  ArrayList();	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  cannot  find  symbol	133	None
1583	[BUG]  [BUGGY]  private  static  final  List  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  static  final  List  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  static  final  List  args  =  new  ArrayList();	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  cannot  find  symbol	133	None
1584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	private  static  List  args  =  new  LinkedList();	  private    final    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	133	1
1585	[BUG]  [BUGGY]  private  static  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  static  List  args  =  new  LinkedList();	  private    final    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	133	1
1593	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None
1594	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None
1603	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	final  protected  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
1604	[BUG]  [BUGGY]  final  protected  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  protected  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	final  protected  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
1604	[BUG]  [BUGGY]  protected  List  hashcodeMap  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  protected  List  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected  List  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	154	None
1612	[BUG]  [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1613	[BUG]  [BUGGY]  if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1614	[BUG]  [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1622	[BUG]  [BUGGY]  if(values.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
1623	[BUG]  [BUGGY]  if(option.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(option.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(option.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
1624	[BUG]  [BUGGY]  if(!opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
1634	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashMap(0,  0);	      super.hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	52	None
1641	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals( " "))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals( " "))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.equals( " "))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
1642	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt!=  null)  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
1643	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values[0]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values[0]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt!=  null)  {  if(values[0]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
1644	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[0];  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[0];  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
1645	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[1];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[1];  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.isEmpty())  {  if(values  ==  null)  {  return(values  ==  null)?  null  :  values[1];  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
1653	[BUG]  [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None
1654	[BUG]  [BUGGY]  if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(option!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None
1661	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	183	None
1662	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt!=  null)  {  args  =  options.get(opt);  if(args.size()  >  0)  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	183	None
1663	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt!=  null)  {  if(!hasOption(opt))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	183	None
1664	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt  instanceof  String)  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  instanceof  String)  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt  instanceof  String)  {  if(!hasOption(opt))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	183	None
1665	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	183	None
1671	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1672	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1673	[BUG]  [BUGGY]  if(options.containsKey(opt)||!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt)||!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt)||!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	91	None
1674	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1682	[BUG]  [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1683	[BUG]  [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1684	[BUG]  [BUGGY]  if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(args  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1692	[BUG]  [BUGGY]  private  super.hashCodeMap  =  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  super.hashCodeMap  =  new  HashMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  super.hashCodeMap  =  new  HashMap();	      super.hashCodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	54	None
1694	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashMap(0,  0);	      super.hashCodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	54	None
1702	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt)),  opt);  [CE]  no  suitable  constructor  found  for  Option(String)  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt)),  opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt)),  opt);	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  no  suitable  constructor  found  for  Option(String)	335	None
1704	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt)),  this.args);  [CE]  no  suitable  constructor  found  for  Option(String)  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt)),  this.args);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt)),  this.args);	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  no  suitable  constructor  found  for  Option(String)	335	None
1712	[BUG]  [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
1713	[BUG]  [BUGGY]  if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
1714	[BUG]  [BUGGY]  if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  	95	None
1721	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  1));  [CE]  ';'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  1));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  1));	  	non-compiled	[CE]  ';'  expected	183	None
1722	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  1);  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  1);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  1);	  	non-compiled	[CE]  incompatible  types	183	None
1723	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  8));  [CE]  ';'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  8));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  8));	  	non-compiled	[CE]  ';'  expected	183	None
1724	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  3));  [CE]  ';'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  3));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  3));	  	non-compiled	[CE]  ';'  expected	183	None
1725	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  this.char));  [CE]  <identifier>  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  this.char));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  this.char));	  	non-compiled	[CE]  <identifier>  expected	183	None
1	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  [Delete]  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	[Delete]	      	non-compiled	[CE]  illegal  start  of  expression	65	None
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	protected  static  final  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
44	[BUG]  [BUGGY]  protected  static  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  protected  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected  static  final  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
44	[BUG]  [BUGGY]  safe  final  Map  hashcodeMap  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  safe  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	safe  final  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	154	None
64	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	273	None
81	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  [Delete]  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	[Delete]	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None
83	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    true;    }    	non-compiled	[CE]  	101	None
102	[BUG]  [BUGGY]  Preconditions.checkArgument(options.length()  ==  0);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(options.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(options.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol	63	None
103	[BUG]  [BUGGY]  Preconditions.checkArgument(opt.length()!=  0);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(opt.length()!=  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(opt.length()!=  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	63	None
121	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  Arrays.sort(this.options);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  Arrays.sort(this.options);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    Arrays.sort(this.options);	  	non-compiled	[CE]  cannot  find  symbol  Arrays	74	None
122	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
123	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args!=  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args!=  null)  {  return  null;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args!=  null)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
124	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getArguments(opt);  if(args!=  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getArguments(opt);  if(args!=  null)  {  return  null;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.equals(values))  {  String[]  args  =  getArguments(opt);  if(args!=  null)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
125	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args  ==  null)  {  return  null;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt.equals(values))  {  String[]  args  =  getOptionValues(opt);  if(args  ==  null)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
144	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(this);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(this);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(this);	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
163	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  	102	None
164	[BUG]  [BUGGY]  if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  unclosed  string  literal	102	None
183	[BUG]  [BUGGY]  return  new  ArrayList(this.args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(this.args);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(this.args);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
184	[BUG]  [BUGGY]  return  new  ArrayList(args,  private);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  private);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  private);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
202	[BUG]  [BUGGY]  Validate.notEmpty(opt),  butOptions.notEmpty(opt);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Validate.notEmpty(opt),  butOptions.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Validate.notEmpty(opt),  butOptions.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  ';'  expected	485	None
203	[BUG]  [BUGGY]  Validate.notEmpty(opt),  defaultOptions.notEmpty(opt);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Validate.notEmpty(opt),  defaultOptions.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Validate.notEmpty(opt),  defaultOptions.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  ';'  expected	485	None
221	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	183	None
222	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	183	None
223	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.class))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.class))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(options.hasOption(String.class))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	183	None
224	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	183	None
225	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	183	None
241	[BUG]  [BUGGY]  Options.sort(values);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Options.sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Options.sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  cannot  find  symbol	274	None
242	[BUG]  [BUGGY]  options.sort(values);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  options.sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	options.sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  cannot  find  symbol	274	None
261	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  	92	None
263	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
264	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
282	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.hashcodeMap  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
283	[BUG]  [BUGGY]  super.hashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.hashCodeMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
284	[BUG]  [BUGGY]  super.report(JSError.make(HashCodeMap.HashCodeMap(),  hashcodeMap));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.report(JSError.make(HashCodeMap.HashCodeMap(),  hashcodeMap));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.report(JSError.make(HashCodeMap.HashCodeMap(),  hashcodeMap));	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
302	[BUG]  [BUGGY]  return  isOption(String.valueOf(opt),  hashcodeMap);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String.valueOf(opt),  hashcodeMap);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String.valueOf(opt),  hashcodeMap);	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
304	[BUG]  [BUGGY]  return  isOption(String.valueOf(options.keyword));  [CE]  cannot  find  symbol  keyword  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String.valueOf(options.keyword));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String.valueOf(options.keyword));	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  keyword	163	None
321	[BUG]  [BUGGY]  return(List)args.toArray(new  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(List)args.toArray(new  ArrayList());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return(List)args.toArray(new  ArrayList());	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	133	None
323	[BUG]  [BUGGY]  return  args.toArray(new  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  args.toArray(new  ArrayList());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  args.toArray(new  ArrayList());	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	133	None
343	[BUG]  [BUGGY]  protected  final  Map  option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  protected  final  Map  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  final  Map  option  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	24	None
344	[BUG]  [BUGGY]  protected  final  Map  Options  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  protected  final  Map  Options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  final  Map  Options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	24	None
363	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt)||  opt.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt)||  opt.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	62	None
364	[BUG]  [BUGGY]  return  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  return  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	return  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	62	None
382	[BUG]  [BUGGY]  Preconditions.checkArgument(!Options.isEmpty()),  opt);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(!Options.isEmpty()),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(!Options.isEmpty()),  opt);	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  ';'  expected	483	None
384	[BUG]  [BUGGY]  Preconditions.checkArgument(!Options.isEmpty(), "opt.length ");  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(!Options.isEmpty(), "opt.length ");  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(!Options.isEmpty(), "opt.length ");	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	483	None
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)||  hashcodeMap.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	add	return  options.containsKey(opt)||  hashcodeMap.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	compilable	  [FE]  AssertionFailedError  testCLI13	34	1
403	[BUG]  [BUGGY]  return  options.containsKey(opt)||  hashcodeMap.containsValue(opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)||  hashcodeMap.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  hashcodeMap.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	compilable	  [FE]  AssertionFailedError  testCLI13	34	1
422	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(!values.isEmpty())    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	272	None
442	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  Lists.newArrayList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  Lists.newArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  Lists.newArrayList();	  	non-compiled	[CE]  illegal  start  of  type	132	None
444	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  toArray(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  toArray(args);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  toArray(args);	  	non-compiled	[CE]  illegal  start  of  type	132	None
464	[BUG]  [BUGGY]  String[]  values  =  opt.trim();  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  opt.trim();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  opt.trim();	      	non-compiled	[CE]  incompatible  types	65	None
481	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  cannot  find  symbol	423	None
482	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	423	None
483	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	423	None
485	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	423	None
503	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  static  final  Map  Option  =  new  HashMap();  [CE]  variable  Option  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  static  final  Map  Option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  static  final  Map  Option  =  new  HashMap();	  	non-compiled	[CE]  variable  Option  is  already  defined  in  class  CommandLine	245	None
504	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  option  =  new  HashMap( " ");  [CE]  no  suitable  constructor  found  for  HashMap(String)  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  option  =  new  HashMap( " ");  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  option  =  new  HashMap( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  HashMap(String)	245	None
505	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Option  =  new  HashMap( " ");  [CE]  variable  Option  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  Map  Option  =  new  HashMap( " ");  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  Map  Option  =  new  HashMap( " ");	  	non-compiled	[CE]  variable  Option  is  already  defined  in  class  CommandLine	245	None
521	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  this.options.keySet());  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  this.options.keySet());  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  this.options.keySet());	  	non-compiled	[CE]  incompatible  types	183	None
523	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  char));  [CE]  '.class'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  char));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  char));	  	non-compiled	[CE]  '.class'  expected	183	None
542	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(args.contains( "-- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(args.contains( "-- "))  {  return  this;  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(args.contains( "-- "))  {  return  this;  }	      if(opt!=    null)    {    if(args.contains(   "-   "))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None
563	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt,  HashcodeMap.class);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt,  HashcodeMap.class);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt,  HashcodeMap.class);	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	144	None
564	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt)?  null  :  args;  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt)?  null  :  args;  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt)?  null  :  args;	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	144	None
581	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap)+  1;  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap)+  1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap)+  1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	64	None
582	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options)+  1;  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options)+  1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options)+  1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	64	None
583	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options)+  1;  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options)+  1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options)+  1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	64	None
584	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class)+  1;  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class)+  1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  HashcodeMap.class)+  1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol	64	None
601	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	83	None
602	[BUG]  [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	83	None
604	[BUG]  [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	83	None
622	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  options);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)	453	None
623	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  HashcodeMap.class);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  cannot  find  symbol	453	None
624	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  HashCodeMap.class);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  HashCodeMap.class);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  HashCodeMap.class);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  cannot  find  symbol	453	None
642	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  {  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains(values))  {  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None
644	[BUG]  [BUGGY]  if(opt.equals(values))  {  if(!args.contains(opt))  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  if(!args.contains(opt))  {  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  if(!args.contains(opt))  {  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None
663	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  hashCodeMap  =  new  HashCodeMap();  [CE]  variable  options  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  Map  hashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  variable  options  is  already  defined  in  class  CommandLine	21	None
684	[BUG]  [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0].;  }  [CE]  <identifier>  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0].;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0].;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    (values    ==    null)?    null    :    values[0];    }    	non-compiled	[CE]  <identifier>  expected	141	None
701	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  [Delete]  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	[Delete]	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
722	[BUG]  [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
723	[BUG]  [BUGGY]  if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
724	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
742	[BUG]  [BUGGY]  opt  =  String.valueOf(opt,  hashcodeMap);  [CE]  no  suitable  method  found  for  valueOf(String,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(opt,  hashcodeMap);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(opt,  hashcodeMap);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(String,Map)	64	None
743	[BUG]  [BUGGY]  opt  =  String.valueOf(options.keyword);  [CE]  cannot  find  symbol  keyword  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(options.keyword);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(options.keyword);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  keyword	64	None
744	[BUG]  [BUGGY]  opt  =  String.valueOf(opt  +  1);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(opt  +  1);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(opt  +  1);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  values	64	None
762	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt);  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt);  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt);	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  ')'  expected	393	None
763	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt),  hashcodeMap);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt),  hashcodeMap);  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt),  hashcodeMap);	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  cannot  find  symbol	393	None
764	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt,  hashcodeMap));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt,  hashcodeMap));  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt,  hashcodeMap));	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  cannot  find  symbol	393	None
782	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashMap(64);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashMap(64);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashMap(64);	      super.hashCodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	54	None
803	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  final  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  final  HashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  static  final  HashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
804	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  Map  hashcodeMap  =  new  HashCodeMap();  [CE]  variable  options  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  Map  hashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  final  Map  hashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  variable  options  is  already  defined  in  class  CommandLine	23	None
805	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  final  HashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  static  final  HashcodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  static  final  HashcodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	23	None
822	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt))  ==  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt))  ==  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt))  ==  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	333	None
823	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	333	None
824	[BUG]  [BUGGY]  if(options.hasKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	333	None
841	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	162	None
842	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	162	None
843	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	162	None
844	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	162	None
845	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasArgs())  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  if(!hasArgs())  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    if(!hasArgs())  {  return  hasOption(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  cannot  find  symbol	162	None
862	[BUG]  [BUGGY]  return(new  HashCodeMap()  ==  null)?  null  :  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashCodeMap()  ==  null)?  null  :  new  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(new  HashCodeMap()  ==  null)?  null  :  new  HashCodeMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
863	[BUG]  [BUGGY]  return  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
864	[BUG]  [BUGGY]  return(new  HashCodeMap()  ==  null)?  new  HashCodeMap()  :  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashCodeMap()  ==  null)?  new  HashCodeMap()  :  new  HashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(new  HashCodeMap()  ==  null)?  new  HashCodeMap()  :  new  HashCodeMap();	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
882	[BUG]  [BUGGY]  if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None
883	[BUG]  [BUGGY]  if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None
884	[BUG]  [BUGGY]  if(opt.equals(values))  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None
901	[BUG]  [BUGGY]  return  options.iterator().next();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.iterator().next();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.iterator().next();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
903	[BUG]  [BUGGY]  return  options.size()  ==  1?  options.getAll()  :  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.size()  ==  1?  options.getAll()  :  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.size()  ==  1?  options.getAll()  :  new  HashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
904	[BUG]  [BUGGY]  return  new  HashMap(options.size());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashMap(options.size());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  new  HashMap(options.size());	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
923	[BUG]  [BUGGY]  public  final  Map  option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  public  final  Map  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  final  Map  option  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	25	None
943	[BUG]  [BUGGY]  super.addAll(args,  new  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  new  ArrayList());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  new  ArrayList());	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
944	[BUG]  [BUGGY]  super.addAll(args,  private);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  private);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  private);	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
964	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.containsKey(opt))  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.containsKey(opt))  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None
982	[BUG]  [BUGGY]  private  static  final  Map();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  static  final  Map();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
983	[BUG]  [BUGGY]  private  final  List();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  final  List();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  List();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
984	[BUG]  [BUGGY]  private  final  ArrayList();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  final  ArrayList();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  ArrayList();	      private    final    Map();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None
1002	[BUG]  [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
1003	[BUG]  [BUGGY]  if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getString()))  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
1004	[BUG]  [BUGGY]  if(opt.equals(options.getName()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getName()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getName()))  {  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	323	None
1024	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  this.names);  [CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  this.names);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(opt)||  options.containsValue(opt,  this.names);	  	non-compiled	[CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	164	None
1025	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  hashcodeMap);  [CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  hashcodeMap);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(opt)||  options.containsValue(opt,  hashcodeMap);	  	non-compiled	[CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	164	None
1042	[BUG]  [BUGGY]  if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  true;  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	184	None
1043	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  return  true;  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt))  {  return  true;  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	184	None
1064	[BUG]  [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashCodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	395	None
1082	[BUG]  [BUGGY]  if(opt.length  ==  0)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.length  ==  0)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.length  ==  0)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None
1083	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None
1084	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.startsWith( "- "))  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.startsWith( "- "))  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None
1104	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(64);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(64);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashCodeMap(64);	      super.hashcodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	55	None
1121	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  Arrays.sort(opt);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  Arrays.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    Arrays.sort(opt);	  	non-compiled	[CE]  cannot  find  symbol  Arrays	281	None
1122	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  Validate.notEmpty(opt);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  Validate.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    Validate.notEmpty(opt);	  	non-compiled	[CE]  cannot  find  symbol  Validate	281	None
1123	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  Validate.isTrue(opt.length()  ==  0);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  Validate.isTrue(opt.length()  ==  0);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    Validate.isTrue(opt.length()  ==  0);	  	non-compiled	[CE]  cannot  find  symbol  Validate	281	None
1124	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt.length  ==  0)  {  if(opt.length  >  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt.length  ==  0)  {  if(opt.length  >  0)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt.length  ==  0)  {  if(opt.length  >  0)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	281	None
1125	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt.length  ==  0)  {  if(opt.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt.length  ==  0)  {  if(opt.length  ==  0)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt.length  ==  0)  {  if(opt.length  ==  0)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	281	None
1141	[BUG]  [BUGGY]  return  hashcodeMap.hashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  hashcodeMap.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  hashcodeMap.hashCodeMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1142	[BUG]  [BUGGY]  return(HashCodeMap  ==  K,  V>)super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(HashCodeMap  ==  K,  V>)super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(HashCodeMap  ==  K,  V>)super.hashcodeMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1143	[BUG]  [BUGGY]  return(HashCodeMap  ==  K,  V>)hashcodeMap.peek();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(HashCodeMap  ==  K,  V>)hashcodeMap.peek();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(HashCodeMap  ==  K,  V>)hashcodeMap.peek();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1144	[BUG]  [BUGGY]  return(HashCodeMap  ==  K,  V>)hashcodeMap.reset();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(HashCodeMap  ==  K,  V>)hashcodeMap.reset();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(HashCodeMap  ==  K,  V>)hashcodeMap.reset();	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1183	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  10;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  10;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  10;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
1184	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values.length,  1;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values.length,  1;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values.length,  1;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
1204	[BUG]  [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1225	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  new  List  args  =  new  ArrayList();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  private  new  List  args  =  new  ArrayList();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    private  new  List  args  =  new  ArrayList();	  	non-compiled	[CE]  illegal  start  of  expression	82	None
1242	[BUG]  [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1243	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1244	[BUG]  [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.get(opt)!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
1262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  : "  +  opt);	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
1263	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  : "  +  opt);	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
1263	[BUG]  [BUGGY]  return  hasOption(String.valueOf(option)+ "  : ");  [CE]  cannot  find  symbol  option  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(option)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(option)+ "  : ");	  return    hasOption(String.valueOf(opt)+   "    :   ");    	non-compiled	[CE]  cannot  find  symbol  option	165	None
1264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  : "  +  this);	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
1265	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  this);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : "  +  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  : "  +  this);	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
1284	[BUG]  [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " "));  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	142	None
1301	[BUG]  [BUGGY]  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	add	return  hasOption(opt);	      	compilable	  [FE]  StackOverflowError  testCLI13	35	1
1302	[BUG]  [BUGGY]  return  hasOption(opt);  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hasOption(opt);	      	compilable	  [FE]  StackOverflowError  testCLI13	35	1
1303	[BUG]  [BUGGY]  return  hasOption(opt,  null);  [CE]  no  suitable  method  found  for  hasOption(String,<null>)  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hasOption(opt,  null);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hasOption(opt,  null);	      	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,<null>)	35	None
1304	[BUG]  [BUGGY]  return  options.containsKey(opt)!=  null;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)!=  null;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)!=  null;	      	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	35	None
1323	[BUG]  [BUGGY]  private  final  HashMap();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]      [BUGGY]  private  final  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  HashMap();	      new    HashMap();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None
1324	[BUG]  [BUGGY]  new  ArrayList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  new  ArrayList();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	new  ArrayList();	      new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	12	None
1342	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	333	None
1343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.containsKey(String.valueOf(opt))  &&  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  options.containsKey(String.valueOf(opt))  &&  hasOption(String.valueOf(opt));	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	compilable	  [FE]  AssertionFailedError  testCLI13	333	1
1344	[BUG]  [BUGGY]  return  options.containsKey(String.valueOf(opt))  &&  hasOption(String.valueOf(opt));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.containsKey(String.valueOf(opt))  &&  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(String.valueOf(opt))  &&  hasOption(String.valueOf(opt));	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	compilable	  [FE]  AssertionFailedError  testCLI13	333	1
1364	[BUG]  [BUGGY]  new  ArrayList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  new  ArrayList();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	new  ArrayList();	      return    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	115	None
1383	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.hashcodeMap.hasOption(opt);  [CE]  cannot  find  symbol  hashcodeMap  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)||  options.hashcodeMap.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  options.hashcodeMap.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  hashcodeMap	33	None
1384	[BUG]  [BUGGY]  return  options.containsKey(opt)||  hashcodeMap.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)||  hashcodeMap.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  hashcodeMap.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None
1403	[BUG]  [BUGGY]  opt  =  hashcodeMap.getOptionValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  hashcodeMap.getOptionValue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  hashcodeMap.getOptionValue(opt);	      opt    =    this.options.getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	284	None
1423	[BUG]  [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getValue()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	324	None
1424	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.hasOption(opt))  {  if(opt.equals(options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	324	None
1442	[BUG]  [BUGGY]  if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.isEmpty())  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	121	None
1443	[BUG]  [BUGGY]  if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.length  ==  0)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	121	None
1462	[BUG]  [BUGGY]  private  static  final  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  static  final  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  static  final  Map.hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	22	None
1463	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  new  HashMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	22	None
1464	[BUG]  [BUGGY]  private  final  Map  hashCodeMap  =  new  HashCodeMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  final  Map  hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map  hashCodeMap  =  new  HashCodeMap();	  private    final    Map    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	22	None
1481	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    private  final  Map.hashCodeMap  =  new  HashCodeMap();	  	non-compiled	[CE]  <identifier>  expected	151	None
1482	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  HashCodeMap.create();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  HashCodeMap.create();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    private  final  Map.hashCodeMap  =  HashCodeMap.create();	  	non-compiled	[CE]  <identifier>  expected	151	None
1483	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.hashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  hashcodeMap.hashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	151	None
1484	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  hashcodeMap.hashCode();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  hashcodeMap.hashCode();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    private  final  Map.hashCodeMap  =  hashcodeMap.hashCode();	  	non-compiled	[CE]  <identifier>  expected	151	None
1485	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  hashcodeMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map.hashCodeMap  =  hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    private  final  Map.hashCodeMap  =  hashcodeMap();	  	non-compiled	[CE]  <identifier>  expected	151	None
1503	[BUG]  [BUGGY]  return  new  TreeList();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  TreeList();  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  TreeList();	      return    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	112	None
1522	[BUG]  [BUGGY]  opt  =  hashcodeMap.getOptionArgs();  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  hashcodeMap.getOptionArgs();  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  hashcodeMap.getOptionArgs();	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
1524	[BUG]  [BUGGY]  opt  =  getOptionArgsMap();  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArgsMap();  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArgsMap();	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
1543	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values.length.equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values  ==  null)?  null  :  values.length.equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values  ==  null)?  null  :  values.length.equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1544	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values.length).equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values  ==  null)?  null  :  values.length).equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values  ==  null)?  null  :  values.length).equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
1563	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [CE]  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.containsKey(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.containsKey(opt))    {    return    false;    }    	non-compiled	[CE]  	104	None
1582	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.containsKey(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.containsKey(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(values))    {    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None
1602	[BUG]  [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1603	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1604	[BUG]  [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1622	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt),  hashcodeMap);  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt),  hashcodeMap);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt),  hashcodeMap);	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  ')'  expected	335	None
1623	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt),  this);  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt),  this);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt),  this);	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  ')'  expected	335	None
1624	[BUG]  [BUGGY]  options.add(new  Option(opt,  String.valueOf(opt)));  [CE]  no  suitable  constructor  found  for  Option(char,String)  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(opt,  String.valueOf(opt)));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(opt,  String.valueOf(opt)));	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  no  suitable  constructor  found  for  Option(char,String)	335	None
1641	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
1642	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
1643	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  return  false;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
1644	[BUG]  [BUGGY]  if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
1661	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  cannot  find  symbol	263	None
1662	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  return  getOptionValue(String.valueOf(opt)+ "  vs ");  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  return  getOptionValue(String.valueOf(opt)+ "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    return  getOptionValue(String.valueOf(opt)+ "  vs ");	  	non-compiled	[CE]  unreachable  statement	263	None
1663	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  cannot  find  symbol	263	None
1664	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	263	None
1665	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	263	None
1683	[BUG]  [BUGGY]  if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " "));  }	      if(opt.equals(options.getOption(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	325	None
1684	[BUG]  [BUGGY]  if(options.getOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getOption(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getOption(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	325	None
1722	[BUG]  [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(args  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1723	[BUG]  [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1724	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1744	[BUG]  [BUGGY]  if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
1763	[BUG]  [BUGGY]  if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
1764	[BUG]  [BUGGY]  if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  Map  >>  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
1782	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  return  false;  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt))  {  return  false;  }	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	185	None
1783	[BUG]  [BUGGY]  if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt.hasOption(options.hasOption(String.valueOf(opt)))  {  return  false;  }	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	185	None
1801	[BUG]  [BUGGY]  return  getOptionValue(opt,  values);  [CE]  no  suitable  method  found  for  getOptionValue(String,String[])  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return  getOptionValue(opt,  values);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return  getOptionValue(opt,  values);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValue(String,String[])	75	None
1802	[BUG]  [BUGGY]  return(String)values.toArray(new  String[values.size()  ]);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(String)values.toArray(new  String[values.size()  ]);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(String)values.toArray(new  String[values.size()  ]);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
1803	[BUG]  [BUGGY]  return(String)values.toArray(new  String[values.length]);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(String)values.toArray(new  String[values.length]);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(String)values.toArray(new  String[values.length]);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
1804	[BUG]  [BUGGY]  return  options.getOptionValue(opt,  values);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return  options.getOptionValue(opt,  values);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return  options.getOptionValue(opt,  values);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
1821	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  [Delete]  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	[Delete]	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt)+   ":   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None
1844	[BUG]  [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	391	None
1864	[BUG]  [BUGGY]  if(options.containsKey(key))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
1881	[BUG]  [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	184	None
1882	[BUG]  [BUGGY]  if(options.hasArg())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasArg())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasArg())  {  return  getOptionValue(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	184	None
1884	[BUG]  [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.getKey()));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.getKey()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  getOptionValue(String.valueOf(options.getKey()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	184	None
1901	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  true);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  true);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  true);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	451	None
1903	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  true);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  true);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  true);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	451	None
1904	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  hashcodeMap);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  true,  hashcodeMap);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  true,  hashcodeMap);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean,Map)	451	None
1923	[BUG]  [BUGGY]  checkArgument(!Options.isEmpty()),  opt);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  checkArgument(!Options.isEmpty()),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	checkArgument(!Options.isEmpty()),  opt);	      checkArgument(!Options.isEmpty());    	non-compiled	[CE]  ';'  expected	484	None
1924	[BUG]  [BUGGY]  checkArgument(!Options.isEmpty(), "Options  are  empty ");  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  checkArgument(!Options.isEmpty(), "Options  are  empty ");  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	checkArgument(!Options.isEmpty(), "Options  are  empty ");	      checkArgument(!Options.isEmpty());    	non-compiled	[CE]  cannot  find  symbol	484	None
1942	[BUG]  [BUGGY]  return  hasOption(String.valueOf(option)+ "  vs ");  [CE]  cannot  find  symbol  option  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(option)+ "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(option)+ "  vs ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  cannot  find  symbol  option	424	None
1943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is  not  supported ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  is  not  supported ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
1944	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is  not  supported ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is  not  supported ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  is  not  supported ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
1944	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  || "  vs ");  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  || "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  || "  vs ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  	424	None
1962	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  this.options);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  this.options);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  this.options);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	285	None
1963	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  hashcodeMap);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  hashcodeMap);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  hashcodeMap);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	285	None
1964	[BUG]  [BUGGY]  opt  =  options.get(opt);  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  options.get(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  options.get(opt);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  incompatible  types	285	None
1982	[BUG]  [BUGGY]  private  static  final  Map  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  static  final  Map  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  static  final  Map  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1984	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  final  Map  options  =  new  HashMap();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  final  Map  options  =  new  HashMap();	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
2004	[BUG]  [BUGGY]  OptionNames.sort(opt);  [CE]  cannot  find  symbol  OptionNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionNames	482	None
2022	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(options));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(options));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(options));	  return    hasOption(String.valueOf(options));    	non-compiled	[CE]  ')'  expected	425	None
2023	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  0)&&  hasOption(String.valueOf(options));  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  0)&&  hasOption(String.valueOf(options));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options)||  opt  ==  0)&&  hasOption(String.valueOf(options));	  return    hasOption(String.valueOf(options));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	425	None
2024	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options)||  opt  ==  null  &&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(options));    	non-compiled	[CE]  ')'  expected	425	None
2041	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt!=  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt!=  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt!=  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
2042	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt!=  null)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt!=  null)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt!=  null)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
2044	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.hasKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.hasKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.hasKey(String.valueOf(opt)))  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
2045	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  ==  null)  {  if(options.containsKey(String.class))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
2063	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
2121	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(options));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(options));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(options));  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  incomparable  types:  char  and  <null>	424	None
2122	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(options));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(options));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(options));  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  incomparable  types:  char  and  <null>	424	None
2141	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  cannot  find  symbol	84	None
2142	[BUG]  [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  incomparable  types:  char  and  <null>	84	None
2143	[BUG]  [BUGGY]  for(String  option  :  getOptions())  {  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  for(String  option  :  getOptions())  {  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	for(String  option  :  getOptions())  {  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None
2162	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
2163	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  defaultArgs);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  defaultArgs);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  defaultArgs);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
2164	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  names);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  names);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  names);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
2183	[BUG]  [BUGGY]  private  final  List.Entry  <  K,  V>  options  =  new  HashMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  final  List.Entry  <  K,  V>  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  List.Entry  <  K,  V>  options  =  new  HashMap();	      private    final    Map.Entry    <    K,    V>    options    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	243	None
2202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  7);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  7);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
2203	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  7);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  7);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  7);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  testCLI13	163	1
2204	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)/  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  1);	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	163	None
2223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	private  static  final  List  args  =  new  LinkedList();	  private    final    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	133	1
2224	[BUG]  [BUGGY]  private  static  final  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  final  List  args  =  new  LinkedList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  static  final  List  args  =  new  LinkedList();	  private    final    List    args    =    new    LinkedList();    	compilable	  [FE]  AssertionFailedError  testCLI13	133	1
2242	[BUG]  [BUGGY]  if(opt.equals( "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    this.options.get(opt);    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  unclosed  string  literal	103	None
2244	[BUG]  [BUGGY]  if(opt.equals( " "))  {  opt  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( " "))  {  opt  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( " "))  {  opt  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    this.options.get(opt);    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
2263	[BUG]  [BUGGY]  Validate.isTrue(opt);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Validate.isTrue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Validate.isTrue(opt);	      Validate.notNull(opt);    	non-compiled	[CE]  cannot  find  symbol  Validate	481	None
2281	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return(HashCodeMap  ==  K,  V>)super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return(HashCodeMap  ==  K,  V>)super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return(HashCodeMap  ==  K,  V>)super.hashcodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
2282	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    super.hashcodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
2283	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return(HashCodeMap  ==?>)super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return(HashCodeMap  ==?>)super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return(HashCodeMap  ==?>)super.hashcodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
2284	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  HashCodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  HashCodeMap.create();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  HashCodeMap.create();	  	non-compiled	[CE]  illegal  start  of  type	153	None
2285	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.hashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  hashcodeMap.hashCodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  hashcodeMap.hashCodeMap();	  	non-compiled	[CE]  illegal  start  of  type	153	None
2302	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  hasOption(String.valueOf(opt));  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt))  {  hasOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	184	None
2303	[BUG]  [BUGGY]  if(opt  ==  null)  {  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  hasOption(String.valueOf(opt));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	184	None
2323	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashMap(64);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashMap(64);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashMap(64);	      super.hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	52	None
2341	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  options  =  new  HashMap();  [CE]  variable  options  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  Map  options  =  new  HashMap();	  	non-compiled	[CE]  variable  options  is  already  defined  in  class  CommandLine	21	None
2342	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  option  =  new  HashMap();  [CE]  variable  options  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  Map  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  Map  option  =  new  HashMap();	  	non-compiled	[CE]  variable  options  is  already  defined  in  class  CommandLine	21	None
2343	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.iterator().next();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  options.iterator().next();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  options.iterator().next();	  	non-compiled	[CE]  illegal  start  of  type	21	None
2344	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(options.size());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(options.size());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  new  HashMap(options.size());	  	non-compiled	[CE]  illegal  start  of  type	21	None
2363	[BUG]  [BUGGY]  public  HashcodeMap  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  public  HashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  HashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	155	None
2364	[BUG]  [BUGGY]  public  final  HashcodeMap  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  public  final  HashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  final  HashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	155	None
2384	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options.getAlternatives()));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options.getAlternatives()));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  getOptionValue(String.valueOf(options.getAlternatives()));	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	185	None
2403	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.containsKey(opt))  {  if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
2404	[BUG]  [BUGGY]  if(opt!=  null)  {  string[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt!=  null)  {  string[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt!=  null)  {  string[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
2422	[BUG]  [BUGGY]  return  new  HashCodeMap( "HashCode "  +  getClass());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "HashCode "  +  getClass());  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "HashCode "  +  getClass());	      return    new    HashCodeMap(   "HashCode   ");    	non-compiled	[CE]  illegal  start  of  type	305	None
2423	[BUG]  [BUGGY]  return  new  HashCodeMap( "HashCode "  +  getClass().getName());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "HashCode "  +  getClass().getName());  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "HashCode "  +  getClass().getName());	      return    new    HashCodeMap(   "HashCode   ");    	non-compiled	[CE]  illegal  start  of  type	305	None
2443	[BUG]  [BUGGY]  OptionNames.put(option.getKey(),  opt);  [CE]  cannot  find  symbol  option  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(option.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(option.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol  option	283	None
2444	[BUG]  [BUGGY]  OptionNames.put(option,  opt.getKey(),  opt);  [CE]  cannot  find  symbol  option  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(option,  opt.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(option,  opt.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol  option	283	None
2461	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  cannot  find  symbol	82	None
2462	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  cannot  find  symbol	82	None
2463	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None
2464	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt));  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    return  getOptionValue(String.valueOf(opt));	  	non-compiled	[CE]  unreachable  statement	82	None
2465	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(opt!=  null)  {  return  getOptionValue(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None
2482	[BUG]  [BUGGY]  return  HashcodeMap.newHashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashcodeMap.newHashMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashcodeMap.newHashMap();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
2484	[BUG]  [BUGGY]  return  HashCodeMap.newHashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCodeMap.newHashMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCodeMap.newHashMap();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
2502	[BUG]  [BUGGY]  if(opt!=  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt!=  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt!=  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None
2503	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  [Delete]  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	[Delete]	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None
2504	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.containsKey(opt))  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.containsKey(opt))  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }	      if(values    ==    null)    {    if(opt.equals(values.length))    {    return    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None
2521	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+ "  : ");  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	164	None
2522	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(options.hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }	  	non-compiled	[CE]  cannot  find  symbol	164	None
2523	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	164	None
2524	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  hasOption(String.valueOf(opt)+ "  : ");  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  hasOption(String.valueOf(opt)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    hasOption(String.valueOf(opt)+ "  : ");	  	non-compiled	[CE]  unreachable  statement	164	None
2525	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	164	None
2544	[BUG]  [BUGGY]  if(options  ==  null  ||  opt.length()  ==  0)  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||  opt.length()  ==  0)  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||  opt.length()  ==  0)  {  if(!hasOption(opt))  {  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None
2563	[BUG]  [BUGGY]  return  this.options.containsKey(opt)||  this.options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt)||  this.options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.containsKey(opt)||  this.options.hasOption(opt);	  return    this.options.containsKey(opt);    	non-compiled	[CE]  cannot  find  symbol	515	None
2583	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.hasOption(opt))  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
2584	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.containsKey(opt))  {  if(opt  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
2604	[BUG]  [BUGGY]  private  final  Map  Option  =  new  HashMap(32);  [CE]  cannot  find  symbol  options  [CONTEXT]      [BUGGY]  private  final  Map  Option  =  new  HashMap(32);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map  Option  =  new  HashMap(32);	      private    final    Map    Option    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol  options	246	None
2623	[BUG]  [BUGGY]  if(options.containsKey(key))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
2624	[BUG]  [BUGGY]  if(options.hasOption(String))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
2643	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  ||  opt  ==  String.valueOf(args));  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt),  ||  opt  ==  String.valueOf(args));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  ||  opt  ==  String.valueOf(args));	  return    hasOption(String.valueOf(opt)||    opt    ==    String.valueOf(args));    	non-compiled	[CE]  illegal  start  of  expression	44	None
2662	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ") ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ ") ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2663	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ") ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ") ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ") ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2663	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ",  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ ",  vs ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2664	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ",  vs ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ",  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ",  vs ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2664	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  vs "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2665	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs "  +  opt);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs "  +  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  vs "  +  opt);	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
2682	[BUG]  [BUGGY]  args  =  getOptionArgs(opt,  hashcodeMap);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  args  =  getOptionArgs(opt,  hashcodeMap);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	args  =  getOptionArgs(opt,  hashcodeMap);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	143	None
2683	[BUG]  [BUGGY]  args  =  getOptionArgs(opt)?  null  :  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  args  =  getOptionArgs(opt)?  null  :  getOptionArgs(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	args  =  getOptionArgs(opt)?  null  :  getOptionArgs(opt);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol	143	None
2684	[BUG]  [BUGGY]  args  =  getOptionArgs(opt,  HashcodeMap.create());  [CE]  cannot  find  symbol  HashcodeMap  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  args  =  getOptionArgs(opt,  HashcodeMap.create());  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	args  =  getOptionArgs(opt,  HashcodeMap.create());	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol  HashcodeMap	143	None
2721	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt))  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  	95	None
2723	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
2724	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
2743	[BUG]  [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( " "))  {  args  =  new  HashCodeMap  >>  String,String>();  if(args.contains(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    false;    }    	non-compiled	[CE]  	105	None
2744	[BUG]  [BUGGY]  if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    false;    }    	non-compiled	[CE]  unclosed  string  literal	105	None
2764	[BUG]  [BUGGY]  private  final  List  option  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  private  final  List  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  List  option  =  new  HashMap();	  private    final    Map    option    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	202	None
2782	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return(String)this.options.get(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return(String)this.options.get(opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
2783	[BUG]  [BUGGY]  return(String)this.options.get(opt);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return(String)this.options.get(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return(String)this.options.get(opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
2783	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt),  this);  [CE]  no  suitable  method  found  for  getOptionValue(String,CommandLine)  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt),  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt),  this);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValue(String,CommandLine)	85	None
2784	[BUG]  [BUGGY]  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return(String)getOptionValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return(String)getOptionValue(opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  StackOverflowError  testCLI13	85	1
2785	[BUG]  [BUGGY]  return(String)getOptionValue(opt);  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return(String)getOptionValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return(String)getOptionValue(opt);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  StackOverflowError  testCLI13	85	1
2802	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	181	None
2803	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt))  throw  new  IllegalArgumentException( " ");  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt))  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt))  throw  new  IllegalArgumentException( " ");	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	181	None
2842	[BUG]  [BUGGY]  if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
2843	[BUG]  [BUGGY]  if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(option);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(option);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(option);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
2844	[BUG]  [BUGGY]  if(option.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(option.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(option.equals(opt))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
2864	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.hasOption(opt))  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.containsKey(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	172	None
2883	[BUG]  [BUGGY]  if(opt.equals(values))  {  Map  }  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  not  a  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt.equals(values))  {  Map  }  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt.equals(values))  {  Map  }  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  not  a  statement	222	None
2901	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(opt.equals(this.options.getKey()))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	514	None
2902	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	514	None
2903	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getOptions()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getOptions()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(opt.equals(this.options.getOptions()))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	514	None
2904	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(this.options.containsKey(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(this.options.containsKey(opt))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	514	None
2905	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getKey()))  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(opt.equals(this.options.getKey()))  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(opt.equals(this.options.getKey()))  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
2923	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  1];  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  1];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  1];	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  ';'  expected	75	None
2924	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  1);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  1);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  ';'  expected	75	None
2942	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(char));  [CE]  '.class'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(char));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(char));	  return    hasOption(String.valueOf(opt)||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  '.class'  expected	42	None
2944	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(string));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(string));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(string));	  return    hasOption(String.valueOf(opt)||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	42	None
2984	[BUG]  [BUGGY]  super.setOptions(FALSE);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(FALSE);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(FALSE);	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
3002	[BUG]  [BUGGY]  return(new  HashMap()  ==  null)?  null  :  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashMap()  ==  null)?  null  :  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return(new  HashMap()  ==  null)?  null  :  new  HashMap();	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
3003	[BUG]  [BUGGY]  return(new  HashMap()  ==  null)?  new  HashMap()  :  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(new  HashMap()  ==  null)?  new  HashMap()  :  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return(new  HashMap()  ==  null)?  new  HashMap()  :  new  HashMap();	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
3024	[BUG]  [BUGGY]  return  new  HashcodeMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashcodeMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashcodeMap(0,  0);	      return    new    HashcodeMap();    	non-compiled	[CE]  illegal  start  of  type	304	None
3044	[BUG]  [BUGGY]  return  new  TreeList(args.size());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  TreeList(args.size());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  TreeList(args.size());	      return    new    ArrayList(args.size());    	non-compiled	[CE]  illegal  start  of  type	111	None
3063	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  false);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  false);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	454	None
3064	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  false);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap,  false);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,boolean)	454	None
3102	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  this.options.toLowerCase();  [CE]  <identifier>  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  this.options.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  this.options.toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  <identifier>  expected	62	None
3103	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  hashcodeMap.toLowerCase();  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  hashcodeMap.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  hashcodeMap.toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  ';'  expected	62	None
3124	[BUG]  [BUGGY]  [Delete]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  [Delete]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	[Delete]  if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
3143	[BUG]  [BUGGY]  super.setOptions(options,  null);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  null);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  null);	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
3144	[BUG]  [BUGGY]  super.setSelectedOptions(options);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setSelectedOptions(options);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setSelectedOptions(options);	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
3183	[BUG]  [BUGGY]  return  HashCode.newHashCode();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCode.newHashCode();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCode.newHashCode();	      return    HashCode.create();    	non-compiled	[CE]  illegal  start  of  type	303	None
3203	[BUG]  [BUGGY]  Validate.isTrue(values);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Validate.isTrue(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Validate.isTrue(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Validate	224	None
3204	[BUG]  [BUGGY]  Options.notNull(values);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Options.notNull(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Options.notNull(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol	224	None
3224	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap().iterator().next();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap().iterator().next();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  final  Map  hashcodeMap  =  new  HashMap().iterator().next();	  private    final    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	152	None
3243	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)/  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)/  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)/  1);	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	83	None
3263	[BUG]  [BUGGY]  private  LinkedList  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  LinkedList  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  LinkedList  args  =  new  ArrayList();	  private    List    args    =    new    ArrayList();    	non-compiled	[CE]  cannot  find  symbol	131	None
3303	[BUG]  [BUGGY]  if(opt!=  null)  {  return  haveOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  haveOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  haveOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	182	None
3304	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(option));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(option));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(option));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	182	None
3322	[BUG]  [BUGGY]  }  [CE]  class,  interface,  or  enum  expected  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	}	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None
3323	[BUG]  [BUGGY]  <<  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  <<  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	<<	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	61	None
3324	[BUG]  [BUGGY]  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  {  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	{	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	61	None
3342	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(64);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(64);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashCodeMap(64);	      super.hashCodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	53	None
3343	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(32);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(32);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashCodeMap(32);	      super.hashCodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	53	None
3364	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  new  String[0];  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  new  String[0];  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt)?  opt  :  new  String[0];	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
3403	[BUG]  [BUGGY]  opt  =  Arrays.asList(opt);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  Arrays.asList(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  Arrays.asList(opt);	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  Arrays	282	None
3424	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt;  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  - "  +  opt;	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  	85	None
3441	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.iterator().next();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.iterator().next();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  options.iterator().next();	  	non-compiled	[CE]  illegal  start  of  type	23	None
3443	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  HashMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  HashMap.create();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  HashMap.create();	  	non-compiled	[CE]  illegal  start  of  type	23	None
3444	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.size()  ==  1?  options.get(0):  null;  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.size()  ==  1?  options.get(0):  null;  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  options.size()  ==  1?  options.get(0):  null;	  	non-compiled	[CE]  illegal  start  of  type	23	None
3445	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.size()  ==  1?  options.getAll()  :  null;  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.size()  ==  1?  options.getAll()  :  null;  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  options.size()  ==  1?  options.getAll()  :  null;	  	non-compiled	[CE]  illegal  start  of  type	23	None
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  HashMap  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	public  HashMap  options  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
4	[BUG]  [BUGGY]  public  HashMap  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  public  HashMap  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  HashMap  options  =  new  HashMap();	  public    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	25	1
32	[BUG]  [BUGGY]  if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
34	[BUG]  [BUGGY]  if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args    ==    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	225	None
63	[BUG]  [BUGGY]  args  =  getOptionArgs(opt,  HashcodeMap.UTF8);  [CE]  cannot  find  symbol  HashcodeMap  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  args  =  getOptionArgs(opt,  HashcodeMap.UTF8);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	args  =  getOptionArgs(opt,  HashcodeMap.UTF8);	      args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol  HashcodeMap	143	None
93	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashMap(32);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashMap(32);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashMap(32);	      super.hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	52	None
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	private  static  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
125	[BUG]  [BUGGY]  private  static  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  static  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  static  Map  hashcodeMap  =  new  HashMap();	  private    final    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	152	1
151	[BUG]  [BUGGY]  opt  =  getOptionValue(string);  [CE]  cannot  find  symbol  string  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionValue(string);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionValue(string);	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  string	282	None
153	[BUG]  [BUGGY]  opt  =  getOptionValue(String.valueOf(opt));  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionValue(String.valueOf(opt));  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionValue(String.valueOf(opt));	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  values	282	None
154	[BUG]  [BUGGY]  opt  =  getOptionValue(StringUtils.stripLeadingHyphens(opt));  [CE]  cannot  find  symbol  StringUtils  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionValue(StringUtils.stripLeadingHyphens(opt));  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionValue(StringUtils.stripLeadingHyphens(opt));	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	282	None
182	[BUG]  [BUGGY]  if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.contains(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
183	[BUG]  [BUGGY]  if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.equals(opt))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
184	[BUG]  [BUGGY]  if(options.contains(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.contains(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.contains(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }	      if(opt.equals(values))    {    Map    <    String>    options    =    getOptionArgs();    if(args!=    null)    {    values    =    new    String[args.length];    }    	non-compiled	[CE]  illegal  start  of  expression	222	None
211	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  return  hasOption(StringUtil.stripLeadingHyphens(opt));  [CE]  cannot  find  symbol  StringUtil  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  return  hasOption(StringUtil.stripLeadingHyphens(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    return  hasOption(StringUtil.stripLeadingHyphens(opt));	  	non-compiled	[CE]  cannot  find  symbol  StringUtil	514	None
212	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  return  hasOption(String.valueOf(opt));  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  return  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    return  hasOption(String.valueOf(opt));	  	non-compiled	[CE]  unreachable  statement	514	None
213	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(options.containsKey(opt))  {  return  this.options.containsValue(opt);  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(options.containsKey(opt))  {  return  this.options.containsValue(opt);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(options.containsKey(opt))  {  return  this.options.containsValue(opt);  }	  	non-compiled	[CE]  unreachable  statement	514	None
214	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  hasOption(String.valueOf(opt));  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    hasOption(String.valueOf(opt));	  	non-compiled	[CE]  unreachable  statement	514	None
215	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  if(options.containsKey(opt))  {  String  opt  =  this.options.get(opt);  if(opt  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt);  if(options.containsKey(opt))  {  String  opt  =  this.options.get(opt);  if(opt  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return    this.options.containsKey(opt);    if(options.containsKey(opt))  {  String  opt  =  this.options.get(opt);  if(opt  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	514	None
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(options)+ "  : ");	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
273	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options)+ "  : ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options)+ "  : ");	  return    hasOption(String.valueOf(opt)+   "    :   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	165	1
303	[BUG]  [BUGGY]  public  HashcodeMap  hashcodeMap  =  new  HashMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  public  HashcodeMap  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  HashcodeMap  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	155	None
304	[BUG]  [BUGGY]  public  final  HashcodeMap  hashcodeMap  =  new  HashMap();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  public  final  HashcodeMap  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  final  HashcodeMap  hashcodeMap  =  new  HashMap();	  public    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  cannot  find  symbol	155	None
332	[BUG]  [BUGGY]  new  HashMap(false);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  new  HashMap(false);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	new  HashMap(false);	      new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	12	None
333	[BUG]  [BUGGY]  new  HashMap( "Illegal  start  of  type ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  new  HashMap( "Illegal  start  of  type ");  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	new  HashMap( "Illegal  start  of  type ");	      new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	12	None
334	[BUG]  [BUGGY]  new  HashMap(null);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  new  HashMap(null);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	new  HashMap(null);	      new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	12	None
362	[BUG]  [BUGGY]  opt  =  String.valueOf(options.keySet());  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(options.keySet());  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(options.keySet());	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  values	64	None
363	[BUG]  [BUGGY]  opt  =  String.valueOf(getOptionValue(opt));  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(getOptionValue(opt));  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(getOptionValue(opt));	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  values	64	None
364	[BUG]  [BUGGY]  opt  =  String.valueOf(options.size());  [CE]  cannot  find  symbol  values  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  String.valueOf(options.size());  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  String.valueOf(options.size());	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  cannot  find  symbol  values	64	None
422	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(key)||  options.containsValue(value);  [CE]  cannot  find  symbol  key  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(key)||  options.containsValue(value);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(key)||  options.containsValue(value);	  	non-compiled	[CE]  cannot  find  symbol  key	164	None
423	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(key)||  options.containsValue(string);  [CE]  cannot  find  symbol  key  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(key)||  options.containsValue(string);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(key)||  options.containsValue(string);	  	non-compiled	[CE]  cannot  find  symbol  key	164	None
424	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  this);  [CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  options.containsKey(opt)||  options.containsValue(opt,  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  options.containsKey(opt)||  options.containsValue(opt,  this);	  	non-compiled	[CE]  method  containsValue  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	164	None
452	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  hasOption(String.valueOf(opt)+ "  : ");  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  return  hasOption(String.valueOf(opt)+ "  : ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    return  hasOption(String.valueOf(opt)+ "  : ");	  	non-compiled	[CE]  unreachable  statement	164	None
453	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }	  	non-compiled	[CE]  unreachable  statement	164	None
454	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt)+ "  : ");  }	  	non-compiled	[CE]  unreachable  statement	164	None
455	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  :   ");  if(!hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    :   ");    if(!hasOption(String.valueOf(opt)))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	164	None
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt),  String.valueOf(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	85	1
513	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(opt));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt),  String.valueOf(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	85	1
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(options.keySet()));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt),  String.valueOf(options.keySet()));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	85	1
514	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(options.keySet()));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt),  String.valueOf(options.keySet()));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt),  String.valueOf(options.keySet()));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	85	1
514	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)).charAt(0);  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)).charAt(0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)).charAt(0);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	non-compiled	[CE]  incompatible  types	85	None
571	[BUG]  [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
574	[BUG]  [BUGGY]  if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None
602	[BUG]  [BUGGY]  OptionNames.put(opt,  getOptionNames(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(opt,  getOptionNames(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(opt,  getOptionNames(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  cannot  find  symbol	283	None
604	[BUG]  [BUGGY]  OptionNames.put(opt,  optionNames.get(opt.getKey(),  opt);  [CE]  ')'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionNames.put(opt,  optionNames.get(opt.getKey(),  opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionNames.put(opt,  optionNames.get(opt.getKey(),  opt);	      OptionNames.put(opt.getKey(),    opt);    	non-compiled	[CE]  ')'  expected	283	None
632	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  Arrays.asList(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  Arrays.asList(args);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  Arrays.asList(args);	  	non-compiled	[CE]  illegal  start  of  type	132	None
633	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args  ==  null?  new  ArrayList()  :  Arrays.asList(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args  ==  null?  new  ArrayList()  :  Arrays.asList(args);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  args  ==  null?  new  ArrayList()  :  Arrays.asList(args);	  	non-compiled	[CE]  illegal  start  of  type	132	None
635	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args  ==  null?  null  :  args.toArray(new  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  List  args  =  new  LinkedList();  return  args  ==  null?  null  :  args.toArray(new  ArrayList());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private    final    List    args    =    new    LinkedList();    return  args  ==  null?  null  :  args.toArray(new  ArrayList());	  	non-compiled	[CE]  illegal  start  of  type	132	None
661	[BUG]  [BUGGY]  if(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getOption(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	325	None
663	[BUG]  [BUGGY]  if(options.equals(opt.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.equals(opt.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.equals(opt.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getOption(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	325	None
693	[BUG]  [BUGGY]  super.setOptions(false,  false);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(false,  false);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(false,  false);	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
694	[BUG]  [BUGGY]  super.setOptions(false, "Unknown  type ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(false, "Unknown  type ");  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(false, "Unknown  type ");	      super.setOptions(true);    	non-compiled	[CE]  illegal  start  of  type	14	None
724	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap(32);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  HashCodeMap  =  new  HashCodeMap(32);	  	non-compiled	[CE]  <identifier>  expected	21	None
725	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap(64);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  private  final  HashCodeMap  =  new  HashCodeMap(64);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    private  final  HashCodeMap  =  new  HashCodeMap(64);	  	non-compiled	[CE]  <identifier>  expected	21	None
753	[BUG]  [BUGGY]  if(options  ==  null  ||  opt.equals( "- "))  {  return  false;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||  opt.equals( "- "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||  opt.equals( "- "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	394	None
754	[BUG]  [BUGGY]  if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "+ "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "+ "))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "+ "))  {  return  false;  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	394	None
813	[BUG]  [BUGGY]  private  final  LinkedList  option  =  new  HashMap();  [CE]  incompatible  types  [CONTEXT]      [BUGGY]  private  final  LinkedList  option  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  LinkedList  option  =  new  HashMap();	  private    final    Map    option    =    new    HashMap();    	non-compiled	[CE]  incompatible  types	202	None
841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        hasOption(String.valueOf(opt));    hasOption(String.valueOf(opt));	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
842	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  hasOption(String.valueOf(opt));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    hasOption(String.valueOf(opt));	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
843	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
844	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  return  false;  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
844	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt.getKey(),  opt);  }  [CE]  char  cannot  be  dereferenced  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt.getKey(),  opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  else  {  options.put(opt.getKey(),  opt);  }	  	non-compiled	[CE]  char  cannot  be  dereferenced	183	None
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
846	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    if(opt  ==  0)  {  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	183	1
872	[BUG]  [BUGGY]  Validate.notNull(values,  opt);  [CE]  cannot  find  symbol  Validate  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Validate.notNull(values,  opt);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Validate.notNull(values,  opt);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Validate	224	None
873	[BUG]  [BUGGY]  Values.notNull(values);  [CE]  cannot  find  symbol  Values  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Values.notNull(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Values.notNull(values);	      Validate.notNull(values);    	non-compiled	[CE]  cannot  find  symbol  Values	224	None
901	[BUG]  [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  	92	None
903	[BUG]  [BUGGY]  if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(char  opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  	92	None
904	[BUG]  [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  	92	None
934	[BUG]  [BUGGY]  if(options  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options  ==  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	65	None
991	[BUG]  [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!hasOption(char))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  	95	None
1023	[BUG]  [BUGGY]  return!options.containsKey(opt)||  args.containsValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return!options.containsKey(opt)||  args.containsValue(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return!options.containsKey(opt)||  args.containsValue(opt);	  return    options.containsKey(opt)||    args.containsValue(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None
1054	[BUG]  [BUGGY]  private  final  Map  =  new  HashMap(64);  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  private  final  Map  =  new  HashMap(64);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	private  final  Map  =  new  HashMap(64);	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None
1084	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt)))  }  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt)))  }  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt)))  }  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	333	None
1142	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(new  HashMap());  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(new  HashMap());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(new  HashMap());	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
1143	[BUG]  [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(32);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap(32);	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
1174	[BUG]  [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  false;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
1202	[BUG]  [BUGGY]  return  new  HashCodeMap( "HashCode ",  HashCode.class);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "HashCode ",  HashCode.class);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "HashCode ",  HashCode.class);	      return    new    HashCodeMap(   "HashCode   ");    	non-compiled	[CE]  illegal  start  of  type	305	None
1232	[BUG]  [BUGGY]  if(options  ==  null  ||!hasOption(opt))  {  return  false;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||!hasOption(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||!hasOption(opt))  {  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	392	None
1234	[BUG]  [BUGGY]  if(options  ==  null)  {  if(!hasOption(opt))  }  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null)  {  if(!hasOption(opt))  }  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null)  {  if(!hasOption(opt))  }  return  false;  }	      if(options    ==    null)    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None
1263	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  missing  return  statement	84	None
1264	[BUG]  [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ "  - ");  }	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  missing  return  statement	84	None
1291	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(hashcodeMap);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(hashcodeMap);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  System.identityHashCode(hashcodeMap);	  	non-compiled	[CE]  illegal  start  of  type	151	None
1292	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map  hashcodeMap  =  new  HashMap();  [CE]  variable  hashcodeMap  is  already  defined  in  class  CommandLine  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  private  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    private  final  Map  hashcodeMap  =  new  HashMap();	  	non-compiled	[CE]  variable  hashcodeMap  is  already  defined  in  class  CommandLine	151	None
1293	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  HashcodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  HashcodeMap.create();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  HashcodeMap.create();	  	non-compiled	[CE]  illegal  start  of  type	151	None
1294	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  HashCodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  HashCodeMap.create();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  HashCodeMap.create();	  	non-compiled	[CE]  illegal  start  of  type	151	None
1295	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode( "hashcode ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode( "hashcode ");  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private    final    Map    hashcodeMap    =    new    HashMap();    return  System.identityHashCode( "hashcode ");	  	non-compiled	[CE]  illegal  start  of  type	151	None
1322	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  unreachable  statement	263	None
1325	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+   "  vs   ");  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+   "    vs   ");    if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  cannot  find  symbol	263	None
1352	[BUG]  [BUGGY]  return  Arrays.asList(args);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  Arrays.asList(args);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  Arrays.asList(args);	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	133	None
1353	[BUG]  [BUGGY]  return  Arrays.asList(new  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  Arrays.asList(new  ArrayList());  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  Arrays.asList(new  ArrayList());	  private    final    List    args    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	133	None
1414	[BUG]  [BUGGY]  if(opt.equals( "  || "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "  || "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "  || "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }	      if(opt.equals(   "   "))    {    args    =    new    HashCodeMap    <    String,String>();    if(args.contains(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None
1442	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  return  true;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  return  true;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  return  true;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	163	None
1443	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  hashcodeMap.get(opt);  if(opt!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  String  opt  =  hashcodeMap.get(opt);  if(opt!=  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  String  opt  =  hashcodeMap.get(opt);  if(opt!=  null)  {  return  false;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  illegal  start  of  expression	163	None
1444	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  return  false;  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  return  false;  }	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	163	None
1474	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt),))  {  return  false;  }	      if(options.hasOption(String.valueOf(opt)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	185	None
1504	[BUG]  [BUGGY]  super.hashcodeMap  =(Hashed)super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =(Hashed)super.hashcodeMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.hashcodeMap  =(Hashed)super.hashcodeMap();	  public    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	25	None
1533	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains(values))  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None
1594	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.keySet();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  options.keySet();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  options.keySet();	  	non-compiled	[CE]  illegal  start  of  type	23	None
1595	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashMap(options);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  return  new  HashMap(options);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    return  new  HashMap(options);	  	non-compiled	[CE]  illegal  start  of  type	23	None
1622	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  || "  vs ");  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  || "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  || "  vs ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  	264	None
1623	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  is ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  is ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
1624	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  is ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  is ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  is ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
1624	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  has  conflicting  arguments. ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  has  conflicting  arguments. ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
1625	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  has  conflicting  arguments. ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  has  conflicting  arguments. ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  has  conflicting  arguments. ");	  return    getOptionValue(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	264	1
1654	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt),))  {  return  true;  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	184	None
1683	[BUG]  [BUGGY]  private  final  Map.Entry  }  K,  V>  options  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  private  final  Map.Entry  }  K,  V>  options  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map.Entry  }  K,  V>  options  =  new  HashMap();	      private    final    Map.Entry    <    K,    V>    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	243	None
1714	[BUG]  [BUGGY]  super.addAll(args,  private  List());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.addAll(args,  private  List());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	super.addAll(args,  private  List());	      super.addAll(args);    	non-compiled	[CE]  illegal  start  of  type	113	None
1773	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  Integer.toHexString(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  - "  +  Integer.toHexString(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
1774	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  Integer.toHexString(opt));  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  Integer.toHexString(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  - "  +  Integer.toHexString(opt));	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
1774	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  - "  +  this);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
1775	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  this);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - "  +  this);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  - "  +  this);	  return    getOptionValue(String.valueOf(opt)+   "    -   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	85	1
1802	[BUG]  [BUGGY]  if(options.hasOption(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	62	None
1803	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  >>  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  >>  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  >>	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	62	None
1804	[BUG]  [BUGGY]  if(options.hasOption(opt))  }  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  }  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(options.hasOption(opt))  }  return  getOptionValue(String.valueOf(opt));  }	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	62	None
1832	[BUG]  [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	324	None
1862	[BUG]  [BUGGY]  OptionalUtilities.notNull(opt);  [CE]  cannot  find  symbol  OptionalUtilities  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionalUtilities.notNull(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionalUtilities.notNull(opt);	      Validate.notNull(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionalUtilities	481	None
1863	[BUG]  [BUGGY]  OptionalNames.notNull(opt);  [CE]  cannot  find  symbol  OptionalNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionalNames.notNull(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionalNames.notNull(opt);	      Validate.notNull(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionalNames	481	None
1894	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ".: ");  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt)+   ":   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None
1921	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode( "hashcode ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode( "hashcode ");  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  System.identityHashCode( "hashcode ");	  	non-compiled	[CE]  illegal  start  of  type	153	None
1924	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(this);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  return  System.identityHashCode(this);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected    Map    hashcodeMap    =    new    HashMap();    return  System.identityHashCode(this);	  	non-compiled	[CE]  illegal  start  of  type	153	None
1953	[BUG]  [BUGGY]  Lists.sort(opt);  [CE]  cannot  find  symbol  Lists  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Lists.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Lists.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  cannot  find  symbol  Lists	482	None
1954	[BUG]  [BUGGY]  List  options.sort(opt);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  List  options.sort(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	List  options.sort(opt);	      Arrays.sort(opt);    	non-compiled	[CE]  ';'  expected	482	None
1984	[BUG]  [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  args  =  options.get(opt);  if(args.contains( ".- "))  {  return  true;  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
2012	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  this.options+1;  [CE]  <identifier>  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  this.options+1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  this.options+1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None
2013	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  options.size()  +  1;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  options.size()  +  1;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  options.size()  +  1;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  ';'  expected	64	None
2014	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  false;  [CE]  <identifier>  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  false;  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  false;	  String[]    values    =    getOptionValues(opt)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None
2043	[BUG]  [BUGGY]  return  options.contains(resolveOption(opt));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.contains(resolveOption(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.contains(resolveOption(opt));	      	non-compiled	[CE]  cannot  find  symbol	35	None
2044	[BUG]  [BUGGY]  return  hasOption(opt,  true);  [CE]  no  suitable  method  found  for  hasOption(String,boolean)  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  hasOption(opt,  true);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  hasOption(opt,  true);	      	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,boolean)	35	None
2074	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt),  which.toLowerCase();  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt),  which.toLowerCase();  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt),  which.toLowerCase();	  String[]    values    =    getOptionValues(opt).toLowerCase();    	non-compiled	[CE]  ';'  expected	62	None
2102	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  unreachable  statement	82	None
2103	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt)+  1);  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    return  getOptionValue(String.valueOf(opt)+  1);	  	non-compiled	[CE]  unreachable  statement	82	None
2105	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt)+  3);  [CE]  unreachable  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  return  getOptionValue(String.valueOf(opt)+  3);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return    getOptionValue(String.valueOf(opt)+    1);    return  getOptionValue(String.valueOf(opt)+  3);	  	non-compiled	[CE]  unreachable  statement	82	None
2132	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  baseUri);  [CE]  cannot  find  symbol  baseUri  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  baseUri);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  baseUri);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  cannot  find  symbol  baseUri	285	None
2133	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  defaultOptions);  [CE]  cannot  find  symbol  defaultOptions  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  defaultOptions);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  defaultOptions);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  cannot  find  symbol  defaultOptions	285	None
2134	[BUG]  [BUGGY]  opt  =  this.options.get(opt,  null);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  this.options.get(opt,  null);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  this.options.get(opt,  null);	      opt    =    this.options.get(opt);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	285	None
2163	[BUG]  [BUGGY]  if(values  ==  null  ||!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!args.isEmpty())  {  throw  new  CommandLineException( " ");  }	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	124	None
2193	[BUG]  [BUGGY]  Preconditions.checkArgument(opt,  options.length()  ==  0);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(opt,  options.length()  ==  0);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(opt,  options.length()  ==  0);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  cannot  find  symbol	63	None
2221	[BUG]  [BUGGY]  return  getOptionValue(values,  opt);  [CE]  no  suitable  method  found  for  getOptionValue(String[],String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return  getOptionValue(values,  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return  getOptionValue(values,  opt);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValue(String[],String)	75	None
2222	[BUG]  [BUGGY]  return  getOptionValue(values);  [CE]  no  suitable  method  found  for  getOptionValue(String[])  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return  getOptionValue(values);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return  getOptionValue(values);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValue(String[])	75	None
2223	[BUG]  [BUGGY]  return  getValue(values,  opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return  getValue(values,  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return  getValue(values,  opt);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
2224	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values.toArray(new  String[0]);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values.toArray(new  String[0]);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values.toArray(new  String[0]);	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  cannot  find  symbol	75	None
2253	[BUG]  [BUGGY]  if(option.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  options.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(option.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  options.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(option.equals(values))  {  for(Map.Entry  <  String,  V>  opt  :  options.getOptions())  {  values[0]  =  getOptionValue(opt);  }	      if(opt.equals(values))    {    for(Map.Entry    <    String,    V>    option    :    opt.getOptions())    {    values[0]    =    getOptionValue(opt);    }    	non-compiled	[CE]  illegal  start  of  expression	223	None
2284	[BUG]  [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  missing  return  statement	182	None
2313	[BUG]  [BUGGY]  opt  =  getOptionArguments();  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArguments();  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArguments();	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol	282	None
2314	[BUG]  [BUGGY]  opt  =  getOptionArgs(),  opt;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  getOptionArgs(),  opt;  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  getOptionArgs(),  opt;	      opt    =    getOptionValue(opt);    	non-compiled	[CE]  ';'  expected	282	None
2342	[BUG]  [BUGGY]  return  new  HashCodeMap(0,  0);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap(0,  0);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap(0,  0);	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
2343	[BUG]  [BUGGY]  return  new  HashCodeMap(0,  hashcodeMap);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap(0,  hashcodeMap);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap(0,  hashcodeMap);	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
2344	[BUG]  [BUGGY]  return  new  HashCodeMap( "n ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashCodeMap( "n ");  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashCodeMap( "n ");	      return    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	51	None
2401	[BUG]  [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
2403	[BUG]  [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(1);  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None
2433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.containsKey(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  options.containsKey(String.valueOf(opt));	  return    hasOption(String.valueOf(options));    	compilable	  [FE]  AssertionFailedError  testCLI13	425	1
2434	[BUG]  [BUGGY]  return  options.containsKey(String.valueOf(opt));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.containsKey(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(String.valueOf(opt));	  return    hasOption(String.valueOf(options));    	compilable	  [FE]  AssertionFailedError  testCLI13	425	1
2434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)+  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(options)+  opt);	  return    hasOption(String.valueOf(options));    	compilable	  [FE]  AssertionFailedError  testCLI13	425	1
2435	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options)+  opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(options)+  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options)+  opt);	  return    hasOption(String.valueOf(options));    	compilable	  [FE]  AssertionFailedError  testCLI13	425	1
2461	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt  ==  null)  {  if(values  ==  null)  {  return  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt  ==  null)  {  if(values  ==  null)  {  return  values[0];  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt  ==  null)  {  if(values  ==  null)  {  return  values[0];  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
2462	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  return  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  return  values[0];  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt!=  null)  {  if(values  ==  null)  {  return  values[0];  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
2463	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt  ==  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt  ==  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt  ==  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
2464	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  if(opt!=  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    if(opt!=  null)  {  if(values  ==  null)  {  return  getOptionValue(opt);  }	  	non-compiled	[CE]  illegal  start  of  expression	74	None
2465	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  Arrays.sort(values);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[1];  Arrays.sort(values);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values    ==    null)?    null    :    values[1];    Arrays.sort(values);	  	non-compiled	[CE]  cannot  find  symbol  Arrays	74	None
2492	[BUG]  [BUGGY]  return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(opt));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(args.valueOf(opt)||  opt  ==  String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    String.valueOf(args));    	non-compiled	[CE]  cannot  find  symbol	44	None
2523	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt),))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt),))  {  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	181	None
2524	[BUG]  [BUGGY]  if(options.hasOption(String.valueOf(opt)))!=  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(String.valueOf(opt)))!=  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(String.valueOf(opt)))!=  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(String.valueOf(opt)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	181	None
2554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  HashMap  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	        private    final    Map    Option    =    new    HashMap();    private  final  HashMap  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
2555	[BUG]  [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  HashMap  option  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]      private  final  Map  Option  =  new  HashMap();  private  final  HashMap  option  =  new  HashMap();  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	        private    final    Map    Option    =    new    HashMap();    private  final  HashMap  option  =  new  HashMap();	  	compilable	  [FE]  AssertionFailedError  testCLI13	245	1
2582	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt),  hashcodeMap));  [CE]  no  suitable  constructor  found  for  Option(String,Map)  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt),  hashcodeMap));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt),  hashcodeMap));	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  no  suitable  constructor  found  for  Option(String,Map)	335	None
2584	[BUG]  [BUGGY]  options.add(new  Option(String.valueOf(opt),  Option.None.class));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  options.add(new  Option(String.valueOf(opt),  Option.None.class));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	options.add(new  Option(String.valueOf(opt),  Option.None.class));	      options.add(new    Option(String.valueOf(opt)));    	non-compiled	[CE]  cannot  find  symbol	335	None
2642	[BUG]  [BUGGY]  hasOption(String.valueOf(options));  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  hasOption(String.valueOf(options));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(options));	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  missing  return  statement	184	None
2643	[BUG]  [BUGGY]  hasOption(String.valueOf(eopt));  [CE]  cannot  find  symbol  eopt  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  hasOption(String.valueOf(eopt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(eopt));	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  eopt	184	None
2644	[BUG]  [BUGGY]  hasOption(String.valueOf(ch));  [CE]  cannot  find  symbol  ch  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  hasOption(String.valueOf(ch));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(ch));	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  ch	184	None
2672	[BUG]  [BUGGY]  Lists.sort(values);  [CE]  cannot  find  symbol  Lists  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  Lists.sort(values);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	Lists.sort(values);	      Arrays.sort(values);    	non-compiled	[CE]  cannot  find  symbol  Lists	274	None
2703	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  options.getOptionValue(opt):  null;  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt)?  options.getOptionValue(opt):  null;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt)?  options.getOptionValue(opt):  null;	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
2704	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  values  :  null;  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt)?  values  :  null;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt)?  values  :  null;	      if(values    ==    null)    {    if(!args.isEmpty())    {    throw    new    CommandLineException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	124	None
2732	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  0;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  0;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  0;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
2733	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  -1;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  -1;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  -1;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
2734	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  true;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  true;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  true;	  return(values    ==    null)?    null    :    values[0],    1;    	non-compiled	[CE]  ';'  expected	3	None
2763	[BUG]  [BUGGY]  if(options.containsKey(key))  {  if(!hasOption(key))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  if(!hasOption(key))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  if(!hasOption(key))  {  return  false;  }	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
2764	[BUG]  [BUGGY]  if(!options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(!options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(!options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }	      if(options.containsKey(opt))    {    if(!hasOption(opt))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None
2794	[BUG]  [BUGGY]  if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(value))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None
2824	[BUG]  [BUGGY]  private  final  ArrayList  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]      [BUGGY]  private  final  ArrayList  args  =  new  ArrayList();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  final  ArrayList  args  =  new  ArrayList();	  protected    List    args    =    new    LinkedList();    	non-compiled	[CE]  cannot  find  symbol	134	None
2853	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  static  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	static  final  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
2854	[BUG]  [BUGGY]  static  final  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  static  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	static  final  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	24	1
2854	[BUG]  [BUGGY]  safe  final  Map  options  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  safe  final  Map  options  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	safe  final  Map  options  =  new  HashMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  <identifier>  expected	24	None
2883	[BUG]  [BUGGY]  return  isOption(String,  hashcodeMap.valueOf(opt));  [CE]  cannot  find  symbol  String  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String,  hashcodeMap.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String,  hashcodeMap.valueOf(opt));	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  String	163	None
2884	[BUG]  [BUGGY]  return  isOption(String.valueOf(options.keySet()));  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  isOption(String.valueOf(options.keySet()));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String.valueOf(options.keySet()));	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	163	None
2944	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet(),  options.values()));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet(),  options.values()));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet(),  options.values()));	  	non-compiled	[CE]  illegal  start  of  type	21	None
2945	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet()));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap();  return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet()));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private    final    Map    options    =    new    HashMap();    return  new  HashMap(Options.class,  Maps.  <  K,  V>(options.keySet()));	  	non-compiled	[CE]  illegal  start  of  type	21	None
2973	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashMap(32);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashMap(32);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashMap(32);	      super.hashCodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	54	None
2974	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashMap(16);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashMap(16);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashMap(16);	      super.hashCodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	54	None
3004	[BUG]  [BUGGY]  return  options.toMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  options.toMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  options.toMap();	  protected    Map    options    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	24	None
3033	[BUG]  [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(32);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashcodeMap  =  new  HashCodeMap(32);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashcodeMap  =  new  HashCodeMap(32);	      super.hashcodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	55	None
3063	[BUG]  [BUGGY]  if(options.hasOption(opt))  }  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.hasOption(opt))  }  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.hasOption(opt))  }  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	321	None
3064	[BUG]  [BUGGY]  if(options.hasOption(opt))!=  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.hasOption(opt))!=  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.hasOption(opt))!=  throw  new  IllegalArgumentException( " ");  }	      if(options.hasOption(opt))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	321	None
3094	[BUG]  [BUGGY]  if(options  ==  null  ||  opt.equals( "args "))  {  return  options.get(opt);  }  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options  ==  null  ||  opt.equals( "args "))  {  return  options.get(opt);  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options  ==  null  ||  opt.equals( "args "))  {  return  options.get(opt);  }	      if(options    ==    null)    {    String    opt    =    new    HashcodeMap();    if(opt.equals(   "args   "))    {    return    options.get(opt);    }    	non-compiled	[CE]  incompatible  types	391	None
3124	[BUG]  [BUGGY]  if(options.containsKey(String.valueOf(opt))  return  hasOption(String.valueOf(opt));  }  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(String.valueOf(opt))  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(String.valueOf(opt))  return  hasOption(String.valueOf(opt));  }	      if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	333	None
3152	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  Names.US_ASCII);  [CE]  cannot  find  symbol  Names  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  Names.US_ASCII);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  Names.US_ASCII);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  cannot  find  symbol  Names	453	None
3154	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  HashcodeMap.class);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  HashcodeMap.class);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  HashcodeMap.class);	  String[]    values    =    getOptionValues(opt,    options);    	non-compiled	[CE]  cannot  find  symbol	453	None
3183	[BUG]  [BUGGY]  if(opt.equals( "   "))  {  args  =  this.options.get(opt);  if(args.contains(args))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals( "   "))  {  args  =  this.options.get(opt);  if(args.contains(args))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals( "   "))  {  args  =  this.options.get(opt);  if(args.contains(args))  {  return  true;  }	      if(opt.equals(   "   "))    {    args    =    this.options.get(opt);    if(args.contains(opt))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None
3242	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  ==  0)  {  if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
3243	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  cannot  find  symbol	332	None
3244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  ==  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	332	1
3245	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  ==  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  testCLI13	332	1
3245	[BUG]  [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  if(opt  ==  0)  {  if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(options.containsKey(String.valueOf(opt)))    {    return    hasOption(String.valueOf(opt));    }    if(opt  ==  0)  {  if(options.containsKey(String.keyOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  illegal  start  of  expression	332	None
3272	[BUG]  [BUGGY]  if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	323	None
3273	[BUG]  [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	323	None
3274	[BUG]  [BUGGY]  if(opt.equals(options.getKey()))  return  true;  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getKey()))  return  true;  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getKey()))  return  true;  if(opt.equals(options.getValue()))  {  return  true;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	323	None
3301	[BUG]  [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  incompatible  types  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  0)  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  incompatible  types	184	None
3302	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	184	None
3304	[BUG]  [BUGGY]  if(options.hasArg())  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.hasArg())  {  return  getOptionValue(String.valueOf(options.keySet()));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasArg())  {  return  getOptionValue(String.valueOf(options.keySet()));  }	      hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	184	None
3332	[BUG]  [BUGGY]  String[]  values  =  options.getOptionValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  options.getOptionValue(opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  options.getOptionValue(opt);	      	non-compiled	[CE]  cannot  find  symbol	65	None
3333	[BUG]  [BUGGY]  String[]  values  =  getOptionValue(opt);  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValue(opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValue(opt);	      	non-compiled	[CE]  incompatible  types	65	None
3334	[BUG]  [BUGGY]  String[]  values  =  options.get(opt);  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  options.get(opt);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  options.get(opt);	      	non-compiled	[CE]  incompatible  types	65	None
3364	[BUG]  [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  }  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  }  return  null;  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	if(opt  ==  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  }  return  null;  }	      if(opt!=    null)    {    String[]    values    =    getOptionValues(opt);    if(values    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None
3394	[BUG]  [BUGGY]  super.setOptions(True);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(True);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(True);	      super.setOptions(false);    	non-compiled	[CE]  illegal  start  of  type	15	None
3422	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(opt))  {  return  hasOption(String.valueOf(opt));  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  missing  return  statement	424	None
3423	[BUG]  [BUGGY]  for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  options.entrySet())  {  if(!hasOption(opt))  {  return  false;  }  [CE]  >  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  options.entrySet())  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  options.entrySet())  {  if(!hasOption(opt))  {  return  false;  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  >  expected	424	None
3424	[BUG]  [BUGGY]  for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  hashcodeMap.entrySet())  {  if(!hasOption(opt))  {  return  false;  }  [CE]  >  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  hashcodeMap.entrySet())  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	for(Map.Entry  <  String,  HashcodeMap.Entry  <  K,  V>  option  :  hashcodeMap.entrySet())  {  if(!hasOption(opt))  {  return  false;  }	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	non-compiled	[CE]  >  expected	424	None
3454	[BUG]  [BUGGY]  Preconditions.checkArgument(!Options.isEmpty()),  args);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  Preconditions.checkArgument(!Options.isEmpty()),  args);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	Preconditions.checkArgument(!Options.isEmpty()),  args);	      Preconditions.checkArgument(!Options.isEmpty());    	non-compiled	[CE]  ';'  expected	483	None
3512	[BUG]  [BUGGY]  return  HashCode.construct( "hashcode ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCode.construct( "hashcode ");  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCode.construct( "hashcode ");	      return    HashCode.create();    	non-compiled	[CE]  illegal  start  of  type	303	None
3514	[BUG]  [BUGGY]  return  HashCode.construct( "HashCode ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashCode.construct( "HashCode ");  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashCode.construct( "HashCode ");	      return    HashCode.create();    	non-compiled	[CE]  illegal  start  of  type	303	None
3571	[BUG]  [BUGGY]  return  new  ArrayList(args,  private  ArrayList);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  private  ArrayList);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  private  ArrayList);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
3572	[BUG]  [BUGGY]  return  new  ArrayList(args,  private  ArrayList());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  private  ArrayList());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  private  ArrayList());	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
3573	[BUG]  [BUGGY]  return  new  ArrayList(args,  private  List);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  ArrayList(args,  private  List);  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  ArrayList(args,  private  List);	      return    new    ArrayList(args);    	non-compiled	[CE]  illegal  start  of  type	114	None
3602	[BUG]  [BUGGY]  checkArgument(!options.hasOption(opt),  false);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  checkArgument(!options.hasOption(opt),  false);  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	checkArgument(!options.hasOption(opt),  false);	      checkArgument(!options.hasOption(opt));    	non-compiled	[CE]  cannot  find  symbol	393	None
3633	[BUG]  [BUGGY]  if(options  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   ");    }    	non-compiled	[CE]  unclosed  string  literal	93	None
3662	[BUG]  [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()  ==  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
3663	[BUG]  [BUGGY]  if(options.getKey()!=  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(options.getKey()!=  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(options.getKey()!=  null  ||  opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
3664	[BUG]  [BUGGY]  if(opt.equals(options.getKey()))  }  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  if(opt.equals(options.getKey()))  }  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]    return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	if(opt.equals(options.getKey()))  }  if(opt.equals(options.getValue()))  {  return  false;  }	      if(opt.equals(options.getKey()))    {    if(opt.equals(options.getValue()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	322	None
3692	[BUG]  [BUGGY]  super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  );  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  );  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  );	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
3694	[BUG]  [BUGGY]  super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  ));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  ));  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	super.setOptions(options,  new  HashMap  <  Map.Entry  <  K,  V  >>  ));	      super.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	13	None
3724	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(!args.contains(opt))  [Delete]  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    if(!args.contains(opt))    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	171	None
3752	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  0);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  unreachable  statement	162	None
3753	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  unreachable  statement	162	None
3754	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  1);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    return  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  unreachable  statement	162	None
3755	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  0);  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    return  hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  unreachable  statement	162	None
3783	[BUG]  [BUGGY]  OptionalNames.notEmpty(opt);  [CE]  cannot  find  symbol  OptionalNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionalNames.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionalNames.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionalNames	485	None
3784	[BUG]  [BUGGY]  OptionalUtilities.notEmpty(opt);  [CE]  cannot  find  symbol  OptionalUtilities  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  OptionalUtilities.notEmpty(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	OptionalUtilities.notEmpty(opt);	      Validate.notEmpty(opt);    	non-compiled	[CE]  cannot  find  symbol  OptionalUtilities	485	None
3842	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt  +  1;  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt  +  1;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  opt  +  1;	  return(values    ==    null)?    null    :    values[0],    opt;    	non-compiled	[CE]  ';'  expected	4	None
3844	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt  + "] ";  [CE]  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt  + "] ";  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  opt  + "] ";	  return(values    ==    null)?    null    :    values[0],    opt;    	non-compiled	[CE]  	4	None
3872	[BUG]  [BUGGY]  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(options.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	83	None
3874	[BUG]  [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  0)  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }	  return    getOptionValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	83	None
3903	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	static  final  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
3904	[BUG]  [BUGGY]  static  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  static  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	static  final  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
3904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  static  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	final  static  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
3905	[BUG]  [BUGGY]  final  static  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  final  static  Map  hashcodeMap  =  new  HashMap();  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	final  static  Map  hashcodeMap  =  new  HashMap();	  protected    Map    hashcodeMap    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	154	1
3932	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  is ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
3933	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  is ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  is ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
3934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  may  have  side  effects  and  can't  be  removed ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  may  have  side  effects  and  can't  be  removed ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
3935	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  may  have  side  effects  and  can't  be  removed ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+ "  may  have  side  effects  and  can't  be  removed ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  may  have  side  effects  and  can't  be  removed ");	  return    hasOption(String.valueOf(opt)+   "    vs   ");    	compilable	  [FE]  AssertionFailedError  testCLI13	424	1
3963	[BUG]  [BUGGY]  return  new  LinkedList(Arrays.asList(args));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  LinkedList(Arrays.asList(args));  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  LinkedList(Arrays.asList(args));	      return    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	115	None
3964	[BUG]  [BUGGY]  return  new  LinkedList(new  CommandLine());  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  LinkedList(new  CommandLine());  [BUGGY]    private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	return  new  LinkedList(new  CommandLine());	      return    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	115	None
3994	[BUG]  [BUGGY]  checkArgument(!Options.isEmpty()),  false);  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  checkArgument(!Options.isEmpty()),  false);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	checkArgument(!Options.isEmpty()),  false);	      checkArgument(!Options.isEmpty());    	non-compiled	[CE]  ';'  expected	484	None
4053	[BUG]  [BUGGY]  return  HashcodeMap.newHashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashcodeMap.newHashCodeMap();  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashcodeMap.newHashCodeMap();	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
4054	[BUG]  [BUGGY]  return  HashcodeMap.construct( "hashcodeMap ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  HashcodeMap.construct( "hashcodeMap ");  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  HashcodeMap.construct( "hashcodeMap ");	      return    HashcodeMap.create();    	non-compiled	[CE]  illegal  start  of  type	302	None
4113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  values[0]  :  values[1];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	add	return(values  ==  null)?  values[0]  :  values[1];	  return(values    ==    null)?    null    :    values[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  testCLI13	75	1
4114	[BUG]  [BUGGY]  return(values  ==  null)?  values[0]  :  values[1];  [FE]  ArrayIndexOutOfBoundsException  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  values[0]  :  values[1];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  values[0]  :  values[1];	  return(values    ==    null)?    null    :    values[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  testCLI13	75	1
4114	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  values[1];  [CE]  ';'  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  return(values  ==  null)?  null  :  values[0],  values[1];  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  values[1];	  return(values    ==    null)?    null    :    values[1];    	non-compiled	[CE]  ';'  expected	75	None
4143	[BUG]  [BUGGY]  if(values  ==  null  ||!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(values  ==  null  ||!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(values  ==  null  ||!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(values    ==    null)    {    if(!values.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	273	None
4174	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(options));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(options));  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(options));  }	      if(opt!=    null)    {    if(opt.length()    ==    0)    {    return    getOptionValue(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	61	None
4204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	private  final  Map  options  =  new  HashMap(32);	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
4205	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap(32);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]      [BUGGY]  private  final  Map  options  =  new  HashMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map  options  =  new  HashMap(32);	  private    final    Map    options    =    new    HashMap();    	compilable	  [FE]  AssertionFailedError  testCLI13	22	1
4232	[BUG]  [BUGGY]  return  hasOption(String.valueOf(char)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [CE]  '.class'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(char)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(char)||  opt  ==  null  &&  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    opt    ==    null    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  '.class'  expected	43	None
4233	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(char));  [CE]  '.class'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(char));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(char));	  return    hasOption(String.valueOf(opt)||    opt    ==    null    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  '.class'  expected	43	None
4264	[BUG]  [BUGGY]  if(options.containsKey(key))  [Delete]  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  [Delete]  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  [Delete]  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }	      if(opt!=    null)    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None
4321	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  hasOption(String.valueOf(opt)+ "  vs ");  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  hasOption(String.valueOf(opt)+ "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    hasOption(String.valueOf(opt)+ "  vs ");	  	non-compiled	[CE]  unreachable  statement	423	None
4322	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  return  hasOption(String.valueOf(opt)+ "  vs ");  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  return  hasOption(String.valueOf(opt)+ "  vs ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    return  hasOption(String.valueOf(opt)+ "  vs ");	  	non-compiled	[CE]  unreachable  statement	423	None
4323	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [CE]  unreachable  statement  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+   "  vs   ");  if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+   "    vs   ");    if(!hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt)+ "  vs ");  }	  	non-compiled	[CE]  unreachable  statement	423	None
4354	[BUG]  [BUGGY]  opt  =  optionList.getOptionValue(opt);  [CE]  cannot  find  symbol  optionList  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  opt  =  optionList.getOptionValue(opt);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	opt  =  optionList.getOptionValue(opt);	      opt    =    this.options.getOptionValue(opt);    	non-compiled	[CE]  cannot  find  symbol  optionList	284	None
4383	[BUG]  [BUGGY]  return  this.options.containsKey(opt)||  this.options.containsArg( "- ");  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  this.options.containsKey(opt)||  this.options.containsArg( "- ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.containsKey(opt)||  this.options.containsArg( "- ");	  return    this.options.containsKey(opt);    	non-compiled	[CE]  cannot  find  symbol	515	None
4412	[BUG]  [BUGGY]  if(options.contains(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(options.contains(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(options.contains(opt))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(opt.equals(values))    {    if(values    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None
4442	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.class);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  HashcodeMap.class);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
4443	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  options,  hashcodeMap);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
4444	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.UTF8);  [CE]  variable  values  is  already  defined  in  method  getOptionValue(String)  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  String[]  values  =  getOptionValues(opt,  HashcodeMap.UTF8);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	String[]  values  =  getOptionValues(opt,  HashcodeMap.UTF8);	      if(values    ==    null)    {    if(!args.contains(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getOptionValue(String)	123	None
4473	[BUG]  [BUGGY]  return  options.hasOption(opt,  hashcodeMap);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.hasOption(opt,  hashcodeMap);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.hasOption(opt,  hashcodeMap);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	32	None
4474	[BUG]  [BUGGY]  return  options.hashcodeMap.hasOption(opt);  [CE]  cannot  find  symbol  hashcodeMap  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.hashcodeMap.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.hashcodeMap.hasOption(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  hashcodeMap	32	None
4502	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  false,  options);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  false,  options);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  false,  options);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean,Map)	454	None
4503	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  false,  options.length);  [CE]  cannot  find  symbol  length  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  false,  options.length);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  false,  options.length);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  cannot  find  symbol  length	454	None
4504	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  binaryNames,  false);  [CE]  cannot  find  symbol  binaryNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  binaryNames,  false);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  binaryNames,  false);	  String[]    values    =    getOptionValues(opt,    false);    	non-compiled	[CE]  cannot  find  symbol  binaryNames	454	None
4562	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.hashCodeMap.hasOption(opt);  [CE]  cannot  find  symbol  hashCodeMap  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.containsKey(opt)||  options.hashCodeMap.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  options.hashCodeMap.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  hashCodeMap	33	None
4564	[BUG]  [BUGGY]  return  options.hasKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]    public  boolean  hasOption(String  opt)  {    [BUGGY]  return  options.hasKey(opt)||  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.hasKey(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None
4625	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashcodeMap  =  new  HashCodeMap(32);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  protected  Map  options  =  new  HashMap();  private  final  HashcodeMap  =  new  HashCodeMap(32);  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected    Map    options    =    new    HashMap();    private  final  HashcodeMap  =  new  HashCodeMap(32);	  	non-compiled	[CE]  <identifier>  expected	23	None
4653	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.charAt(opt));  [CE]  ')'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.charAt(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  hasOption(String.charAt(opt));	  return    hasOption(String.valueOf(opt)||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  ')'  expected	42	None
4654	[BUG]  [BUGGY]  return  hasOption(String.valueOf(char)||  hasOption(String.valueOf(opt));  [CE]  '.class'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(char)||  hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(char)||  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt)||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  '.class'  expected	42	None
4681	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.names);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options,  this.names);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options,  this.names);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)	63	None
4684	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  this.options);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  options,  this.options);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options,  this.options);	  String[]    values    =    getOptionValues(opt,    this.options);    	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map,Map)	63	None
4712	[BUG]  [BUGGY]  return  new  HashMap(false);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashMap(false);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  new  HashMap(false);	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
4713	[BUG]  [BUGGY]  return  new  HashMap(this);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashMap(this);  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  new  HashMap(this);	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
4714	[BUG]  [BUGGY]  return  new  HashMap( "Have  to  start  with: ");  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashMap( "Have  to  start  with: ");  [BUGGY]    private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	return  new  HashMap( "Have  to  start  with: ");	      return    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	11	None
4744	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  binaryNames,  true);  [CE]  cannot  find  symbol  binaryNames  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  values  =  getOptionValues(opt,  binaryNames,  true);  [BUGGY]      return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  binaryNames,  true);	  String[]    values    =    getOptionValues(opt,    true);    	non-compiled	[CE]  cannot  find  symbol  binaryNames	451	None
4774	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(args.contains( ".- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  if(args.contains( ".- "))  {  return  this;  }  [BUGGY]    return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	if(opt  ==  null)  {  if(args.contains( ".- "))  {  return  this;  }	      if(opt!=    null)    {    if(args.contains(   "-   "))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None
4801	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }	  	non-compiled	[CE]  incompatible  types	281	None
4802	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }  [CE]  incompatible  types  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  else  {  return  options.get(opt);  }	  	non-compiled	[CE]  incompatible  types	281	None
4803	[BUG]  [BUGGY]  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	add	        opt    =    getOptionValue(opt);    if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }	  	compilable	  [FE]  StackOverflowError  testCLI13	281	1
4804	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt  ==  null)  {  String[]  options  =  getOptionValues(opt);  }	  	compilable	  [FE]  StackOverflowError  testCLI13	281	1
4804	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  new  HashcodeMap();  }  [CE]  cannot  find  symbol  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt  ==  null)  {  String[]  options  =  new  HashcodeMap();  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt  ==  null)  {  String[]  options  =  new  HashcodeMap();  }	  	non-compiled	[CE]  cannot  find  symbol	281	None
4805	[BUG]  [BUGGY]  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	add	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }	  	compilable	  [FE]  StackOverflowError  testCLI13	281	1
4806	[BUG]  [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  [FE]  StackOverflowError  testCLI13  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]      opt  =  getOptionValue(opt);  if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	        opt    =    getOptionValue(opt);    if(opt!=  null)  {  String[]  options  =  getOptionValues(opt);  }	  	compilable	  [FE]  StackOverflowError  testCLI13	281	1
4832	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ",  char  opt);  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ",  char  opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ": ",  char  opt);	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  	84	None
4833	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ",  char);  [CE]  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ",  char);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ": ",  char);	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	non-compiled	[CE]  	84	None
4834	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options)+ ": ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(options)+ ": ");	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	84	1
4835	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options)+ ": ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]    public  String  getOptionValue(char  opt)  {    [BUGGY]  return  getOptionValue(String.valueOf(options)+ ": ");  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(options)+ ": ");	  return    getOptionValue(String.valueOf(opt)+   ":   ");    	compilable	  [FE]  ComparisonFailure  testCLI13	84	1
4862	[BUG]  [BUGGY]  if(!args.contains(opt))  return  null;  }  [CE]  class,  interface,  or  enum  expected  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!args.contains(opt))  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!args.contains(opt))  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None
4863	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  return  null;  }  [CE]  missing  return  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(opt  ==  null)  {  if(!args.contains(values))  return  null;  }  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(opt  ==  null)  {  if(!args.contains(values))  return  null;  }	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  missing  return  statement	125	None
4864	[BUG]  [BUGGY]  if(!args.contains(opt))  return  null;  Afterward  [CE]  not  a  statement  [CONTEXT]    public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);    [BUGGY]  if(!args.contains(opt))  return  null;  Afterward  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	if(!args.contains(opt))  return  null;  Afterward	      if(values    ==    null)    {    if(!args.contains(opt))    {    return    null;    }    	non-compiled	[CE]  not  a  statement	125	None
4894	[BUG]  [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(16);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  super.hashCodeMap  =  new  HashCodeMap(16);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	super.hashCodeMap  =  new  HashCodeMap(16);	      super.hashCodeMap    =    new    HashCodeMap();    	non-compiled	[CE]  illegal  start  of  type	53	None
4922	[BUG]  [BUGGY]  return(opt  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(opt  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(opt  ==  null)?  null  :  values[0].equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
4924	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values.length().equals(getOptionValue(opt));  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return(values  ==  null)?  null  :  values.length().equals(getOptionValue(opt));  [BUGGY]      [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return(values  ==  null)?  null  :  values.length().equals(getOptionValue(opt));	  protected    Map    hashcodeMap    =    new    HashMap();    	non-compiled	[CE]  illegal  start  of  type	154	None
4984	[BUG]  [BUGGY]  String[]  args  =  getOptionArgs(opt,  HashcodeMap.UTF8);  [CE]  cannot  find  symbol  HashcodeMap  [CONTEXT]    public  String  getOptionValue(String  opt)  {    [BUGGY]  String[]  args  =  getOptionArgs(opt,  HashcodeMap.UTF8);  [BUGGY]    String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  args  =  getOptionArgs(opt,  HashcodeMap.UTF8);	      String[]    args    =    getOptionArgs(opt);    	non-compiled	[CE]  cannot  find  symbol  HashcodeMap	144	None
5042	[BUG]  [BUGGY]  if(options.containsKey(key))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options.containsKey(key))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.containsKey(key))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }	      if(!hasOption(opt))    {    args    =    options.get(opt);    if(args.contains(   "-   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None
5074	[BUG]  [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  symbol));  [CE]  ';'  expected  [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      hasOption(String.valueOf(opt));  return  getOptionValue(String.valueOf(opt)+  symbol));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        hasOption(String.valueOf(opt));    return  getOptionValue(String.valueOf(opt)+  symbol));	  	non-compiled	[CE]  ';'  expected	183	None
5164	[BUG]  [BUGGY]  return  new  HashcodeMap(this);  [CE]  illegal  start  of  type  [CONTEXT]      [BUGGY]  return  new  HashcodeMap(this);  [BUGGY]    private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	return  new  HashcodeMap(this);	      return    new    HashcodeMap();    	non-compiled	[CE]  illegal  start  of  type	304	None
