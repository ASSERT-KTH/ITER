projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newLinkedHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newHashMap(System.err);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options==null){options.putAll(Arrays.asList(options));}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options!=null){options.putAll(Arrays.asList(options));}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options==null){options=newHashMap();}else{options.putAll(Arrays.asList(options));}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options==null){options.putAll(Arrays.asList(options));}else{options.putAll(options);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options!=null){options.putAll(Arrays.asList(options));}else{options.putAll(options);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options==null){options.putAll(Arrays.asList(options));}else{options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Arrays.sort(this.options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Arrays.sort(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Sets.newHashSet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error",newIllegalArgumentException());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error",newIllegalArgumentException(""));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();this.options.put("AssertionFailedError",newAssertionFailedError());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();if(options==null){options.put("[AssertionFailedError]",newAssertionFailedError());}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();if(options==null){options.put("[AssertionFailedError]",newAssertionFailedError());}else{options.put("[AssertionFailedError:"+System.identityHashCode
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();if(options==null){options.put("[AssertionFailedError]",newAssertionFailedError());}else{options.put("[AssertionFailedError:"+System.getProperty("
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();if(options==null){options.put("[AssertionFailedError]",newAssertionFailedError());}else{options.put("[AssertionFailedError:"+getMessage());}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46finalprotectedMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedfinalMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newLinkedHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46options.putAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46answer.addAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46aughtExceptionHandler.handleMissingError("Unexpectederror:"+Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46options.putAll(Arrays.asList(options),options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error",newIllegalStateException());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error,",newIllegalArgumentException());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Arrays.sort(options,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Arrays.sort(options,newHashMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options!=null){Arrays.sort(options);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newLinkedHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatestaticfinalMapoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap(System.err);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newHashMap(System.err,System.err);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newHashMap(System.out,System.err);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46HashSet<String>options=newHashSet<String>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46HashSet<String>options=Sets.newHashSet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Arrays.sort(this.options,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(this.options!=null){Arrays.sort(this.options);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newArrayList();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newArrayMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingsymboloptions:"+Arrays.asList(symbols));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingsymboloptions:"+getMessage());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingsymboloptions:"+Arrays.toString(symbols));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingsymboloptions:"+name);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<String>options=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<Object>options=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<Map.Entry<K,V>entry=options.entrySet().iterator().next();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<K,V>options=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<Map.Entry<K,V>entry=options.entrySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(options!=null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(options==null);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error",newIllegalArgumentException("));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46options.putAll(Arrays.asList(options)+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeThan<Map.Entry<String,AssertionFailedError==false){options.putAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeThan<Map.Entry<String,AssertionFailedError>options=(AssertionFailedError)options.clone();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeThan<Map.Entry<String,AssertionFailedError>options=(AssertionFailedError)options.getValue();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(options.size()==options.size());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(options.size()==0);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError<String>options=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError<String>options=newAssertionFailedErrorHandler();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError=newAssertionFailedError(this,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError=newAssertionFailedError(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Sets.newHashSet(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Sets.newLinkedHashSet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Collections.newHashSet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46aughtExceptionHandler.handleMissingError("msg.no.errors");
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46aughtExceptionHandler.handleMissingName(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46aughtExceptionHandler.handleFailedError(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeNameMap.putAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeNameMap.putAll(Arrays.asList(options),false);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46security("Failedtoparse:"+options.size()+"n");
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeMultiply(options){options.putAll(Arrays.asList(options));}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeMultiply(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeNames.addAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeNames.putAll(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options!=null){Arrays.sort(options);}else{options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<K,V>options=newAssertionFailedError(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<Object>options=newAssertionFailedError(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingsymboloptions:"+asPath());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Error:"+name);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Missingerror:"+name);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46OptionFailedError.checkState(options.size()>0);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46OptionFailedError.checkState(options.size()==0);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeAssertionFailedErrors();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(options.size()>0);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46Options.checkState(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46OptionFailedError.checkState(Arrays.asList(options));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(this.options!=null){Arrays.sort(this.options);}else{returnoptions;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46if(options!=null){Arrays.sort(options);}else{options.addAll(options);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46safeMultiply(Arrays.asList(options)));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<K,V>error=newAssertionFailedError();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<K,V>error=newAssertionFailedErrorImpl();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<String>options=newAssertionFailedErrorBuilder().append("n");
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privatefinalMapoptions=newHashMap();finalAssertionFailedError<K,V>error=newAssertionFailedError("Unexpectedexception:"+error.getMessage());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();Set<String>options=Sets.newHashSet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();Set<String>options=Sets.newHashSet(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();Arrays.sort(this.options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();AssertionFailedError.warning("Missingerrormessage");
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46protectedMapoptions=newHashMap();Arrays.sort(options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46privateMapoptions=newHashMap(System.err,1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46HashSet<String>options=newHashSet<String>(size());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error,",newIllegalArgumentException(""));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46this.options.put("Error,",newIllegalArgumentException("));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java46System.err.println("Error:"+getMessage());
