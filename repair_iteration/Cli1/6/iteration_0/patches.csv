bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  1);	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  	13	1	replace
2	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  1);	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  	13	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  1));	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  	13	1	replace
4	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  1));	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  	13	1	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	  	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  missing  return  statement	13	None	replace
6	[BUG]  [BUGGY]    String  opt  =  opt.toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    String  opt  =  opt.toLowerCase();  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    String  opt  =  opt.toLowerCase();		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
7	[BUG]  [BUGGY]    String  opt  =  getOptionValue(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    String  opt  =  getOptionValue(opt);  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    String  opt  =  getOptionValue(opt);		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
8	[BUG]  [BUGGY]    String  opt  =  opt.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    String  opt  =  opt.trim();  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    String  opt  =  opt.trim();		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
9	[BUG]  [BUGGY]    String  opt  =  getOptionName();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    String  opt  =  getOptionName();  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    String  opt  =  getOptionName();		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
10	[BUG]  [BUGGY]    if(opt  ==  null)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  ==  null)  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt  ==  null)  {  return  false;  }		non-compiled	[CE]  incomparable  types:  char  and  <null>	14	None	add
11	[BUG]  [BUGGY]    boolean  opt  =  options.hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    boolean  opt  =  options.hasOption(String.valueOf(opt));  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    boolean  opt  =  options.hasOption(String.valueOf(opt));		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
12	[BUG]  [BUGGY]    boolean  opt  =  options.containsValue(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    boolean  opt  =  options.containsValue(String.valueOf(opt));  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    boolean  opt  =  options.containsValue(String.valueOf(opt));		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
13	[BUG]  [BUGGY]    String  name  =  getName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    String  name  =  getName();  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    String  name  =  getName();		non-compiled	[CE]  cannot  find  symbol	14	None	add
14	[BUG]  [BUGGY]    boolean  opt  =  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    boolean  opt  =  options.containsKey(opt);  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    boolean  opt  =  options.containsKey(opt);		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
15	[BUG]  [BUGGY]    boolean  opt  =  options.contains(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    boolean  opt  =  options.contains(opt);  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    boolean  opt  =  options.contains(opt);		non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	add
16	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  options.hasOption(String.valueOf(opt));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  return  hasOption(String.valueOf(option));  [CE]  cannot  find  symbol  option  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(option));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(option));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  cannot  find  symbol  option	13	None	replace
18	[BUG]  [BUGGY]    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }		non-compiled	[CE]  incomparable  types:  char  and  <null>	14	None	add
19	[BUG]  [BUGGY]    if(opt  ==   "null ")  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  ==   "null ")  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt  ==   "null ")  {  return  hasOption(String.valueOf(opt));  }		non-compiled	[CE]  incomparable  types:  char  and  String	14	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }		compilable	  [FE]  AssertionFailedError  	14	1	add
21	[BUG]  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }		compilable	  [FE]  AssertionFailedError  	14	1	add
22	[BUG]  [BUGGY]    if(opt!=  null)  {  return  options.hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  return  options.hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  return  options.hasOption(String.valueOf(opt));  }		non-compiled	[CE]  incomparable  types:  char  and  <null>	14	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }		compilable	  [FE]  AssertionFailedError  	14	1	add
24	[BUG]  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }		compilable	  [FE]  AssertionFailedError  	14	1	add
