bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  opt  =  args.toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  args.toLowerCase();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.toLowerCase();	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
2	[BUG]  [BUGGY]  String  opt  =  option.toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  option.toLowerCase();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  option.toLowerCase();	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
3	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase()  +  1;  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  opt.toLowerCase()  +  1;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase()  +  1;	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
4	[BUG]  [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(String.valueOf(opt));	      boolean    opt    =    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	15	None	replace
5	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)||  options.contains(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.contains(opt)||  options.contains(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)||  options.contains(opt);	      boolean    opt    =    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	15	None	replace
6	[BUG]  [BUGGY]  boolean  opt  =  options.contains(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.contains(option);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(option);	      boolean    opt    =    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	15	None	replace
7	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	18	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator().next().hasOption(opt);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  Iterator  <  String>  it  =  options.iterator().next().hasOption(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  options.iterator().next().hasOption(opt);	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
9	[BUG]  [BUGGY]  String  opt  =  args.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  args.trim();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.trim();	      String    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	8	None	replace
10	[BUG]  [BUGGY]  String  opt  =  getOptionName().trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionName().trim();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().trim();	      String    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	8	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
12	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
14	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
16	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
18	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
19	[BUG]  [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(String.valueOf(opt));	      String    opt    =    getOptionValue(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	7	None	replace
20	[BUG]  [BUGGY]  String  opt  =  getOptionValue(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionValue(option);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(option);	      String    opt    =    getOptionValue(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	7	None	replace
21	[BUG]  [BUGGY]  String  opt  =  getOption(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOption(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(opt);	      String    opt    =    getOptionValue(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	7	None	replace
22	[BUG]  [BUGGY]  String  opt  =  getOptionValue(args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionValue(args);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(args);	      String    opt    =    getOptionValue(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	7	None	replace
23	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  args);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(String.valueOf(opt),  args);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  args);	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
24	[BUG]  [BUGGY]  return  args.hasOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  args.hasOption(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(String.valueOf(opt));	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
25	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  false);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(String.valueOf(opt),  false);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  false);	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
26	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsKey(key);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key);	      boolean    opt    =    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	replace
27	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt);	      boolean    opt    =    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	replace
28	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsKey(option);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(option);	      boolean    opt    =    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	replace
29	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	22	None	replace
30	[BUG]  [BUGGY]  if(options!=  null)  {  return  options.hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options!=  null)  {  return  options.hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  options.hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
31	[BUG]  [BUGGY]  return  this.options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  this.options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  this.options.hasOption(opt);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
32	[BUG]  [BUGGY]  return  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
33	[BUG]  [BUGGY]  return(option  ==  null)&&  options.contains(opt);  [CE]  cannot  find  symbol  option  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return(option  ==  null)&&  options.contains(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(option  ==  null)&&  options.contains(opt);	      	non-compiled	[CE]  cannot  find  symbol  option	5	None	replace
34	[BUG]  [BUGGY]  return(option  ==  null)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  option  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return(option  ==  null)&&  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(option  ==  null)&&  options.hasOption(opt);	      	non-compiled	[CE]  cannot  find  symbol  option	5	None	replace
35	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
36	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	21	None	replace
37	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	21	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
39	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
41	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
42	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  If(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  If(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    If(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	non-compiled	[CE]  ';'  expected	20	None	add
43	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  false);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt),  false);	      boolean    opt    =    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	11	None	replace
44	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);	      boolean    opt    =    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	11	None	replace
45	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  true);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt),  true);	      boolean    opt    =    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	11	None	replace
46	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( " "))  {  return  false;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
47	[BUG]  [BUGGY]  if(opt!=  null)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  false;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
48	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  ==  0)  {  return  false;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
49	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }	      if(opt    ==       "null   ")    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	19	None	replace
50	[BUG]  [BUGGY]  String  opt  =  opt  ==  null?  null  :  opt.toString();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  opt  ==  null?  null  :  opt.toString();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt  ==  null?  null  :  opt.toString();	      if(opt    ==       "null   ")    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	19	None	replace
51	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  unreachable  statement	1	None	add
52	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  opt  =  getOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  opt  =  getOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    String  opt  =  getOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	1	None	add
53	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  ')'  expected	1	None	add
54	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  HashCode  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(String.valueOf(opt)+  1);	  	non-compiled	[CE]  cannot  find  symbol  HashCode	1	None	add
55	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [CE]  cannot  find  symbol  HashCode  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	1	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  2));	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
57	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  2));	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  1)+  1);	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
59	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  1)+  1);	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  2);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
61	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  2);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
62	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)/  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  1);	  return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	2	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  0);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
64	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  0);	  return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
65	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {  [Delete]  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
66	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
67	[BUG]  [BUGGY]  parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
68	[BUG]  [BUGGY]  String  opt  =  getArgumentName();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getArgumentName();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName();	      String    opt    =    getOptionName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
69	[BUG]  [BUGGY]  String  opt  =  getArgName();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getArgName();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName();	      String    opt    =    getOptionName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
70	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt)+  1);	      boolean    opt    =    options.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	12	None	replace
71	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  false);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt),  false);	      boolean    opt    =    options.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	12	None	replace
72	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  true);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt),  true);	      boolean    opt    =    options.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	12	None	replace
73	[BUG]  [BUGGY]  return  hasOption(StringUtils.valueOf(opt));  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(StringUtils.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.valueOf(opt));	  return    hasOption(String.valueOf(option));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	17	None	replace
74	[BUG]  [BUGGY]  return  hasOption(StringUtil.valueOf(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(StringUtil.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.valueOf(opt));	  return    hasOption(String.valueOf(option));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	17	None	replace
75	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    hasOption(String.valueOf(opt  +  1));	  	non-compiled	[CE]  unreachable  statement	3	None	add
76	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	3	None	add
77	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  opt  =  getOption(String.valueOf(opt  +  1));	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	3	None	add
78	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt  ==  null)  {  return  hasOption(opt  +  1);  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt  ==  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt  ==  null)  {  return  hasOption(opt  +  1);  }	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	3	None	add
79	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	3	None	add
80	[BUG]  [BUGGY]  String  name  =  getName(),  opt);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  name  =  getName(),  opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt);	      String    name    =    getName();    	non-compiled	[CE]  ';'  expected	13	None	replace
81	[BUG]  [BUGGY]  String  name  =  getQualifiedName();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  name  =  getQualifiedName();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName();	      String    name    =    getName();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
82	[BUG]  [BUGGY]  String  name  =  getName()  + "_ "  +  opt;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  name  =  getName()  + "_ "  +  opt;  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName()  + "_ "  +  opt;	      String    name    =    getName();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
83	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  1));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  1));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt  +  1));	      boolean    opt    =    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	11	None	replace
84	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.containsKey(opt)||  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(opt)||  options.hasOption(opt);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
85	[BUG]  [BUGGY]  return  options.hasOption(opt)!=  false;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(opt)!=  false;  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)!=  false;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
86	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
87	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	aughtExceptionHandler.handleMissingException( " ");	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	24	None	replace
88	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  options.toLowerCase();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase();	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
89	[BUG]  [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  names.containsValue(String.valueOf(opt));	      boolean    opt    =    options.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	12	None	replace
90	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
91	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0  ||  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  hasOption(String.valueOf(opt));	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	21	None	replace
92	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  aughtExceptionHandler.handleOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	aughtExceptionHandler.handleOption(String.valueOf(opt));	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	21	None	replace
93	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissing( "msg.no.options ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  aughtExceptionHandler.handleMissing( "msg.no.options ");  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	aughtExceptionHandler.handleMissing( "msg.no.options ");	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	21	None	replace
94	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.valueOf(opt));	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	16	None	replace
95	[BUG]  [BUGGY]  return  options.hashCode(String.valueOf(opt));  [CE]  no  suitable  method  found  for  hashCode(String)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hashCode(String.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(String.valueOf(opt));	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(String)	16	None	replace
96	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionName().toLowerCase();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase();	      String    opt    =    getOptionName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
97	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt));	      boolean    opt    =    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	replace
98	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt);	      boolean    opt    =    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	14	None	replace
99	[BUG]  [BUGGY]  String  name  =  getName().toLowerCase();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  name  =  getName().toLowerCase();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName().toLowerCase();	      String    name    =    getName();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
100	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)&&  options.contains(opt);	      boolean    opt    =    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	15	None	replace
101	[BUG]  [BUGGY]  String  opt  =  getOptionValue(opt,  args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getOptionValue(opt,  args);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(opt,  args);	      String    opt    =    getOptionValue(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	7	None	replace
102	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	3	None	add
103	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(str  +  1));  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(str  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(str  +  1));  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
104	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  str  =  getOptionValue(opt);  if(str!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
105	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str  ==  null)  {  return  hasOption(String.valueOf(str  +  1));  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  String  str  =  getOptionValue(opt);  if(str  ==  null)  {  return  hasOption(String.valueOf(str  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    String  str  =  getOptionValue(opt);  if(str  ==  null)  {  return  hasOption(String.valueOf(str  +  1));  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
106	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
107	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
108	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    String  str  =  getOptionString(opt);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
109	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashCodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashCodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
110	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }	      if(opt    ==       "null   ")    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	19	None	replace
111	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	18	None	replace
112	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null)  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  true;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
113	[BUG]  [BUGGY]  if(opt!=  null)  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  true;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  true;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
114	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args);  [CE]  no  suitable  method  found  for  hasOption(String,List)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt),  args);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args);	  return    hasOption(String.valueOf(option));    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List)	17	None	replace
115	[BUG]  [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt));  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtils.valueOf(opt));	  return    options.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	16	None	replace
116	[BUG]  [BUGGY]  String  name  =  getString();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  name  =  getString();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getString();	      String    name    =    getName();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
117	[BUG]  [BUGGY]  char  opt  =  opt.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  char  opt  =  opt.trim();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  opt.trim();	      String    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	8	None	replace
118	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  this.options.getOption(opt);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt);	      String    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	8	None	replace
119	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  [Delete]  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	[Delete]	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  aughtExceptionHandler(hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  aughtExceptionHandler(hasOption(String.valueOf(opt)));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	aughtExceptionHandler(hasOption(String.valueOf(opt)));	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
121	[BUG]  [BUGGY]  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ';'  expected	21	None	replace
122	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
123	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
124	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  1));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1));    if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
125	[BUG]  [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  mutableMap  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt)));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  hasOption(String.valueOf(opt)));	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol  mutableMap	24	None	replace
126	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
127	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	      if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
129	[BUG]  [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]      if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
130	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    return  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  unreachable  statement	1	None	add
131	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
132	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
133	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    1);    HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
134	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase(Locale.ENGLISH);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  opt.toLowerCase(Locale.ENGLISH);  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase(Locale.ENGLISH);	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
135	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  opt.toLowerCase()  &&  hasOption(String.valueOf(opt));  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase()  &&  hasOption(String.valueOf(opt));	      String    opt    =    opt.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  3));	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
137	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  3));	  return    hasOption(String.valueOf(opt    +    1));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
138	[BUG]  [BUGGY]  return  options.hasOption(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  return  options.hasOption(opt)||  options.hasOption(opt);  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)||  options.hasOption(opt);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
139	[BUG]  [BUGGY]  if(opt!=  null)  {  return  options.hasOption(opt);  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null)  {  return  options.hasOption(opt);  }  [BUGGY]    }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  options.hasOption(opt);  }	      	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
140	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  false;  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()!=  0)  {  return  false;  }	      if(opt    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	10	None	replace
141	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }	      if(opt!=    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	18	None	replace
142	[BUG]  [BUGGY]  String  opt  =  getName();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  String  opt  =  getName();  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getName();	      String    opt    =    getOptionName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
143	[BUG]  [BUGGY]  if(options!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  hasOption(char  opt)  {    [BUGGY]  if(options!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }  [BUGGY]    return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }	      boolean    opt    =    options.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	12	None	replace
