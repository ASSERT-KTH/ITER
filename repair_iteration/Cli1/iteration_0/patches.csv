bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	new_failing_test_number
11	[BUG]  [BUGGY]    return  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    return  new  HashMap();		non-compiled	[CE]  illegal  start  of  type	5	None
12	[BUG]  [BUGGY]    new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    new  HashMap();		non-compiled	[CE]  illegal  start  of  type	5	None
13	[BUG]  [BUGGY]    super.setOptions(options);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.setOptions(options);  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    super.setOptions(options);		non-compiled	[CE]  illegal  start  of  type	5	None
14	[BUG]  [BUGGY]    super.setOptions(true);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.setOptions(true);  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    super.setOptions(true);		non-compiled	[CE]  illegal  start  of  type	5	None
15	[BUG]  [BUGGY]    super.setOptions(false);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.setOptions(false);  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    super.setOptions(false);		non-compiled	[CE]  illegal  start  of  type	5	None
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	private  final  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
22	[BUG]  [BUGGY]  private  final  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	protected  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
24	[BUG]  [BUGGY]  protected  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	protected  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  public  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	public  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
25	[BUG]  [BUGGY]  public  Map  options  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  public  Map  options  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	public  Map  options  =  new  HashMap();	private  Map  options  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	4	1
32	[BUG]  [BUGGY]  return  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  options.hasOption(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.hasOption(opt);	return  options.containsKey(opt);  	non-compiled	[CE]  cannot  find  symbol	11	None
33	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  options.containsKey(opt)||  options.hasOption(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  options.hasOption(opt);	return  options.containsKey(opt);  	non-compiled	[CE]  cannot  find  symbol	11	None
34	[BUG]  [BUGGY]  return  options.containsKey(opt)||  args.containsValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  options.containsKey(opt)||  args.containsValue(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  args.containsValue(opt);	return  options.containsKey(opt);  	non-compiled	[CE]  cannot  find  symbol	11	None
35	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	  	return  options.containsKey(opt);  	non-compiled	[CE]  missing  return  statement	11	None
51	[BUG]  [BUGGY]    return  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    return  new  HashCodeMap();		non-compiled	[CE]  illegal  start  of  type	9	None
52	[BUG]  [BUGGY]    super.hashcodeMap  =  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.hashcodeMap  =  new  HashMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    super.hashcodeMap  =  new  HashMap();		non-compiled	[CE]  illegal  start  of  type	9	None
53	[BUG]  [BUGGY]    super.hashCodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.hashCodeMap  =  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    super.hashCodeMap  =  new  HashCodeMap();		non-compiled	[CE]  illegal  start  of  type	9	None
54	[BUG]  [BUGGY]    super.hashCodeMap  =  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.hashCodeMap  =  new  HashMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    super.hashCodeMap  =  new  HashMap();		non-compiled	[CE]  illegal  start  of  type	9	None
55	[BUG]  [BUGGY]    super.hashcodeMap  =  new  HashCodeMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.hashcodeMap  =  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    super.hashcodeMap  =  new  HashCodeMap();		non-compiled	[CE]  illegal  start  of  type	9	None
62	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt).toLowerCase();  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt).toLowerCase();  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt).toLowerCase();	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  cannot  find  symbol	15	None
63	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt,  this.options);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  this.options);	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	15	None
64	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt)+  1;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt)+  1;	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  values  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	  	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  cannot  find  symbol  values	15	None
74	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testCLI13  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]  return(values  ==  null)?  null  :  values[1];  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	add	return(values  ==  null)?  null  :  values[1];	return  (values  ==  null)  ?  null  :  values[0];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testCLI13	17	1
75	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[1];  [FE]  ArrayIndexOutOfBoundsException  testCLI13  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]  return(values  ==  null)?  null  :  values[1];  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[1];	return  (values  ==  null)  ?  null  :  values[0];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testCLI13	17	1
75	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	  	return  (values  ==  null)  ?  null  :  values[0];  	non-compiled	[CE]  missing  return  statement	17	None
82	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+  1);	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
83	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  1);	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ ": ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
84	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ ": ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ ": ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  - ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
85	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  - ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  - ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
85	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	  	return  getOptionValue(String.valueOf(opt));  	non-compiled	[CE]  missing  return  statement	19	None
91	[BUG]  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
92	[BUG]  [BUGGY]    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
93	[BUG]  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [CE]  unclosed  string  literal  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  throw  new  IllegalArgumentException( ");  }		non-compiled	[CE]  unclosed  string  literal	14	None
94	[BUG]  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
95	[BUG]  [BUGGY]    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(!hasOption(opt))  {  args  =  options.get(opt);  if(args.contains( "- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
101	[BUG]  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
102	[BUG]  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
103	[BUG]  [BUGGY]    if(opt.equals( " "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals( " "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals( " "))  {  args  =  this.options.get(opt);  if(args.contains(opt))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
104	[BUG]  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.containsKey(opt))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
105	[BUG]  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals( " "))  {  args  =  new  HashCodeMap  <  String,String>();  if(args.contains(opt))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
111	[BUG]  [BUGGY]    return  new  ArrayList(args.size());  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  ArrayList(args.size());  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    return  new  ArrayList(args.size());		non-compiled	[CE]  illegal  start  of  type	3	None
112	[BUG]  [BUGGY]    return  new  ArrayList();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  ArrayList();  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    return  new  ArrayList();		non-compiled	[CE]  illegal  start  of  type	3	None
113	[BUG]  [BUGGY]    super.addAll(args);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.addAll(args);  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    super.addAll(args);		non-compiled	[CE]  illegal  start  of  type	3	None
114	[BUG]  [BUGGY]    return  new  ArrayList(args);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  ArrayList(args);  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    return  new  ArrayList(args);		non-compiled	[CE]  illegal  start  of  type	3	None
115	[BUG]  [BUGGY]    return  new  LinkedList();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  LinkedList();  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    return  new  LinkedList();		non-compiled	[CE]  illegal  start  of  type	3	None
121	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
122	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!args.contains(opt))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
123	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!args.contains( "- "))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
124	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!args.isEmpty())  {  throw  new  CommandLineException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
125	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!args.contains(opt))  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!args.contains(opt))  {  return  null;  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!args.contains(opt))  {  return  null;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
131	[BUG]  [BUGGY]  private  List  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  List  args  =  new  ArrayList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  List  args  =  new  ArrayList();	private  List  args  =  new  LinkedList();  	non-compiled	[CE]  cannot  find  symbol	2	None
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  List  args  =  new  LinkedList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	private  final  List  args  =  new  LinkedList();	private  List  args  =  new  LinkedList();  	compilable	  [FE]  AssertionFailedError  testCLI13	2	1
133	[BUG]  [BUGGY]  private  final  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  List  args  =  new  LinkedList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  final  List  args  =  new  LinkedList();	private  List  args  =  new  LinkedList();  	compilable	  [FE]  AssertionFailedError  testCLI13	2	1
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  List  args  =  new  LinkedList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	add	protected  List  args  =  new  LinkedList();	private  List  args  =  new  LinkedList();  	compilable	  [FE]  AssertionFailedError  testCLI13	2	1
134	[BUG]  [BUGGY]  protected  List  args  =  new  LinkedList();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  List  args  =  new  LinkedList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	protected  List  args  =  new  LinkedList();	private  List  args  =  new  LinkedList();  	compilable	  [FE]  AssertionFailedError  testCLI13	2	1
134	[BUG]  [BUGGY]  private  ArrayList  args  =  new  ArrayList();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  ArrayList  args  =  new  ArrayList();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	private  ArrayList  args  =  new  ArrayList();	private  List  args  =  new  LinkedList();  	non-compiled	[CE]  cannot  find  symbol	2	None
141	[BUG]  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  (values  ==  null)?  null  :  values[0];  }		non-compiled	[CE]  illegal  start  of  expression	16	None
142	[BUG]  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
143	[BUG]  [BUGGY]    args  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    args  =  getOptionArgs(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    args  =  getOptionArgs(opt);		non-compiled	[CE]  cannot  find  symbol	16	None
144	[BUG]  [BUGGY]    String[]  args  =  getOptionArgs(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    String[]  args  =  getOptionArgs(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    String[]  args  =  getOptionArgs(opt);		non-compiled	[CE]  cannot  find  symbol	16	None
145	[BUG]  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    if(opt!=  null)  {  String[]  values  =  getOptionValues(opt);  if(values  ==  null)  {  return  null;  }		non-compiled	[CE]  illegal  start  of  expression	16	None
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	private  final  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
152	[BUG]  [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  private  final  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	private  final  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	protected  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
154	[BUG]  [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  protected  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	protected  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  public  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	add	public  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
155	[BUG]  [BUGGY]  public  Map  hashcodeMap  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]  public  Map  hashcodeMap  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	public  Map  hashcodeMap  =  new  HashMap();	private  Map  hashcodeMap  =  new  HashMap();  	compilable	  [FE]  AssertionFailedError  testCLI13	8	1
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  1);	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
163	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  1);	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
163	[BUG]  [BUGGY]  return  isOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  isOption(String.valueOf(opt));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  isOption(String.valueOf(opt));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  cannot  find  symbol	13	None
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  : ");	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
165	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  : ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  : ");	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
171	[BUG]  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  illegal  start  of  expression	20	None
172	[BUG]  [BUGGY]    if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(!args.containsKey(opt))  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  illegal  start  of  expression	20	None
173	[BUG]  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue();  }		non-compiled	[CE]  illegal  start  of  expression	20	None
174	[BUG]  [BUGGY]    if(opt!=  null)  {  if(args.contains( "- "))  {  return  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(args.contains( "- "))  {  return  this;  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(args.contains( "- "))  {  return  this;  }		non-compiled	[CE]  illegal  start  of  expression	20	None
175	[BUG]  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(!args.contains(opt))  {  return  getOptionValue(String.valueOf(opt)+ ": ");  }		non-compiled	[CE]  illegal  start  of  expression	20	None
3	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  1;  [CE]  ';'  expected  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]  return(values  ==  null)?  null  :  values[0],  1;  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  1;	return  (values  ==  null)  ?  null  :  values[0];  	non-compiled	[CE]  ';'  expected	17	None
4	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt;  [CE]  ';'  expected  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]  return(values  ==  null)?  null  :  values[0],  opt;  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0],  opt;	return  (values  ==  null)  ?  null  :  values[0];  	non-compiled	[CE]  ';'  expected	17	None
21	[BUG]  [BUGGY]    private  final  HashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    private  final  HashCodeMap  =  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    private  final  HashCodeMap  =  new  HashCodeMap();		non-compiled	[CE]  <identifier>  expected	9	None
22	[BUG]  [BUGGY]    private  final  Map.hashCodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    private  final  Map.hashCodeMap  =  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    private  final  Map.hashCodeMap  =  new  HashCodeMap();		non-compiled	[CE]  <identifier>  expected	9	None
23	[BUG]  [BUGGY]    private  final  HashcodeMap  =  new  HashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    private  final  HashcodeMap  =  new  HashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    private  final  HashcodeMap  =  new  HashCodeMap();		non-compiled	[CE]  <identifier>  expected	9	None
24	[BUG]  [BUGGY]    private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    private  final  Map.hashCodeMap  =  HashCodeUtils.hashCodeMap();		non-compiled	[CE]  <identifier>  expected	9	None
25	[BUG]  [BUGGY]    super.hashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.hashcodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    super.hashcodeMap();		non-compiled	[CE]  illegal  start  of  type	9	None
42	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(opt));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  hasOption(String.valueOf(opt));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  ')'  expected	13	None
43	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(opt));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  opt  ==  null  &&  hasOption(String.valueOf(opt));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  ')'  expected	13	None
44	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  String.valueOf(args));  [CE]  incomparable  types:  char  and  String  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)||  opt  ==  String.valueOf(args));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)||  opt  ==  String.valueOf(args));	return  hasOption(String.valueOf(opt));  	non-compiled	[CE]  incomparable  types:  char  and  String	13	None
61	[BUG]  [BUGGY]    if(opt!=  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(opt.length()  ==  0)  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  illegal  start  of  expression	20	None
62	[BUG]  [BUGGY]    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.hasOption(opt))  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  cannot  find  symbol	20	None
63	[BUG]  [BUGGY]    Preconditions.checkArgument(opt.length()  ==  0);  [CE]  char  cannot  be  dereferenced  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    Preconditions.checkArgument(opt.length()  ==  0);  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    Preconditions.checkArgument(opt.length()  ==  0);		non-compiled	[CE]  char  cannot  be  dereferenced	20	None
64	[BUG]  [BUGGY]    opt  =  String.valueOf(opt);  [CE]  incompatible  types  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    opt  =  String.valueOf(opt);  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    opt  =  String.valueOf(opt);		non-compiled	[CE]  incompatible  types	20	None
65	[BUG]  [BUGGY]    if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(opt!=  null)  {  if(opt.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	20	None
82	[BUG]  [BUGGY]    private  final  List  args  =  new  ArrayList();  [CE]  variable  args  is  already  defined  in  class  CommandLine  [CONTEXT]    [BUGGY]    private  final  List  args  =  new  ArrayList();  [BUGGY]  private  List  args  =  new  LinkedList();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	43	43	1	replace	    private  final  List  args  =  new  ArrayList();		non-compiled	[CE]  variable  args  is  already  defined  in  class  CommandLine	3	None
123	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt,  hashcodeMap);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  hashcodeMap);	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	15	None
124	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  null;  [CE]  incompatible  types  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt)?  opt  :  null;  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt)?  opt  :  null;	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  incompatible  types	15	None
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  options.containsKey(opt)||  options.containsValue(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	add	return  options.containsKey(opt)||  options.containsValue(opt);	return  options.containsKey(opt);  	compilable	  [FE]  AssertionFailedError  testCLI13	11	1
164	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.containsValue(opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  options.containsKey(opt)||  options.containsValue(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  options.containsKey(opt)||  options.containsValue(opt);	return  options.containsKey(opt);  	compilable	  [FE]  AssertionFailedError  testCLI13	11	1
181	[BUG]  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol	14	None
182	[BUG]  [BUGGY]    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(opt!=  null)  {  return  hasOption(String.valueOf(opt));  }		non-compiled	[CE]  incomparable  types:  char  and  <null>	14	None
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    hasOption(String.valueOf(opt));  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	    hasOption(String.valueOf(opt));		compilable	  [FE]  AssertionFailedError  testCLI13	14	1
184	[BUG]  [BUGGY]    hasOption(String.valueOf(opt));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    hasOption(String.valueOf(opt));  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    hasOption(String.valueOf(opt));		compilable	  [FE]  AssertionFailedError  testCLI13	14	1
184	[BUG]  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.hasOption(String.valueOf(opt)))  {  return  true;  }		non-compiled	[CE]  cannot  find  symbol	14	None
185	[BUG]  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.hasOption(String.valueOf(opt)))  {  return  false;  }		non-compiled	[CE]  cannot  find  symbol	14	None
202	[BUG]  [BUGGY]  private  final  Map  option  =  new  HashMap();  [CE]  cannot  find  symbol  options  [CONTEXT]    [BUGGY]  private  final  Map  option  =  new  HashMap();  [BUGGY]    [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	private  final  Map  option  =  new  HashMap();	private  Map  options  =  new  HashMap();  	non-compiled	[CE]  cannot  find  symbol  options	4	None
221	[BUG]  [BUGGY]    if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(opt.equals(values))  {  if(values  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
222	[BUG]  [BUGGY]    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args!=  null)  {  values  =  new  String[args.length];  }		non-compiled	[CE]  illegal  start  of  expression	18	None
223	[BUG]  [BUGGY]    if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(opt.equals(values))  {  for(Map.Entry  <  String,  V>  option  :  opt.getOptions())  {  values[0]  =  getOptionValue(opt);  }		non-compiled	[CE]  illegal  start  of  expression	18	None
224	[BUG]  [BUGGY]    Validate.notNull(values);  [CE]  cannot  find  symbol  Validate  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    Validate.notNull(values);  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    Validate.notNull(values);		non-compiled	[CE]  cannot  find  symbol  Validate	18	None
225	[BUG]  [BUGGY]    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(opt.equals(values))  {  Map  <  String>  options  =  getOptionArgs();  if(args  ==  null)  {  values  =  new  String[args.length];  }		non-compiled	[CE]  illegal  start  of  expression	18	None
243	[BUG]  [BUGGY]    private  final  Map.Entry  <  K,  V>  options  =  new  HashMap();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    private  final  Map.Entry  <  K,  V>  options  =  new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    private  final  Map.Entry  <  K,  V>  options  =  new  HashMap();		non-compiled	[CE]  cannot  find  symbol	5	None
244	[BUG]  [BUGGY]    private  final  Map();  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]    [BUGGY]    private  final  Map();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    private  final  Map();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]    private  final  Map  Option  =  new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	add	    private  final  Map  Option  =  new  HashMap();		compilable	  [FE]  AssertionFailedError  testCLI13	5	1
246	[BUG]  [BUGGY]    private  final  Map  Option  =  new  HashMap();  [FE]  AssertionFailedError  testCLI13  [CONTEXT]    [BUGGY]    private  final  Map  Option  =  new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    private  final  Map  Option  =  new  HashMap();		compilable	  [FE]  AssertionFailedError  testCLI13	5	1
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(opt)+ "  vs ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
264	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs ");  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+ "  vs ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+ "  vs ");	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
281	[BUG]  [BUGGY]  [FE]  StackOverflowError  testCLI13  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    opt  =  getOptionValue(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	add	    opt  =  getOptionValue(opt);		compilable	  [FE]  StackOverflowError  testCLI13	16	1
282	[BUG]  [BUGGY]    opt  =  getOptionValue(opt);  [FE]  StackOverflowError  testCLI13  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    opt  =  getOptionValue(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    opt  =  getOptionValue(opt);		compilable	  [FE]  StackOverflowError  testCLI13	16	1
282	[BUG]  [BUGGY]    opt  =  getOptionArgs();  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    opt  =  getOptionArgs();  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    opt  =  getOptionArgs();		non-compiled	[CE]  cannot  find  symbol	16	None
283	[BUG]  [BUGGY]    OptionNames.put(opt.getKey(),  opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    OptionNames.put(opt.getKey(),  opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    OptionNames.put(opt.getKey(),  opt);		non-compiled	[CE]  cannot  find  symbol	16	None
284	[BUG]  [BUGGY]    opt  =  this.options.getOptionValue(opt);  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    opt  =  this.options.getOptionValue(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    opt  =  this.options.getOptionValue(opt);		non-compiled	[CE]  cannot  find  symbol	16	None
285	[BUG]  [BUGGY]    opt  =  this.options.get(opt);  [CE]  incompatible  types  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    opt  =  this.options.get(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    opt  =  this.options.get(opt);		non-compiled	[CE]  incompatible  types	16	None
321	[BUG]  [BUGGY]    if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(options.hasOption(opt))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol	12	None
322	[BUG]  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
323	[BUG]  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
324	[BUG]  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals(options.getKey()))  {  if(opt.equals(options.getValue()))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None
325	[BUG]  [BUGGY]    if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(opt.equals(options.getOption(opt)))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol	12	None
64	[BUG]  [BUGGY]    private  final  Map  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    private  final  Map  =  new  HashMap();  [BUGGY]  private  Map  options  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	46	46	1	replace	    private  final  Map  =  new  HashMap();		non-compiled	[CE]  <identifier>  expected	5	None
91	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.containsKey(opt))  {  if(!Options.isEmpty())  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  illegal  start  of  expression	20	None
92	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.containsKey(opt))  {  String  opt  =  new  String(String.valueOf(opt));  if(opt  ==  null)  {  return  getOptionValue(String.valueOf(opt));  }		non-compiled	[CE]  illegal  start  of  expression	20	None
93	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(opt);  }		non-compiled	[CE]  illegal  start  of  expression	20	None
94	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt!=  null)  {  return  options.get(opt);  }		non-compiled	[CE]  illegal  start  of  expression	20	None
95	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }  [BUGGY]  return  getOptionValue(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	    if(options.containsKey(opt))  {  String  opt  =  getOptionValue(String.valueOf(opt));  if(opt  ==  null)  {  return  options.get(0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None
154	[BUG]  [BUGGY]  return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [CE]  incompatible  types  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]  return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	return(values  ==  null)?  null  :  values[0].equals(getOptionValue(opt));	return  (values  ==  null)  ?  null  :  values[0];  	non-compiled	[CE]  incompatible  types	17	None
183	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  char));  [CE]  '.class'  expected  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(opt)+  char));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(opt)+  char));	return  getOptionValue(String.valueOf(opt));  	non-compiled	[CE]  '.class'  expected	19	None
184	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(options.keySet()));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	add	return  getOptionValue(String.valueOf(options.keySet()));	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
185	[BUG]  [BUGGY]  return  getOptionValue(String.valueOf(options.keySet()));  [FE]  ComparisonFailure  testCLI13  [CONTEXT]  public  String  getOptionValue(char  opt)  {  [BUGGY]  return  getOptionValue(String.valueOf(options.keySet()));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	137	137	1	replace	return  getOptionValue(String.valueOf(options.keySet()));	return  getOptionValue(String.valueOf(opt));  	compilable	  [FE]  ComparisonFailure  testCLI13	19	1
271	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!values.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
272	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!values.isEmpty())  {  return  getOptionValue(opt);  }		non-compiled	[CE]  illegal  start  of  expression	18	None
273	[BUG]  [BUGGY]    if(values  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(!values.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None
274	[BUG]  [BUGGY]    Arrays.sort(values);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    Arrays.sort(values);  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    Arrays.sort(values);		non-compiled	[CE]  cannot  find  symbol  Arrays	18	None
275	[BUG]  [BUGGY]    if(values  ==  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  String  getOptionValue(String  opt)  {  String[]  values  =  getOptionValues(opt);  [BUGGY]    if(values  ==  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }  [BUGGY]  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	125	125	1	replace	    if(values  ==  null)  {  if(opt.equals(values.length))  {  return  getOptionValue(opt);  }		non-compiled	[CE]  illegal  start  of  expression	18	None
302	[BUG]  [BUGGY]    return  HashcodeMap.create();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  HashcodeMap.create();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    return  HashcodeMap.create();		non-compiled	[CE]  illegal  start  of  type	9	None
303	[BUG]  [BUGGY]    return  HashCode.create();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  HashCode.create();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    return  HashCode.create();		non-compiled	[CE]  illegal  start  of  type	9	None
304	[BUG]  [BUGGY]    return  new  HashcodeMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashcodeMap();  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    return  new  HashcodeMap();		non-compiled	[CE]  illegal  start  of  type	9	None
305	[BUG]  [BUGGY]    return  new  HashCodeMap( "HashCode ");  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashCodeMap( "HashCode ");  [BUGGY]  private  Map  hashcodeMap  =  new  HashMap();  [CLASS]  CommandLine  [VARIABLES]  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	51	51	1	replace	    return  new  HashCodeMap( "HashCode ");		non-compiled	[CE]  illegal  start  of  type	9	None
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }		compilable	  [FE]  AssertionFailedError  testCLI13	14	1
333	[BUG]  [BUGGY]    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.containsKey(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }		compilable	  [FE]  AssertionFailedError  testCLI13	14	1
333	[BUG]  [BUGGY]    if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.containsKey(String.valueOf(opt)))  {  if(!hasOption(opt))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
334	[BUG]  [BUGGY]    if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    if(options.containsKey(opt))  {  if(!hasOption(opt))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None
335	[BUG]  [BUGGY]    options.add(new  Option(String.valueOf(opt)));  [CE]  no  suitable  constructor  found  for  Option(String)  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]    options.add(new  Option(String.valueOf(opt)));  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	    options.add(new  Option(String.valueOf(opt)));		non-compiled	[CE]  no  suitable  constructor  found  for  Option(String)	14	None
391	[BUG]  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None
392	[BUG]  [BUGGY]    if(options  ==  null)  {  if(!hasOption(opt))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(options  ==  null)  {  if(!hasOption(opt))  {  return  false;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(options  ==  null)  {  if(!hasOption(opt))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
393	[BUG]  [BUGGY]    checkArgument(!options.hasOption(opt));  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    checkArgument(!options.hasOption(opt));  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    checkArgument(!options.hasOption(opt));		non-compiled	[CE]  cannot  find  symbol	12	None
394	[BUG]  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(options  ==  null)  {  String  opt  =  new  HashcodeMap();  if(opt.equals( "- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	12	None
395	[BUG]  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]    if(options  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }  [BUGGY]  return  options.containsKey(opt);  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	    if(options  ==  null)  {  String  opt  =  new  HashCodeMap();  if(opt.equals( "args "))  {  return  options.get(opt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  vs ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+ "  vs ");	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
424	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  vs ");  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(opt)+ "  vs ");  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+ "  vs ");	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(options));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(options));	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
425	[BUG]  [BUGGY]  return  hasOption(String.valueOf(options));  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(char  opt)  {  [BUGGY]  return  hasOption(String.valueOf(options));  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(options));	return  hasOption(String.valueOf(opt));  	compilable	  [FE]  AssertionFailedError  testCLI13	13	1
451	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  true);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean)  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt,  true);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  true);	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean)	15	None
453	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  options);  [CE]  no  suitable  method  found  for  getOptionValues(String,Map)  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt,  options);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  options);	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,Map)	15	None
454	[BUG]  [BUGGY]  String[]  values  =  getOptionValues(opt,  false);  [CE]  no  suitable  method  found  for  getOptionValues(String,boolean)  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]  String[]  values  =  getOptionValues(opt,  false);  [BUGGY]    return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	String[]  values  =  getOptionValues(opt,  false);	String[]  values  =  getOptionValues(opt);  	non-compiled	[CE]  no  suitable  method  found  for  getOptionValues(String,boolean)	15	None
481	[BUG]  [BUGGY]    Validate.notNull(opt);  [CE]  cannot  find  symbol  Validate  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    Validate.notNull(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    Validate.notNull(opt);		non-compiled	[CE]  cannot  find  symbol  Validate	16	None
482	[BUG]  [BUGGY]    Arrays.sort(opt);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    Arrays.sort(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    Arrays.sort(opt);		non-compiled	[CE]  cannot  find  symbol  Arrays	16	None
483	[BUG]  [BUGGY]    Preconditions.checkArgument(!Options.isEmpty());  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    Preconditions.checkArgument(!Options.isEmpty());  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    Preconditions.checkArgument(!Options.isEmpty());		non-compiled	[CE]  cannot  find  symbol	16	None
484	[BUG]  [BUGGY]    checkArgument(!Options.isEmpty());  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    checkArgument(!Options.isEmpty());  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    checkArgument(!Options.isEmpty());		non-compiled	[CE]  cannot  find  symbol	16	None
485	[BUG]  [BUGGY]    Validate.notEmpty(opt);  [CE]  cannot  find  symbol  Validate  [CONTEXT]  public  String  getOptionValue(String  opt)  {  [BUGGY]    Validate.notEmpty(opt);  [BUGGY]  String[]  values  =  getOptionValues(opt);  return  (values  ==  null)  ?  null  :  values[0];  }  [CLASS]  CommandLine  [METHOD]  getOptionValue  [RETURN_TYPE]  String  String  opt  [VARIABLES]  List  args  String  opt  String[]  values  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	123	123	1	replace	    Validate.notEmpty(opt);		non-compiled	[CE]  cannot  find  symbol  Validate	16	None
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  this.options.containsKey(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	add	return  this.options.containsKey(opt);	return  options.containsKey(opt);  	compilable	  [FE]  AssertionFailedError  testCLI13	11	1
515	[BUG]  [BUGGY]  return  this.options.containsKey(opt);  [FE]  AssertionFailedError  testCLI13  [CONTEXT]  public  boolean  hasOption(String  opt)  {  [BUGGY]  return  this.options.containsKey(opt);  [BUGGY]  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  String  opt  [VARIABLES]  List  args  String  opt  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	69	69	1	replace	return  this.options.containsKey(opt);	return  options.containsKey(opt);  	compilable	  [FE]  AssertionFailedError  testCLI13	11	1
