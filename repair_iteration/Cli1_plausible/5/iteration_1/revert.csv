projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap.put(opt,true);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null||options.containsKey(opt)){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap.put(opt,false);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){hashcodeMap=true;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.keySet()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringoption:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(option);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)!=null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)==null){if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options.containsValue(opt)==null){if(options.containsValue(opt)==null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);options.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt)){thrownewIllegalArgumentException("");}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnargs.containsKey(opt)||hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringopt:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap<String,Object>();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=newOptionalOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap<String,Object>());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashMap<String,Object>options=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMapnames=newHashMap<String,Object>(options.keySet()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.containsValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newArrayList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newLinkedList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newLinkedList<String>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69for(Stringoption:options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}if(options>=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap<String,Object>();}If(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt!=null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=newHashMap();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.clear();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(opt,false);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=hashcodeMap.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapnames=newHashMap<String,Object>(options.keySet()));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap.put(opt,true);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt)||options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.get(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(args.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,hashcode);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,names);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,hashcodeMap);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,name);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options==null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}if(options>=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){options=newHashMap();}If(options!=null){options=newHashMap();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)&&hashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)==false;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt,options);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMapoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69hashcodeMap=true;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt==null){returnoptions.hasOption(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)&&options.contains(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=newOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkOption(options.containsKey(opt));
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.length);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);else{returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);Optionsoptions=options.getValue(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){options=Lists.newArrayList();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.keySet()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMaphashcodeMap=hashcodeMap.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionsoptions=(Options)args.get(opt+1);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69Optionoption=options.get(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69options.put(opt,newHashMap());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null){for(Stringopt:options.values()){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionalOptionoptions=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>options=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options!=null){returnoptions.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsKey(opt)||options.containsKey(opt);if(options.containsKey(opt)||options.containsKey(opt);elsereturnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){returnoptions.containsValue(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.containsValue(opt);if(options!=null){for(AssertionFailedErrorexception:options.values()){returnfalse;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69OptionHandler.checkArgument(options.containsKey(opt),options.hashCode());
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options==null){options=newHashMap<String,Object>();}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap().containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnhashcodeMap.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashCodeMap<String,Object>hashcodeMap=options.keySet();
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69HashcodeMap<String,Object>hashcodeMap=true;
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.contains(opt)||options.containsKey(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(options!=null&&options.containsKey(opt)){returnoptions.containsKey(opt);}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69returnoptions.hasOption(opt)||options.hasOption(opt);
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")){returntrue;}
projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java69if(opt.equals("")){returnoptions.hasOption(opt);}
