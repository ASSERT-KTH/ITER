bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  2);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  2);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  2);	  boolean    opt    =    options.hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	44	None	replace
2	[BUG]  [BUGGY]  String  opt  =  getOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(String.valueOf(opt));	  String    opt    =    getOptionValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	19	None	replace
3	[BUG]  [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt),  args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt),  args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(String.valueOf(opt),  args);	  String    opt    =    getOptionValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	19	None	replace
4	[BUG]  [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(String.valueOf(opt)+  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(String.valueOf(opt)+  1);	  String    opt    =    getOptionValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	19	None	replace
5	[BUG]  [BUGGY]  HashCode.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  HashCode  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCode.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCode.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  HashCode	92	None	replace
6	[BUG]  [BUGGY]  hasOption(String.valueOf(opt));  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  missing  return  statement	92	None	replace
7	[BUG]  [BUGGY]  args.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  args.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	args.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
8	[BUG]  [BUGGY]  GunnelExceptionHandler.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  GunnelExceptionHandler  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  GunnelExceptionHandler.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	GunnelExceptionHandler.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  GunnelExceptionHandler	92	None	replace
9	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(String.valueOf(opt));	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
10	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(opt,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt,  true);	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
11	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt,  args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(opt,  args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt,  args);	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
12	[BUG]  [BUGGY]  HashCodeExceptionHandler(hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCodeExceptionHandler(hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCodeExceptionHandler(hasOption(String.valueOf(opt)));	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
13	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)))  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  missing  return  statement	120	None	replace
14	[BUG]  [BUGGY]  boolean  hasOption(String.valueOf(opt)));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  hasOption(String.valueOf(opt)));	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  ';'  expected	120	None	replace
15	[BUG]  [BUGGY]  boolean  hasOption  =  hasOption(String.valueOf(opt));  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  hasOption  =  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  hasOption  =  hasOption(String.valueOf(opt));	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  missing  return  statement	120	None	replace
16	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    null)    {    return    hasOption(String.valueOf(opt    +    1));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	102	None	replace
17	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    null)    {    return    hasOption(String.valueOf(opt    +    1));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	102	None	replace
18	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  if(opt!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	111	None	replace
19	[BUG]  [BUGGY]  String  opt  =  opt.toUpperCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt.toUpperCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toUpperCase();	  String    opt    =    opt.toLowerCase()    +    1;    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	3	None	replace
20	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase()  /  1;  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt.toLowerCase()  /  1;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase()  /  1;	  String    opt    =    opt.toLowerCase()    +    1;    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	3	None	replace
21	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  2);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)/  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  2);	  return    hasOption(String.valueOf(opt)+    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	61	None	replace
22	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
23	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.equals(opt))  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
24	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
25	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.isEmpty())  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
26	[BUG]  [BUGGY]  return(opt  ==  null)&&  options.hasOption(opt);  [CE]  incomparable  types:  char  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(opt  ==  null)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(opt  ==  null)&&  options.hasOption(opt);	  return(option    ==    null)&&    options.hasOption(opt);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	34	None	replace
27	[BUG]  [BUGGY]  return(option!=  null)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  option  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(option!=  null)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(option!=  null)&&  options.hasOption(opt);	  return(option    ==    null)&&    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	34	None	replace
28	[BUG]  [BUGGY]  return(opt!=  null)&&  options.hasOption(opt);  [CE]  incomparable  types:  char  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(opt!=  null)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(opt!=  null)&&  options.hasOption(opt);	  return(option    ==    null)&&    options.hasOption(opt);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	34	None	replace
29	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  2));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  2));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt  +  2));	  boolean    opt    =    options.hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	83	None	replace
30	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  1),  hashcodeMap);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt  +  1),  hashcodeMap);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt  +  1),  hashcodeMap);	  boolean    opt    =    options.hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	83	None	replace
31	[BUG]  [BUGGY]  String  name  =  getName(),  opt  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  opt  +  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt  +  1);	  String    name    =    getName(),    opt);    	non-compiled	[CE]  ';'  expected	80	None	replace
32	[BUG]  [BUGGY]  String  name  =  getName(),  opt,  hashcode);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  opt,  hashcode);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt,  hashcode);	  String    name    =    getName(),    opt);    	non-compiled	[CE]  ';'  expected	80	None	replace
33	[BUG]  [BUGGY]  String  name  =  getName(),  opt,  hashcodeMap);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  opt,  hashcodeMap);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt,  hashcodeMap);	  String    name    =    getName(),    opt);    	non-compiled	[CE]  ';'  expected	80	None	replace
34	[BUG]  [BUGGY]  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
35	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	131	None	replace
36	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	131	None	replace
37	[BUG]  [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    str    =    getOptionValue(opt);    if(str!=    null)    {    return    hasOption(String.valueOf(str    +    1));    }    	non-compiled	[CE]  missing  return  statement	103	None	replace
38	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  unreachable  statement	58	None	add
39	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  opt  =  getOption(String.valueOf(opt  +  1)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  opt  =  getOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    String  opt  =  getOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	58	None	add
40	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  boolean  opt  =  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  boolean  opt  =  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    boolean  opt  =  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	58	None	add
41	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt  +  1)+  1);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  ')'  expected	58	None	add
42	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  opt  =  getOption(String.valueOf(opt  +  1)+  1);  return  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  opt  =  getOption(String.valueOf(opt  +  1)+  1);  return  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    String  opt  =  getOption(String.valueOf(opt  +  1)+  1);  return  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	58	None	add
43	[BUG]  [BUGGY]  return  hasValue(String.valueOf(opt  +  1));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasValue(String.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasValue(String.valueOf(opt  +  1));	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    opt)    {    return    hasOption(String.valueOf(opt    +    1));    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
44	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  hashcode);  [CE]  cannot  find  symbol  hashcode  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  hashcode);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  hashcode);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  cannot  find  symbol  hashcode	114	None	replace
45	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  hashcodeMap);  [CE]  no  suitable  method  found  for  hasOption(String,List,Map)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  hashcodeMap);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  hashcodeMap);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List,Map)	114	None	replace
46	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  names);  [CE]  no  suitable  method  found  for  hasOption(String,List,Map)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  names);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  names);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List,Map)	114	None	replace
47	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  options);  [CE]  no  suitable  method  found  for  hasOption(String,List,Map)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  options);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  options);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List,Map)	114	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
49	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
50	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf	  	non-compiled	[CE]  ')'  expected	40	None	add
51	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
52	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
54	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
55	[BUG]  [BUGGY]  if(opt  <  0  ||  opt  ==  String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0  ||  opt  ==  String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0  ||  opt  ==  String.valueOf(opt))  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    haveOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  String	90	None	replace
56	[BUG]  [BUGGY]  if(opt  <  0  ||  opt  >  args.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0  ||  opt  >  args.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0  ||  opt  >  args.length)  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    haveOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  length	90	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
58	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
60	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
62	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
64	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
66	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
68	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
70	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
71	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }	  	non-compiled	[CE]  ')'  expected	11	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
73	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
75	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
77	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
78	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  true);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
79	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    If(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
80	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {  [Delete]  catch(NoClassDefFoundError  e)  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    If(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
81	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  2);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  2);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt)+  2);	  boolean    opt    =    options.containsValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	70	None	replace
82	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt)+  1));	  boolean    opt    =    options.containsValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  ';'  expected	70	None	replace
83	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf	  	non-compiled	[CE]  ')'  expected	38	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
85	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
87	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
88	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
89	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
90	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  2.0);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)/  2.0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  2.0);	  return    hasOption(String.valueOf(opt)/    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	62	None	replace
91	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  4);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)/  4);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  4);	  return    hasOption(String.valueOf(opt)/    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	62	None	replace
92	[BUG]  [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt  +  1));  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtils.valueOf(opt  +  1));	  return    options.hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	115	None	replace
93	[BUG]  [BUGGY]  return  args.hasOption(StringUtils.valueOf(opt));  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(StringUtils.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(StringUtils.valueOf(opt));	  return    options.hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	115	None	replace
94	[BUG]  [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt)+  1);  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtils.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtils.valueOf(opt)+  1);	  return    options.hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	115	None	replace
95	[BUG]  [BUGGY]  boolean  opt  =  options.contains(option)&&  options.contains(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(option)&&  options.contains(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(option)&&  options.contains(opt);	  boolean    opt    =    options.contains(opt)||    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	5	None	replace
96	[BUG]  [BUGGY]  boolean  opt  =  options.contains(option)||  options.contains(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(option)||  options.contains(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(option)||  options.contains(option);	  boolean    opt    =    options.contains(opt)||    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	5	None	replace
97	[BUG]  [BUGGY]  String  opt  =  args.toLowerCase()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  args.toLowerCase()  &&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.toLowerCase()  &&  hasOption(String.valueOf(opt));	  String    opt    =    opt.toLowerCase()    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	135	None	replace
98	[BUG]  [BUGGY]  String  opt  =  string.toLowerCase()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  string.toLowerCase()  &&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  string.toLowerCase()  &&  hasOption(String.valueOf(opt));	  String    opt    =    opt.toLowerCase()    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	135	None	replace
99	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toLowerCase()  &&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase()  &&  hasOption(String.valueOf(opt));	  String    opt    =    opt.toLowerCase()    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	135	None	replace
100	[BUG]  [BUGGY]  String  opt  =  getOptionValue(args,  opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(args,  opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(args,  opt);	  String    opt    =    getOptionValue(opt,    args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	101	None	replace
101	[BUG]  [BUGGY]  String  opt  =  getOptionValue(option,  args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(option,  args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(option,  args);	  String    opt    =    getOptionValue(opt,    args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	101	None	replace
102	[BUG]  [BUGGY]  String  opt  =  getOptionValue(opt,  null);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(opt,  null);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(opt,  null);	  String    opt    =    getOptionValue(opt,    args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	101	None	replace
103	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)||  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)||  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)||  hasOption(String.valueOf(opt));	  boolean    opt    =    options.containsKey(opt)&&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	97	None	replace
104	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key)&&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(key)&&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key)&&  hasOption(String.valueOf(opt));	  boolean    opt    =    options.containsKey(opt)&&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	97	None	replace
105	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(option)&&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(option)&&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(option)&&  hasOption(String.valueOf(opt));	  boolean    opt    =    options.containsKey(opt)&&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	97	None	replace
106	[BUG]  [BUGGY]  return  args.hasOption(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(opt)||  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(opt)||  options.hasOption(opt);	  return    options.hasOption(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
107	[BUG]  [BUGGY]  return  options.hasOption(opt)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(opt)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)&&  options.hasOption(opt);	  return    options.hasOption(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
108	[BUG]  [BUGGY]  return  options.hasOption(opt)||  args.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(opt)||  args.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)||  args.hasOption(opt);	  return    options.hasOption(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
109	[BUG]  [BUGGY]  return  args.hasOption(String.valueOf(opt),  options);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(String.valueOf(opt),  options);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(String.valueOf(opt),  options);	  return    options.hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
110	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  args,  hashcode);  [CE]  cannot  find  symbol  hashcode  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(String.valueOf(opt),  args,  hashcode);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  args,  hashcode);	  return    options.hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  cannot  find  symbol  hashcode	23	None	replace
111	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  args,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(String.valueOf(opt),  args,  null);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  args,  null);	  return    options.hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
112	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  false,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt),  false,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt),  false,  true);	  boolean    opt    =    options.containsValue(String.valueOf(opt),    false);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	71	None	replace
113	[BUG]  [BUGGY]  String  opt  =  locale.toLowerCase(Locale.ENGLISH);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  locale.toLowerCase(Locale.ENGLISH);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  locale.toLowerCase(Locale.ENGLISH);	  String    opt    =    opt.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	134	None	replace
114	[BUG]  [BUGGY]  String  opt  =  Locale.toLowerCase(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  Locale.toLowerCase(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  Locale.toLowerCase(opt);	  String    opt    =    opt.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	134	None	replace
115	[BUG]  [BUGGY]  String  opt  =  Locale.toLowerCase(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  Locale.toLowerCase(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  Locale.toLowerCase(String.valueOf(opt));	  String    opt    =    opt.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	134	None	replace
116	[BUG]  [BUGGY]  parent  ==  null  &&  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&  opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	36	None	replace
117	[BUG]  [BUGGY]  String  opt  =  getOptionValue(args,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(args,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(args,  true);	  String    opt    =    getOptionValue(args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	22	None	replace
118	[BUG]  [BUGGY]  String  opt  =  getOptionValue(args,  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(args,  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(args,  false);	  String    opt    =    getOptionValue(args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	22	None	replace
119	[BUG]  [BUGGY]  vice(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  vice(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	vice(String.valueOf(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
120	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasValue(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  hasValue(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {  [Delete]  catch(Throwable  t)  {  return  hasValue(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
121	[BUG]  [BUGGY]  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  str  =  getOptionString(opt);	  return    hasOption(String.valueOf(opt)+    1);    String    str    =    getOptionString(opt);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
122	[BUG]  [BUGGY]  boolean  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(opt);	  return    hasOption(String.valueOf(opt)+    1);    String    str    =    getOptionString(opt);    	non-compiled	[CE]  ';'  expected	108	None	replace
123	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key)&&  options.containsKey(key);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(key)&&  options.containsKey(key);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key)&&  options.containsKey(key);	  boolean    opt    =    options.containsKey(opt)&&    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	98	None	replace
124	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(option)||  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(option)||  options.containsKey(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(option)||  options.containsKey(opt);	  boolean    opt    =    options.containsKey(opt)&&    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	98	None	replace
125	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.valueOf(opt)+  1);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
126	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
127	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
128	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt.length()  ==  0)  {  return  false;  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	48	None	replace
129	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  >=  0)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()  >=  0)  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  >=  0)  {  return  false;  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	48	None	replace
130	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase(Locale.ENGLISH);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase(Locale.ENGLISH);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase(Locale.ENGLISH);	  String    opt    =    getOptionName().toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	96	None	replace
131	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase()  +  1;  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase()  +  1;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase()  +  1;	  String    opt    =    getOptionName().toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	96	None	replace
132	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase(Locale.getDefault());  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase(Locale.getDefault());  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase(Locale.getDefault());	  String    opt    =    getOptionName().toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	96	None	replace
133	[BUG]  [BUGGY]  mutableMap.put(opt,  false);  [CE]  cannot  find  symbol  mutableMap  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  false);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    	non-compiled	[CE]  cannot  find  symbol  mutableMap	16	None	replace
134	[BUG]  [BUGGY]  mutableMap.put(opt,  true);  [CE]  cannot  find  symbol  mutableMap  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  true);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    	non-compiled	[CE]  cannot  find  symbol  mutableMap	16	None	replace
135	[BUG]  [BUGGY]  cast(names.get(opt));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  cast(names.get(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	cast(names.get(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
136	[BUG]  [BUGGY]  if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
137	[BUG]  [BUGGY]  if(opt  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
138	[BUG]  [BUGGY]  if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
139	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	129	None	replace
140	[BUG]  [BUGGY]  return  args.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
141	[BUG]  [BUGGY]  return  options.hashCode(opt);  [CE]  no  suitable  method  found  for  hashCode(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hashCode(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(opt);	  return    options.hasOption(opt);    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(char)	32	None	replace
142	[BUG]  [BUGGY]  return  options.hasOption(option);  [CE]  cannot  find  symbol  option  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(option);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(option);	  return    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	32	None	replace
143	[BUG]  [BUGGY]  if(options  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  options.hasOption(String.valueOf(opt));  }	  if(options!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
144	[BUG]  [BUGGY]  if(options!=  null  ||  options.hasOption(String.valueOf(opt));  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null  ||  options.hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null  ||  options.hasOption(String.valueOf(opt));  }	  if(options!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	30	None	replace
145	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  hasOption(String.valueOf(opt)+  0);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  hasOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  unreachable  statement	63	None	add
146	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  opt  =  getOption(String.valueOf(opt)+  0);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  opt  =  getOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    String  opt  =  getOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	63	None	add
147	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  0);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    HashCode.checkArgument(hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  ')'  expected	63	None	add
148	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  opt  =  getOptionValue(String.valueOf(opt)+  0);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  opt  =  getOptionValue(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    String  opt  =  getOptionValue(String.valueOf(opt)+  0);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	63	None	add
149	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(String.valueOf(opt)+  0);  [CE]  cannot  find  symbol  HashCode  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    HashCode.checkArgument(String.valueOf(opt)+  0);	  	non-compiled	[CE]  cannot  find  symbol  HashCode	63	None	add
150	[BUG]  [BUGGY]  args.handleMissing( "msg.no.options ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  args.handleMissing( "msg.no.options ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	args.handleMissing( "msg.no.options ");	  aughtExceptionHandler.handleMissing(   "msg.no.options   ");    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
151	[BUG]  [BUGGY]  handleMissing( "msg.no.options ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  handleMissing( "msg.no.options ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	handleMissing( "msg.no.options ");	  aughtExceptionHandler.handleMissing(   "msg.no.options   ");    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
152	[BUG]  [BUGGY]  if(opt!=  null)  {  aughtExceptionHandler.handleMissing( "msg.no.options ");  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  aughtExceptionHandler.handleMissing( "msg.no.options ");  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  aughtExceptionHandler.handleMissing( "msg.no.options ");  }	  aughtExceptionHandler.handleMissing(   "msg.no.options   ");    	non-compiled	[CE]  incomparable  types:  char  and  <null>	93	None	replace
153	[BUG]  [BUGGY]  Handler.handleMissing( "msg.no.options ");  [CE]  cannot  find  symbol  Handler  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Handler.handleMissing( "msg.no.options ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Handler.handleMissing( "msg.no.options ");	  aughtExceptionHandler.handleMissing(   "msg.no.options   ");    	non-compiled	[CE]  cannot  find  symbol  Handler	93	None	replace
154	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt));	  boolean    opt    =    names.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	89	None	replace
155	[BUG]  [BUGGY]  boolean  opt  =  this.names.containsValue(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  this.names.containsValue(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  this.names.containsValue(String.valueOf(opt));	  boolean    opt    =    names.containsValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	89	None	replace
156	[BUG]  [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	130	None	replace
157	[BUG]  [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	130	None	replace
158	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	130	None	replace
159	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)/  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)/  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  1)/  1);	  return    hasOption(String.valueOf(opt    +    1)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	59	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  1)+  2);	  return    hasOption(String.valueOf(opt    +    1)+    1);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
161	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  1)+  2);	  return    hasOption(String.valueOf(opt    +    1)+    1);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
162	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  false,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt),  false,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt),  false,  true);	  boolean    opt    =    options.hasOption(String.valueOf(opt),    false);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	43	None	replace
163	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( "null "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( "null "))  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( "null "))  {  return  false;  }	  if(opt    ==    null    ||    opt.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	46	None	replace
164	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( "_ "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( "_ "))  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( "_ "))  {  return  false;  }	  if(opt    ==    null    ||    opt.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	46	None	replace
165	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()!=  0)  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	110	None	replace
166	[BUG]  [BUGGY]  String  opt  =  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ';'  expected	110	None	replace
167	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
168	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	106	None	replace
169	[BUG]  [BUGGY]  String  opt  =  getOptionName().hashCode();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().hashCode();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().hashCode();	  String    opt    =    getOptionName().trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	10	None	replace
170	[BUG]  [BUGGY]  String  opt  =  getOptionName().substring(0,  opt.length()  -  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().substring(0,  opt.length()  -  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().substring(0,  opt.length()  -  1);	  String    opt    =    getOptionName().trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	10	None	replace
171	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  options.hasOption(opt);  }  [CE]  incomparable  types:  char  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  options.hasOption(opt);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  options.hasOption(opt);  }	  if(opt!=    null)    {    return    options.hasOption(opt);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	139	None	replace
172	[BUG]  [BUGGY]  if(opt!=  null  ||  options.hasOption(opt))  {  return  options.hasOption(opt);  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  options.hasOption(opt))  {  return  options.hasOption(opt);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  options.hasOption(opt))  {  return  options.hasOption(opt);  }	  if(opt!=    null)    {    return    options.hasOption(opt);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	139	None	replace
173	[BUG]  [BUGGY]  if(options!=  null)  {  return  options.hasOption(opt);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  return  options.hasOption(opt);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  options.hasOption(opt);  }	  if(opt!=    null)    {    return    options.hasOption(opt);    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
174	[BUG]  [BUGGY]  String  opt  =  getOption(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(option);	  String    opt    =    getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	21	None	replace
175	[BUG]  [BUGGY]  String  opt  =  getOption(opt,  args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(opt,  args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(opt,  args);	  String    opt    =    getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	21	None	replace
176	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	75	None	replace
177	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	75	None	replace
178	[BUG]  [BUGGY]  hasOption(String.valueOf(opt  +  1));  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  hasOption(String.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(opt  +  1));	  return    hasOption(String.valueOf(opt    +    1));    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  missing  return  statement	75	None	replace
179	[BUG]  [BUGGY]  String  opt  =  opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt!=  null  ||  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }	  if(opt!=    null    ||    opt.length()    ==    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ';'  expected	141	None	replace
180	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt  +  1));  [CE]  cannot  find  symbol  StringUtil  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.valueOf(opt  +  1));	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	94	None	replace
181	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt)+  1);  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtil.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.valueOf(opt)+  1);	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	94	None	replace
182	[BUG]  [BUGGY]  return  args.hasOption(StringUtil.valueOf(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(StringUtil.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(StringUtil.valueOf(opt));	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	94	None	replace
183	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
184	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(options.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(options.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(options.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  -  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  -  1));	  return    hasOption(String.valueOf(opt    +    3));    	compilable	  [FE]  AssertionFailedError  	137	1	replace
186	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  -  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  -  1));	  return    hasOption(String.valueOf(opt    +    3));    	compilable	  [FE]  AssertionFailedError  	137	1	replace
187	[BUG]  [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt)+  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(String.valueOf(opt)+  1);	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
188	[BUG]  [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt)).booleanValue();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt)).booleanValue();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(String.valueOf(opt)).booleanValue();	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
189	[BUG]  [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt),  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt),  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(String.valueOf(opt),  false);	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
190	[BUG]  [BUGGY]  HashCode.checkArgument(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  HashCode  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCode.checkArgument(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCode.checkArgument(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  HashCode	54	None	replace
191	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	54	None	replace
192	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOptions();	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
193	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	107	None	replace
194	[BUG]  [BUGGY]  String  name  =  getQualifiedName(),  opt);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getQualifiedName(),  opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName(),  opt);	  String    name    =    getQualifiedName();    	non-compiled	[CE]  ';'  expected	81	None	replace
195	[BUG]  [BUGGY]  String  name  =  getQualifiedName()  + "_ "  +  opt;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getQualifiedName()  + "_ "  +  opt;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName()  + "_ "  +  opt;	  String    name    =    getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
196	[BUG]  [BUGGY]  String  name  =  getQualifiedName()  + "  args ";  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getQualifiedName()  + "  args ";  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName()  + "  args ";	  String    name    =    getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
197	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()  ==  0)  {  return  true;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  ==  0)  {  return  true;  }	  if(opt    ==    null)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	112	None	replace
198	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  true;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( " "))  {  return  true;  }	  if(opt    ==    null)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	112	None	replace
199	[BUG]  [BUGGY]  return(opt  ==  null)&&  options.contains(opt);  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(opt  ==  null)&&  options.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(opt  ==  null)&&  options.contains(opt);	  return(option    ==    null)&&    options.contains(opt);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	33	None	replace
200	[BUG]  [BUGGY]  return(option!=  null)&&  options.contains(opt);  [CE]  cannot  find  symbol  option  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(option!=  null)&&  options.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(option!=  null)&&  options.contains(opt);	  return(option    ==    null)&&    options.contains(opt);    	non-compiled	[CE]  cannot  find  symbol  option	33	None	replace
201	[BUG]  [BUGGY]  return(option  ==  null)&&  options.contains(option);  [CE]  cannot  find  symbol  option  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(option  ==  null)&&  options.contains(option);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(option  ==  null)&&  options.contains(option);	  return(option    ==    null)&&    options.contains(opt);    	non-compiled	[CE]  cannot  find  symbol  option	33	None	replace
202	[BUG]  [BUGGY]  parent  ==  null  &&  opt  <  0  ||  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&  opt  <  0  ||  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&  opt  <  0  ||  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0    ||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  not  a  statement	91	None	replace
203	[BUG]  [BUGGY]  parent  ==  null  ||  opt  >=  0  ||  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  >=  0  ||  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  >=  0  ||  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0    ||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  not  a  statement	91	None	replace
204	[BUG]  [BUGGY]  String  opt  =  getArgument();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgument();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgument();	  String    opt    =    getName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	142	None	replace
205	[BUG]  [BUGGY]  String  opt  =  getArg();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArg();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArg();	  String    opt    =    getName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	142	None	replace
206	[BUG]  [BUGGY]  String  opt  =  getName()  + ": "  +  getMessage();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getName()  + ": "  +  getMessage();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getName()  + ": "  +  getMessage();	  String    opt    =    getName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	142	None	replace
207	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  hasOption(String.valueOf(opt  +  3));  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  unreachable  statement	136	None	add
208	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(hasOption(String.valueOf(opt  +  3));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashCode.checkArgument(hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  ')'  expected	136	None	add
209	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  [CE]  cannot  find  symbol  HashCode  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashCode.checkArgument(String.valueOf(opt  +  3));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	136	None	add
210	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  hasOption(String.valueOf(opt  +  3));  [CE]  cannot  find  symbol  HashCode  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashCode.checkArgument(String.valueOf(opt  +  3));  hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	136	None	add
211	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  return  hasOption(String.valueOf(opt  +  3));  [CE]  cannot  find  symbol  HashCode  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashCode.checkArgument(String.valueOf(opt  +  3));  return  hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashCode.checkArgument(String.valueOf(opt  +  3));  return  hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	136	None	add
212	[BUG]  [BUGGY]  String  opt  =  args.trim().toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  args.trim().toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.trim().toLowerCase();	  String    opt    =    args.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
213	[BUG]  [BUGGY]  String  opt  =  options.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.trim();	  String    opt    =    args.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
214	[BUG]  [BUGGY]  char  opt  =  args.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  args.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  args.trim();	  String    opt    =    args.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
215	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key)||  options.containsKey(key);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(key)||  options.containsKey(key);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key)||  options.containsKey(key);	  boolean    opt    =    options.containsKey(opt)||    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	27	None	replace
216	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)||  options.containsKey(option);	  boolean    opt    =    options.containsKey(opt)||    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	27	None	replace
217	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key)||  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(key)||  options.containsKey(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key)||  options.containsKey(opt);	  boolean    opt    =    options.containsKey(key);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	26	None	replace
218	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(key).booleanValue();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(key).booleanValue();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(key).booleanValue();	  boolean    opt    =    options.containsKey(key);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	26	None	replace
219	[BUG]  [BUGGY]  String  opt  =  options.get(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.get(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.get(opt);	  String    opt    =    options.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	88	None	replace
220	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase(false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toLowerCase(false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase(false);	  String    opt    =    options.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	88	None	replace
221	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase(true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toLowerCase(true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase(true);	  String    opt    =    options.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	88	None	replace
222	[BUG]  [BUGGY]  return  opt.hasOption(String.valueOf(opt));  [CE]  char  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  opt.hasOption(String.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  opt.hasOption(String.valueOf(opt));	  return    args.hasOption(String.valueOf(opt));    	non-compiled	[CE]  char  cannot  be  dereferenced	24	None	replace
223	[BUG]  [BUGGY]  return  opt.hasOption(String.valueOf(args));  [CE]  char  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  opt.hasOption(String.valueOf(args));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  opt.hasOption(String.valueOf(args));	  return    args.hasOption(String.valueOf(opt));    	non-compiled	[CE]  char  cannot  be  dereferenced	24	None	replace
224	[BUG]  [BUGGY]  String  opt  =  getArgumentName()  + ": "  +  getMessage();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName()  + ": "  +  getMessage();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName()  + ": "  +  getMessage();	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
225	[BUG]  [BUGGY]  String  opt  =  getArgumentName()  + "  args ";  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName()  + "  args ";  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName()  + "  args ";	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
226	[BUG]  [BUGGY]  String  opt  =  getArgumentName()  + "_options ";  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName()  + "_options ";  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName()  + "_options ";	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
228	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
229	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf	  	non-compiled	[CE]  ')'  expected	128	None	add
230	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
231	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
232	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String	  	non-compiled	[CE]  ')'  expected	128	None	add
233	[BUG]  [BUGGY]  return  hasOption(StringUtil.valueOf(opt)+  1);  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.valueOf(opt)+  1);	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
234	[BUG]  [BUGGY]  return  hasOption(StringUtil.valueOf(opt  +  1));  [CE]  cannot  find  symbol  StringUtil  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.valueOf(opt  +  1));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
235	[BUG]  [BUGGY]  return  hasOption(StringUtil.toHexString(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.toHexString(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.toHexString(opt));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
236	[BUG]  [BUGGY]  String  name  =  getShortName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getShortName();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getShortName();	  String    name    =    getString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
237	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	77	None	replace
238	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  String  opt  =  getOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	77	None	replace
239	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  String  opt  =  getOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  String  opt  =  getOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	77	None	replace
240	[BUG]  [BUGGY]  parent  ==  null  &&!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||!parent.hasOption(opt))    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	67	None	replace
241	[BUG]  [BUGGY]  parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||!parent.hasOption(opt))    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	67	None	replace
242	[BUG]  [BUGGY]  return  options.hasOption(opt)  ==  false;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(opt)  ==  false;  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)  ==  false;	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
243	[BUG]  [BUGGY]  if(options.hasOption(opt)!=  false)  {  return  options.hasOption(opt)!=  false;  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options.hasOption(opt)!=  false)  {  return  options.hasOption(opt)!=  false;  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt)!=  false)  {  return  options.hasOption(opt)!=  false;  }	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
244	[BUG]  [BUGGY]  if(options.hasOption(opt)!=  false)return  true;  if(options.hasOption(opt)!=  false)  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options.hasOption(opt)!=  false)return  true;  if(options.hasOption(opt)!=  false)  {  return  true;  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt)!=  false)return  true;  if(options.hasOption(opt)!=  false)  {  return  true;  }	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
245	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    opt)    {    return    hasOption(String.valueOf(opt    +    1));    }    else    {    List    <    String>    options    =    new    ArrayList    <    String>();    for(String    option    :    options.keySet())    {    return    options.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
246	[BUG]  [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    opt)    {    return    hasOption(String.valueOf(opt    +    1));    }    else    {    List    <    String>    options    =    new    ArrayList    <    String>();    for(String    option    :    options.keySet())    {    return    options.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
247	[BUG]  [BUGGY]  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	35	None	replace
248	[BUG]  [BUGGY]  while((  opt  ==  null)&&(opt  <  0))  {  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  while((  opt  ==  null)&&(opt  <  0))  {  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	while((  opt  ==  null)&&(opt  <  0))  {  try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	35	None	replace
249	[BUG]  [BUGGY]  while((  opt  ==  null)&&(opt!=  null))  {  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  while((  opt  ==  null)&&(opt!=  null))  {  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	while((  opt  ==  null)&&(opt!=  null))  {  try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	35	None	replace
250	[BUG]  [BUGGY]  handleMissingException( " ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  handleMissingException( " ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
251	[BUG]  [BUGGY]  args.handleMissingException( " ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  args.handleMissingException( " ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	args.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
252	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	126	None	replace
253	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	126	None	replace
254	[BUG]  [BUGGY]  char  opt  =  option.toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  option.toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  option.toLowerCase();	  String    opt    =    option.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	2	None	replace
255	[BUG]  [BUGGY]  return  hasOption(StringUtils.valueOf(opt  +  1));  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.valueOf(opt  +  1));	  return    hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	73	None	replace
256	[BUG]  [BUGGY]  return  hasOption(StringUtils.valueOf(opt)+  1);  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.valueOf(opt)+  1);	  return    hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	73	None	replace
257	[BUG]  [BUGGY]  return  hasOption(StringUtils.valueOf(option));  [CE]  cannot  find  symbol  option  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.valueOf(option));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.valueOf(option));	  return    hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  option	73	None	replace
258	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  hasOption(String.valueOf(opt  +  2));  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  hasOption(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    hasOption(String.valueOf(opt  +  2));	  	non-compiled	[CE]  unreachable  statement	56	None	add
259	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashCode.checkArgument(hasOption(String.valueOf(opt  +  2));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashCode.checkArgument(hasOption(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    HashCode.checkArgument(hasOption(String.valueOf(opt  +  2));	  	non-compiled	[CE]  ')'  expected	56	None	add
260	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  opt  =  getOption(String.valueOf(opt  +  2));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  opt  =  getOption(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    String  opt  =  getOption(String.valueOf(opt  +  2));	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	56	None	add
261	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashCode.checkArgument(String.valueOf(opt  +  2));  [CE]  cannot  find  symbol  HashCode  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashCode.checkArgument(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    HashCode.checkArgument(String.valueOf(opt  +  2));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	56	None	add
262	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  opt  =  getOption(String.valueOf(opt  +  2));  hasOption(opt  +  2);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  opt  =  getOption(String.valueOf(opt  +  2));  hasOption(opt  +  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    String  opt  =  getOption(String.valueOf(opt  +  2));  hasOption(opt  +  2);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	56	None	add
263	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt!=  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt!=  null)  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt    ==    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	49	None	replace
264	[BUG]  [BUGGY]  if(opt!=  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt  ==  null)  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt    ==    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	49	None	replace
265	[BUG]  [BUGGY]  hasOption(String.valueOf(opt)));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(opt)));	  mutableMap.put(opt,    hasOption(String.valueOf(opt)));    	non-compiled	[CE]  ';'  expected	125	None	replace
266	[BUG]  [BUGGY]  map.put(opt,  hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  map  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  map.put(opt,  hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	map.put(opt,  hasOption(String.valueOf(opt)));	  mutableMap.put(opt,    hasOption(String.valueOf(opt)));    	non-compiled	[CE]  cannot  find  symbol  map	125	None	replace
267	[BUG]  [BUGGY]  Map.put(opt,  hasOption(String.valueOf(opt)));  [CE]  non-static  method  put(K,V)  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Map.put(opt,  hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Map.put(opt,  hasOption(String.valueOf(opt)));	  mutableMap.put(opt,    hasOption(String.valueOf(opt)));    	non-compiled	[CE]  non-static  method  put(K,V)  cannot  be  referenced  from  a  static  context	125	None	replace
268	[BUG]  [BUGGY]  HashcodeMap.put(opt,  hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  HashcodeMap  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap.put(opt,  hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap.put(opt,  hasOption(String.valueOf(opt)));	  mutableMap.put(opt,    hasOption(String.valueOf(opt)));    	non-compiled	[CE]  cannot  find  symbol  HashcodeMap	125	None	replace
269	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
270	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(String.valueOf(opt),  true);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  true);	  return    options.hasOption(String.valueOf(opt),    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
271	[BUG]  [BUGGY]  return  args.hasOption(String.valueOf(opt),  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.hasOption(String.valueOf(opt),  false);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.hasOption(String.valueOf(opt),  false);	  return    options.hasOption(String.valueOf(opt),    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
272	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt),  false,  hashcode);  [CE]  cannot  find  symbol  hashcode  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(String.valueOf(opt),  false,  hashcode);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt),  false,  hashcode);	  return    options.hasOption(String.valueOf(opt),    false);    	non-compiled	[CE]  cannot  find  symbol  hashcode	25	None	replace
273	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  0);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)/  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  0);	  return    hasOption(String.valueOf(opt)+    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	64	None	replace
274	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1)  ==  0;  [CE]  incomparable  types:  boolean  and  int  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  1)  ==  0;  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  1)  ==  0;	  return    hasOption(String.valueOf(opt)+    0);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	64	None	replace
275	[BUG]  [BUGGY]  String  opt  =  getArgValue();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgValue();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgValue();	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
276	[BUG]  [BUGGY]  String  opt  =  getArgName()  + ": "  +  getMessage();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgName()  + ": "  +  getMessage();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName()  + ": "  +  getMessage();	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
277	[BUG]  [BUGGY]  String  opt  =  getArgName()  + "  args ";  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgName()  + "  args ";  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName()  + "  args ";	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
278	[BUG]  [BUGGY]  return  options.containsKey(opt)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.containsKey(opt)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(opt)&&  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
279	[BUG]  [BUGGY]  return  args.containsKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  args.containsKey(opt)||  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  args.containsKey(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
280	[BUG]  [BUGGY]  return  options.containsKey(opt)||  args.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.containsKey(opt)||  args.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(opt)||  args.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
281	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator().next();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Iterator  <  String>  it  =  options.iterator().next();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  options.iterator().next();	  if(opt    ==    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
282	[BUG]  [BUGGY]  String  name  =  getName(),  opt.toLowerCase();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  opt.toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt.toLowerCase();	  String    name    =    getName().toLowerCase();    	non-compiled	[CE]  ';'  expected	99	None	replace
283	[BUG]  [BUGGY]  String  name  =  getName().toLowerCase(opt);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName().toLowerCase(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName().toLowerCase(opt);	  String    name    =    getName().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
284	[BUG]  [BUGGY]  String  name  =  getName().hashCode();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName().hashCode();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName().hashCode();	  String    name    =    getName().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
285	[BUG]  [BUGGY]  return  this.options.contains(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  this.options.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  this.options.contains(opt);	  return    this.options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
286	[BUG]  [BUGGY]  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));	  return    hasOption(String.valueOf(opt    +    1));    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
287	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));	  return    hasOption(String.valueOf(opt    +    1));    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	123	None	replace
288	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt));	  return    hasOption(String.valueOf(opt    +    1));    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	123	None	replace
289	[BUG]  [BUGGY]  String  opt  =  getOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    String    opt    =    getOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	52	None	replace
290	[BUG]  [BUGGY]  boolean  opt  =  getOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  getOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  getOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    String    opt    =    getOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	52	None	replace
291	[BUG]  [BUGGY]  if(opt  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  incomparable  types:  char  and  <null>	119	None	replace
292	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  false;  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  false;  }	  [Delete]    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	119	None	replace
293	[BUG]  [BUGGY]  String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  true;  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  true;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt.toLowerCase();  if(opt  ==  null)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	119	None	replace
294	[BUG]  [BUGGY]  boolean  opt  =  options.contains(option)||  options.contains(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(option)||  options.contains(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(option)||  options.contains(opt);	  boolean    opt    =    options.contains(option);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
295	[BUG]  [BUGGY]  Iterator  <  String>  it  =  names.iterator().next().hasOption(opt);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Iterator  <  String>  it  =  names.iterator().next().hasOption(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  names.iterator().next().hasOption(opt);	  Iterator    <    String>    it    =    options.iterator().next().hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
296	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator().next().hasOption(option);  [CE]  cannot  find  symbol  option  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Iterator  <  String>  it  =  options.iterator().next().hasOption(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  options.iterator().next().hasOption(option);	  Iterator    <    String>    it    =    options.iterator().next().hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	8	None	replace
297	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    	non-compiled	[CE]  not  a  statement	86	None	replace
298	[BUG]  [BUGGY]  String  opt  =  option.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  option.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  option.trim();	  char    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	117	None	replace
299	[BUG]  [BUGGY]  Character  opt  =  opt.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Character  opt  =  opt.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Character  opt  =  opt.trim();	  char    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	117	None	replace
300	[BUG]  [BUGGY]  vices.put(opt,  false);  [CE]  cannot  find  symbol  vices  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  vices.put(opt,  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	vices.put(opt,  false);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol  vices	14	None	replace
301	[BUG]  [BUGGY]  vices.put(opt,  true);  [CE]  cannot  find  symbol  vices  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  vices.put(opt,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	vices.put(opt,  true);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol  vices	14	None	replace
302	[BUG]  [BUGGY]  hasOption(String.valueOf(opt)+  1);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	51	None	replace
303	[BUG]  [BUGGY]  HashCodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCodeMap  <  String,Object>  options  =  getOptions();	  return    hasOption(String.valueOf(opt)+    1);    HashCodeMap    <    String,Object>    options    =    getOptions();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
304	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashCodeMap  <  String,Object>  options  =  getOptions();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashCodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  1);  HashCodeMap  <  String,Object>  options  =  getOptions();	  return    hasOption(String.valueOf(opt)+    1);    HashCodeMap    <    String,Object>    options    =    getOptions();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	109	None	replace
305	[BUG]  [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
306	[BUG]  [BUGGY]  if(options  ==  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
307	[BUG]  [BUGGY]  HashCodeExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCodeExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCodeExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
308	[BUG]  [BUGGY]  if(options.contains(opt))  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options.contains(opt))  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.contains(opt))  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
309	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.length()!=  0)  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  opt.length()!=  0)  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt.length()!=  0)  {  return  false;  }	  if(opt    ==    null    ||    opt.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	140	None	replace
310	[BUG]  [BUGGY]  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [CE]  cannot  find  symbol  HashCode  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  HashCode	53	None	replace
311	[BUG]  [BUGGY]  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashCode.checkArgument(hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  ')'  expected	53	None	replace
312	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >=  names.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >=  names.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >=  names.length)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    names.length)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	37	None	replace
313	[BUG]  [BUGGY]  parent  ==  null  &&  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&  opt  <  0  ||  opt  >  names.length)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    names.length)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	37	None	replace
314	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt!=  names.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt!=  names.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt!=  names.length)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    names.length)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	37	None	replace
315	[BUG]  [BUGGY]  boolean  opt  =  options.contains(option)&&  options.contains(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(option)&&  options.contains(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(option)&&  options.contains(option);	  boolean    opt    =    options.contains(opt)&&    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	100	None	replace
316	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  hasOption(String.valueOf(opt)+  2);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  unreachable  statement	60	None	add
317	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  2);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashCode.checkArgument(hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  ')'  expected	60	None	add
318	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  String  opt  =  getOption(String.valueOf(opt)+  2);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  String  opt  =  getOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    String  opt  =  getOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	60	None	add
319	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(String.valueOf(opt)+  2);  [CE]  cannot  find  symbol  HashCode  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashCode.checkArgument(String.valueOf(opt)+  2);	  	non-compiled	[CE]  cannot  find  symbol  HashCode	60	None	add
320	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  2));  [CE]  cannot  find  symbol  HashCode  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashCode.checkArgument(hasOption(String.valueOf(opt)+  2));	  	non-compiled	[CE]  cannot  find  symbol  HashCode	60	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
322	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
324	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
326	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
328	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
329	[BUG]  [BUGGY]  cast(hasOption(String.valueOf(opt)));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  cast(hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	cast(hasOption(String.valueOf(opt)));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
330	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(opt));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||!parent.equals(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||!parent.equals(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
331	[BUG]  [BUGGY]  cast(hasOption(String.valueOf(opt));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  cast(hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	cast(hasOption(String.valueOf(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
332	[BUG]  [BUGGY]  String  opt  =  opt!=  null?  null  :  opt.toString();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  opt!=  null?  null  :  opt.toString();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  opt!=  null?  null  :  opt.toString();	  String    opt    =    opt    ==    null?    null    :    opt.toString();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	50	None	replace
333	[BUG]  [BUGGY]  String  name  =  getName()  + ",_ "  +  opt;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName()  + ",_ "  +  opt;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName()  + ",_ "  +  opt;	  String    name    =    getName()    +   "_   "    +    opt;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
334	[BUG]  [BUGGY]  Option  option  =  options.containsValue(String.valueOf(opt));  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Option  option  =  options.containsValue(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Option  option  =  options.containsValue(String.valueOf(opt));	  if(options!=    null)    {    boolean    opt    =    options.containsValue(String.valueOf(opt));    }    	non-compiled	[CE]  incompatible  types	143	None	replace
335	[BUG]  [BUGGY]  Option  option  =  options.getOption(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Option  option  =  options.getOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Option  option  =  options.getOption(String.valueOf(opt));	  if(options!=    null)    {    boolean    opt    =    options.containsValue(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
336	[BUG]  [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  1));	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+    1));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	55	None	replace
337	[BUG]  [BUGGY]  return  options.hashCode(String.valueOf(opt),  args);  [CE]  no  suitable  method  found  for  hashCode(String,List)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hashCode(String.valueOf(opt),  args);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(String.valueOf(opt),  args);	  return    options.hashCode(String.valueOf(opt));    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(String,List)	95	None	replace
338	[BUG]  [BUGGY]  return  options.hashCode(String.valueOf(opt)+  1);  [CE]  no  suitable  method  found  for  hashCode(String)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hashCode(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(String.valueOf(opt)+  1);	  return    options.hashCode(String.valueOf(opt));    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(String)	95	None	replace
339	[BUG]  [BUGGY]  String  name  =  getOptionName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getOptionName();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getOptionName();	  String    name    =    getString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
340	[BUG]  [BUGGY]  String  opt  =  getOptionValue(opt,  args,  null);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(opt,  args,  null);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(opt,  args,  null);	  String    opt    =    getOptionValue(opt,    args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	101	None	replace
341	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.stringValue(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtil.stringValue(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.stringValue(opt));	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	94	None	replace
342	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.toHexString(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtil.toHexString(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.toHexString(opt));	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	94	None	replace
343	[BUG]  [BUGGY]  if(opt!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  boolean  opt  =  options.containsValue(String.valueOf(opt));  }	  if(options!=    null)    {    boolean    opt    =    options.containsValue(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	143	None	replace
344	[BUG]  [BUGGY]  Option  option  =  options.get(String.valueOf(opt));  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Option  option  =  options.get(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Option  option  =  options.get(String.valueOf(opt));	  if(options!=    null)    {    boolean    opt    =    options.containsValue(String.valueOf(opt));    }    	non-compiled	[CE]  incompatible  types	143	None	replace
345	[BUG]  [BUGGY]  String  opt  =  null?  null  :  opt.toString();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  null?  null  :  opt.toString();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  null?  null  :  opt.toString();	  String    opt    =    opt    ==    null?    null    :    opt.toString();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	50	None	replace
346	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)/  10);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)/  10);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)/  10);	  return    hasOption(String.valueOf(opt)/    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	62	None	replace
347	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(parent));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(parent));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0)  {  return  hasOption(String.valueOf(parent));  }	  parent    ==    null    ||    opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	66	None	replace
348	[BUG]  [BUGGY]  String  name  =  getName(),  opt  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  opt  +  1;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  opt  +  1;	  String    name    =    getName(),    opt);    	non-compiled	[CE]  ';'  expected	80	None	replace
349	[BUG]  [BUGGY]  String  name  =  getName(),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName(),  null);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName(),  null);	  String    name    =    getName(),    opt);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
350	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( ". "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( ". "))  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( ". "))  {  return  false;  }	  if(opt    ==    null    ||    opt.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	46	None	replace
351	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.equals( " "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  opt.equals( " "))  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt.equals( " "))  {  return  false;  }	  if(opt    ==    null    ||    opt.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	46	None	replace
352	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	75	None	replace
353	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase(Locale.ENGLISH);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toLowerCase(Locale.ENGLISH);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase(Locale.ENGLISH);	  String    opt    =    opt.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	134	None	replace
354	[BUG]  [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  	121	None	replace
355	[BUG]  [BUGGY]  if(opt  ==  ';')  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  ';')  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  ';')  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
356	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt  +  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt  +  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)||  options.containsKey(opt  +  1);	  boolean    opt    =    options.containsKey(opt)||    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	27	None	replace
357	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(option)&&  options.containsKey(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(option)&&  options.containsKey(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(option)&&  options.containsKey(opt);	  boolean    opt    =    options.containsKey(opt)||    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	27	None	replace
358	[BUG]  [BUGGY]  char  opt  =  options.trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  options.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  options.trim();	  char    opt    =    opt.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	117	None	replace
359	[BUG]  [BUGGY]  Char  opt  =  opt.trim();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Char  opt  =  opt.trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Char  opt  =  opt.trim();	  char    opt    =    opt.trim();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
360	[BUG]  [BUGGY]  return  options.hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashCodeMap    <    String,Object>    options    =    getOptions();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
361	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.get(opt)+  1);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.get(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.get(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
362	[BUG]  [BUGGY]  return  options.hasKey(opt)||  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasKey(opt)||  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasKey(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
363	[BUG]  [BUGGY]  return  options.hashCode(opt)||  options.hasOption(opt);  [CE]  no  suitable  method  found  for  hashCode(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hashCode(opt)||  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(opt)||  options.hasOption(opt);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(char)	84	None	replace
364	[BUG]  [BUGGY]  String  name  =  getQualifiedName().trim();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getQualifiedName().trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName().trim();	  String    name    =    getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
365	[BUG]  [BUGGY]  String  name  =  getQualifiedName(opt);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getQualifiedName(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getQualifiedName(opt);	  String    name    =    getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
366	[BUG]  [BUGGY]  mutableMap.put(opt,  hasOption(opt));  [CE]  cannot  find  symbol  mutableMap  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  hasOption(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  hasOption(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  mutableMap	39	None	replace
367	[BUG]  [BUGGY]  safeMultiply(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  safeMultiply(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	safeMultiply(String.valueOf(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
368	[BUG]  [BUGGY]  mutableMap.put(opt,  null);  [CE]  cannot  find  symbol  mutableMap  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  null);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  null);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol  mutableMap	39	None	replace
369	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasValue(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasValue(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  parent.getType())  {  return  hasValue(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	126	None	replace
370	[BUG]  [BUGGY]  String  opt  =  args.substring(0,  opt.length()  -  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  args.substring(0,  opt.length()  -  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.substring(0,  opt.length()  -  1);	  String    opt    =    args.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
371	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)&&  options.contains(opt,  true);	  boolean    opt    =    options.contains(opt)&&    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	100	None	replace
372	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt,  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(opt,  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)&&  options.contains(opt,  false);	  boolean    opt    =    options.contains(opt)&&    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	100	None	replace
373	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1)||  options.hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1)||  options.hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  1)||  options.hasOption(String.valueOf(opt));	  boolean    opt    =    options.hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	44	None	replace
374	[BUG]  [BUGGY]  return  hasOption(StringUtil.stringValue(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.stringValue(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.stringValue(opt));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
375	[BUG]  [BUGGY]  return  hasOption(StringUtil.escapeHtml(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.escapeHtml(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.escapeHtml(opt));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
376	[BUG]  [BUGGY]  return  hasOption(StringUtil.restrictByNotNullOrUndefined(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.restrictByNotNullOrUndefined(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.restrictByNotNullOrUndefined(opt));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
377	[BUG]  [BUGGY]  String  opt  =  getArgName().toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgName().toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName().toLowerCase();	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
378	[BUG]  [BUGGY]  String  opt  =  getArgName().trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgName().trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName().trim();	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
379	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
380	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  ';'  expected	58	None	add
381	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    String  str  =  getOptionString(opt);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
382	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
383	[BUG]  [BUGGY]  parent  ==  null  ||  opt!=  0  ||  hasOption(String.valueOf(opt));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt!=  0  ||  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt!=  0  ||  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0    ||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  not  a  statement	91	None	replace
384	[BUG]  [BUGGY]  boolean  opt  =  names.contains(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  names.contains(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  names.contains(String.valueOf(opt));	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
385	[BUG]  [BUGGY]  String  name  =  getName()  + "._ "  +  opt;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName()  + "._ "  +  opt;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName()  + "._ "  +  opt;	  String    name    =    getName()    +   "_   "    +    opt;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
386	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)||  options.contains(opt  +  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(opt)||  options.contains(opt  +  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)||  options.contains(opt  +  1);	  boolean    opt    =    options.contains(opt)||    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	5	None	replace
387	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String	  	non-compiled	[CE]  ')'  expected	38	None	add
388	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
389	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  2));  }  [CE]  incomparable  types:  char  and  <null>  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  2));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  2));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	56	None	add
390	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    String  str  =  getOptionString(opt);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
391	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    if(opt  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	56	None	add
392	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  str  =  getOptionString(opt  +  1).trim().toLowerCase();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  String  str  =  getOptionString(opt  +  1).trim().toLowerCase();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    String  str  =  getOptionString(opt  +  1).trim().toLowerCase();	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
393	[BUG]  [BUGGY]  Handler.handleMissingException( " ");  [CE]  cannot  find  symbol  Handler  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Handler.handleMissingException( " ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Handler.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  Handler	87	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
395	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
396	[BUG]  [BUGGY]  return  options.hasOption(opt)||  options.hasOption(option);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(opt)||  options.hasOption(option);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(opt)||  options.hasOption(option);	  return    options.hasOption(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
397	[BUG]  [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  }  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  unreachable  statement	51	None	replace
398	[BUG]  [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	51	None	replace
399	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  null);  [CE]  no  suitable  method  found  for  hasOption(String,List,<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  null);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  null);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List,<null>)	114	None	replace
400	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt),  args,  false);  [CE]  no  suitable  method  found  for  hasOption(String,List,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt),  args,  false);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt),  args,  false);	  return    hasOption(String.valueOf(opt),    args);    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(String,List,boolean)	114	None	replace
401	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator(),  opt.next().hasOption(option);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Iterator  <  String>  it  =  options.iterator(),  opt.next().hasOption(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  options.iterator(),  opt.next().hasOption(option);	  Iterator    <    String>    it    =    options.iterator().next().hasOption(opt);    	non-compiled	[CE]  ';'  expected	8	None	replace
402	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.entrySet().iterator().next().hasOption(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Iterator  <  String>  it  =  options.entrySet().iterator().next().hasOption(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Iterator  <  String>  it  =  options.entrySet().iterator().next().hasOption(opt);	  Iterator    <    String>    it    =    options.iterator().next().hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
403	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&  parent!=  null;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&  parent!=  null;	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
404	[BUG]  [BUGGY]  args.add(String.valueOf(opt));  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  args.add(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	args.add(String.valueOf(opt));	  [Delete]    	non-compiled	[CE]  missing  return  statement	119	None	replace
405	[BUG]  [BUGGY]  args.put(opt,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  args.put(opt,  null);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	args.put(opt,  null);	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
406	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)||  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)||  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)||  true);	  boolean    opt    =    options.hasOption(String.valueOf(opt),    true);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	45	None	replace
407	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    String  str  =  getOptionString(opt);	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
408	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
409	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  String  str  =  getOptionValue(opt);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  String  str  =  getOptionValue(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    String  str  =  getOptionValue(opt);	  	non-compiled	[CE]  unreachable  statement	136	None	add
410	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,String>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,String>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashcodeMap  <  String,String>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
411	[BUG]  [BUGGY]  String  opt  =  getArgumentName().toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName().toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName().toLowerCase();	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
412	[BUG]  [BUGGY]  String  opt  =  getArgumentName().trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName().trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName().trim();	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
413	[BUG]  [BUGGY]  String  opt  =  getArgumentName().toLowerCase(Locale.ENGLISH);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgumentName().toLowerCase(Locale.ENGLISH);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgumentName().toLowerCase(Locale.ENGLISH);	  String    opt    =    getArgumentName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	68	None	replace
414	[BUG]  [BUGGY]  return  opt.hasOption(this.options);  [CE]  char  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  opt.hasOption(this.options);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  opt.hasOption(this.options);	  return    this.options.hasOption(opt);    	non-compiled	[CE]  char  cannot  be  dereferenced	31	None	replace
415	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1)!=  0;  [CE]  incomparable  types:  boolean  and  int  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  1)!=  0;  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  1)!=  0;	  return    hasOption(String.valueOf(opt)+    0);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	64	None	replace
416	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt)+  1;  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(opt)+  1;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt)+  1;	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
417	[BUG]  [BUGGY]  String  opt  =  options.getOption(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.getOption(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.getOption(opt);	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
418	[BUG]  [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    str    =    getOptionValue(opt);    if(str!=    null)    {    return    hasOption(String.valueOf(opt    +    1));    }    	non-compiled	[CE]  missing  return  statement	104	None	replace
419	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  0));  [CE]  cannot  find  symbol  HashCode  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  0));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  0);  HashCode.checkArgument(hasOption(String.valueOf(opt)+  0));	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(hasOption(String.valueOf(opt)+    1));    	non-compiled	[CE]  cannot  find  symbol  HashCode	55	None	replace
420	[BUG]  [BUGGY]  String  opt  =  getOption(String.valueOf(opt));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(String.valueOf(opt));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(String.valueOf(opt));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    if(opt!=    null)    {    return    hasOption(opt    +    1);    }    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	79	None	replace
421	[BUG]  [BUGGY]  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOption(String.valueOf(opt  +  1));  if(opt!=  null)  {  return  hasOption(opt  +  1);  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    if(opt!=    null)    {    return    hasOption(opt    +    1);    }    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	79	None	replace
422	[BUG]  [BUGGY]  return  hasOption(StringUtils.stringValue(opt));  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.stringValue(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.stringValue(opt));	  return    hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	73	None	replace
423	[BUG]  [BUGGY]  return  hasOption(StringUtils.indexOf(opt));  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.indexOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.indexOf(opt));	  return    hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtils	73	None	replace
424	[BUG]  [BUGGY]  if(opt!=  null  &&  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  &&  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  &&  opt.length()  ==  0)  {  return  hasOption(String.valueOf(opt));  }	  if(opt!=    null    ||    opt.length()    ==    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	141	None	replace
425	[BUG]  [BUGGY]  parent  ==  null  ||  parent!=  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  parent!=  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  parent!=  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
426	[BUG]  [BUGGY]  String  opt  =  option.toLowerCase()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  option.toLowerCase()  &&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  option.toLowerCase()  &&  hasOption(String.valueOf(opt));	  String    opt    =    opt.toLowerCase()    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	135	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
428	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
429	[BUG]  [BUGGY]  return(options  ==  null)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(options  ==  null)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(options  ==  null)&&  options.hasOption(opt);	  return(option    ==    null)&&    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
430	[BUG]  [BUGGY]  return(options!=  null)&&  options.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(options!=  null)&&  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(options!=  null)&&  options.hasOption(opt);	  return(option    ==    null)&&    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
431	[BUG]  [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt),  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt),  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  names.containsValue(String.valueOf(opt),  false);	  boolean    opt    =    options.containsValue(String.valueOf(opt),    false);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	71	None	replace
432	[BUG]  [BUGGY]  return  hasOption(StringUtils.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtils.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtils.valueOf(opt)+  1);  String  str  =  getOptionString(opt);	  return    hasOption(String.valueOf(opt)+    1);    String    str    =    getOptionString(opt);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	108	None	replace
433	[BUG]  [BUGGY]  return  hasOption(StringUtil.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.valueOf(opt)+  1);  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.valueOf(opt)+  1);  String  str  =  getOptionString(opt);	  return    hasOption(String.valueOf(opt)+    1);    String    str    =    getOptionString(opt);    	non-compiled	[CE]  cannot  find  symbol  StringUtil	108	None	replace
434	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase(false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase(false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase(false);	  String    opt    =    getOptionName().toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	96	None	replace
435	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase().trim();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase().trim();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase().trim();	  String    opt    =    getOptionName().trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	10	None	replace
436	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  0)  {  return  hasOption(String.valueOf(opt);  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	129	None	replace
437	[BUG]  [BUGGY]  String  opt  =  getOptionValue(args,  options);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(args,  options);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(args,  options);	  String    opt    =    getOptionValue(args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	22	None	replace
438	[BUG]  [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	130	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
440	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
441	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf	  	non-compiled	[CE]  ')'  expected	40	None	add
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
443	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
444	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf	  	non-compiled	[CE]  ')'  expected	40	None	add
445	[BUG]  [BUGGY]  return  options.hasOption(StringUtils.valueOf(option));  [CE]  cannot  find  symbol  option  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtils.valueOf(option));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtils.valueOf(option));	  return    options.hasOption(StringUtils.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  option	115	None	replace
446	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  null;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  &&  parent  ==  null;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  &&  parent  ==  null;	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
447	[BUG]  [BUGGY]  if(options!=  null)  {  return  options.hashCode(String.valueOf(opt));  }  [CE]  no  suitable  method  found  for  hashCode(String)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  return  options.hashCode(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  return  options.hashCode(String.valueOf(opt));  }	  if(options!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(String)	30	None	replace
448	[BUG]  [BUGGY]  if(options  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
449	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
450	[BUG]  [BUGGY]  return  arguments.hasOption(String.valueOf(opt));  [CE]  cannot  find  symbol  arguments  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  arguments.hasOption(String.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  arguments.hasOption(String.valueOf(opt));	  return    args.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  arguments	24	None	replace
451	[BUG]  [BUGGY]  parent  ==  null;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null;	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    If(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	42	None	replace
452	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    If(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
453	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(opt);	  boolean    opt    =    options.contains(option);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	6	None	replace
454	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt  +  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt  +  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  options.containsKey(opt  +  1);	  boolean    opt    =    options.containsKey(opt)&&    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	98	None	replace
455	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1)&&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)+  1)&&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt)+  1)&&  hasOption(String.valueOf(opt));	  boolean    opt    =    options.containsValue(String.valueOf(opt)+    1);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	70	None	replace
456	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  2);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
457	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
458	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
459	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashCodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashCodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
460	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt)+  0);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    HashcodeMap  <  String,Object>  hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  ';'  expected	63	None	add
461	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  0);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
462	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
463	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  str  =  getOptionString(opt);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  String  str  =  getOptionString(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    String  str  =  getOptionString(opt);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
464	[BUG]  [BUGGY]  Operator.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  Operator  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Operator.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Operator.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  Operator	92	None	replace
465	[BUG]  [BUGGY]  GunningExceptionHandler.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  GunningExceptionHandler  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  GunningExceptionHandler.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	GunningExceptionHandler.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  GunningExceptionHandler	92	None	replace
466	[BUG]  [BUGGY]  if(opt!=  null)  {  return  options.hashCode(opt);  }  [CE]  incomparable  types:  char  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  options.hashCode(opt);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  options.hashCode(opt);  }	  if(opt!=    null)    {    return    options.hasOption(opt);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	139	None	replace
467	[BUG]  [BUGGY]  return(options  ==  null)&&  options.contains(opt);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(options  ==  null)&&  options.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(options  ==  null)&&  options.contains(opt);	  return(option    ==    null)&&    options.contains(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
468	[BUG]  [BUGGY]  return(options!=  null)&&  options.contains(opt);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return(options!=  null)&&  options.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return(options!=  null)&&  options.contains(opt);	  return(option    ==    null)&&    options.contains(opt);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
469	[BUG]  [BUGGY]  if(options.hasOption(opt)  ==  false)  {  return  options.hasOption(opt)!=  false;  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options.hasOption(opt)  ==  false)  {  return  options.hasOption(opt)!=  false;  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options.hasOption(opt)  ==  false)  {  return  options.hasOption(opt)!=  false;  }	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
470	[BUG]  [BUGGY]  if(opt  ==  null)  {  return  hasOption(opt  +  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null)  {  return  hasOption(opt  +  1);  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    if(opt    ==    null)    {    return    hasOption(opt    +    1);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	78	None	replace
471	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(opt  +  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(opt  +  1);  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    if(opt    ==    null)    {    return    hasOption(opt    +    1);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	78	None	replace
472	[BUG]  [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  else  {  List  <  String>  options  =  new  ArrayList  <  String>();  for(String  option  :  options.keySet())  {  return  options.add(option);  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    opt)    {    return    hasOption(String.valueOf(opt    +    1));    }    else    {    List    <    String>    options    =    new    ArrayList    <    String>();    for(String    option    :    options.keySet())    {    return    options.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
473	[BUG]  [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    if(opt!=    opt)    {    return    hasOption(String.valueOf(opt    +    1));    }    else    {    List    <    String>    options    =    new    ArrayList    <    String>();    for(String    option    :    options.keySet())    {    return    options.add(option);    }    	non-compiled	[CE]  missing  return  statement	124	None	replace
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
475	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
476	[BUG]  [BUGGY]  if(opt  >=  '.')  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  >=  '.')  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  >=  '.')  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    haveOption(String.valueOf(opt));    }    	non-compiled	[CE]  missing  return  statement	90	None	replace
477	[BUG]  [BUGGY]  if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  haveOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    haveOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
478	[BUG]  [BUGGY]  String  opt  =  options.toLowerCase(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toLowerCase(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toLowerCase(opt);	  String    opt    =    options.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	88	None	replace
479	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  opt  =  getOption(String.valueOf(opt  +  1));  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  opt  =  getOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt  +  1));  opt  =  getOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	77	None	replace
480	[BUG]  [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt),  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  names.containsValue(String.valueOf(opt),  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  names.containsValue(String.valueOf(opt),  true);	  boolean    opt    =    options.containsValue(String.valueOf(opt),    true);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	72	None	replace
481	[BUG]  [BUGGY]  Operator.handleMissing( "msg.no.options ");  [CE]  cannot  find  symbol  Operator  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Operator.handleMissing( "msg.no.options ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Operator.handleMissing( "msg.no.options ");	  aughtExceptionHandler.handleMissing(   "msg.no.options   ");    	non-compiled	[CE]  cannot  find  symbol  Operator	93	None	replace
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
483	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  true);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
484	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	65	None	replace
485	[BUG]  [BUGGY]  if(options  ==  null)  {  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	65	None	replace
486	[BUG]  [BUGGY]  if(options!=  null)  {  try  {  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  try  {  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  try  {	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	65	None	replace
487	[BUG]  [BUGGY]  parent  ==  null  ||  opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	36	None	replace
488	[BUG]  [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt)));  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt)));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  hasOption(String.valueOf(opt)));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
489	[BUG]  [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  hasOption(String.valueOf(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	129	None	replace
490	[BUG]  [BUGGY]  Operator.handleMissingException( " ");  [CE]  cannot  find  symbol  Operator  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Operator.handleMissingException( " ");  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Operator.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  Operator	87	None	replace
491	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)	  	non-compiled	[CE]  ')'  expected	38	None	add
492	[BUG]  [BUGGY]  return  options.hasOption(option)!=  false;  [CE]  cannot  find  symbol  option  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(option)!=  false;  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(option)!=  false;	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  cannot  find  symbol  option	85	None	replace
493	[BUG]  [BUGGY]  return  options.hashCode(opt)!=  false;  [CE]  no  suitable  method  found  for  hashCode(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hashCode(opt)!=  false;  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hashCode(opt)!=  false;	  return    options.hasOption(opt)!=    false;    	non-compiled	[CE]  no  suitable  method  found  for  hashCode(char)	85	None	replace
494	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt)  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt)  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >  0)  {  return  hasOption(String.valueOf(opt)	  	non-compiled	[CE]  ')'  expected	128	None	add
495	[BUG]  [BUGGY]  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [CE]  cannot  find  symbol  HashCode  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	hasOption(String.valueOf(opt)+  1);  HashCode.checkArgument(String.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashCode.checkArgument(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol  HashCode	54	None	replace
496	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( " "))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( " "))  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt    ==    null)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	49	None	replace
497	[BUG]  [BUGGY]  return  options.containsKey(opt)||  options.hasOption(option);  [CE]  cannot  find  symbol  option  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.containsKey(opt)||  options.hasOption(option);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.containsKey(opt)||  options.hasOption(option);	  return    options.containsKey(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	84	None	replace
498	[BUG]  [BUGGY]  if(options!=  null)  {  boolean  opt  =  options.contains(String.valueOf(opt));  }  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  boolean  opt  =  options.contains(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  boolean  opt  =  options.contains(String.valueOf(opt));  }	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
499	[BUG]  [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt),  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(String.valueOf(opt),  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(String.valueOf(opt),  true);	  boolean    opt    =    options.contains(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	4	None	replace
500	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)||  false);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)||  false);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)||  false);	  boolean    opt    =    options.hasOption(String.valueOf(opt),    false);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	43	None	replace
501	[BUG]  [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    opt    =    getOption(String.valueOf(opt    +    1));    if(opt!=    null)    {    return    hasOption(opt    +    1);    }    	non-compiled	[CE]  missing  return  statement	79	None	replace
502	[BUG]  [BUGGY]  Hashcode.handleOption(String.valueOf(opt));  [CE]  cannot  find  symbol  Hashcode  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  Hashcode.handleOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	Hashcode.handleOption(String.valueOf(opt));	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  Hashcode	92	None	replace
503	[BUG]  [BUGGY]  if(opt!=  null)  {  aughtExceptionHandler.handleOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  aughtExceptionHandler.handleOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  aughtExceptionHandler.handleOption(String.valueOf(opt));  }	  aughtExceptionHandler.handleOption(String.valueOf(opt));    	non-compiled	[CE]  incomparable  types:  char  and  <null>	92	None	replace
504	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  ||  opt.length()  ==  0)  {  return  true;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  ||  opt.length()  ==  0)  {  return  true;  }	  if(opt!=    null)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	113	None	replace
505	[BUG]  [BUGGY]  parent  ==  null  ||  parent  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  parent  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  parent  <  0  ||  opt  >  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	126	None	replace
506	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  parent.getType()!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  parent.getType()!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  parent.getType()!=  parent.getType())  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    parent.getType())    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	126	None	replace
507	[BUG]  [BUGGY]  String  opt  =  getOptionName()  &&  hasOption(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName()  &&  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName()  &&  hasOption(String.valueOf(opt));	  String    opt    =    opt.toLowerCase()    &&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	135	None	replace
508	[BUG]  [BUGGY]  String  opt  =  option.toLowerCase()  +  1;  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  option.toLowerCase()  +  1;  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  option.toLowerCase()  +  1;	  String    opt    =    option.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	2	None	replace
509	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt).toLowerCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(opt).toLowerCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt).toLowerCase();	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
510	[BUG]  [BUGGY]  String  opt  =  this.options.getOption(opt,  this.args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  this.options.getOption(opt,  this.args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  this.options.getOption(opt,  this.args);	  String    opt    =    this.options.getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	118	None	replace
511	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.equals( "* "))  {  return  false;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.equals( "* "))  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.equals( "* "))  {  return  false;  }	  if(opt    ==    null    ||    opt.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	46	None	replace
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  *  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  *  2));	  return    hasOption(String.valueOf(opt    +    3));    	compilable	  [FE]  AssertionFailedError  	137	1	replace
513	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  *  2));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  *  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  *  2));	  return    hasOption(String.valueOf(opt    +    3));    	compilable	  [FE]  AssertionFailedError  	137	1	replace
514	[BUG]  [BUGGY]  return  option.hasOption(String.valueOf(opt));  [CE]  cannot  find  symbol  option  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  option.hasOption(String.valueOf(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  option.hasOption(String.valueOf(opt));	  return    args.hasOption(String.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  option	24	None	replace
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
516	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  >=  0)  {  return  hasOption(String.valueOf(opt));  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
517	[BUG]  [BUGGY]  if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    HashcodeMap    <    String,String>    options    =    hasOption(String.valueOf(opt    +    1));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
518	[BUG]  [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)&&  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsValue(String.valueOf(opt)&&  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsValue(String.valueOf(opt)&&  true);	  boolean    opt    =    options.containsValue(String.valueOf(opt),    true);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	72	None	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  args);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt)+  args);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    	compilable	  [FE]  AssertionFailedError  	107	1	replace
520	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  args);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  args);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  args);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    	compilable	  [FE]  AssertionFailedError  	107	1	replace
521	[BUG]  [BUGGY]  if(opt  <  args.size())  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  args.size())  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  args.size())  {  return  hasOption(String.valueOf(opt));  }	  [Delete]    	non-compiled	[CE]  missing  return  statement	119	None	replace
522	[BUG]  [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt));  }	  [Delete]    	non-compiled	[CE]  missing  return  statement	119	None	replace
523	[BUG]  [BUGGY]  if(opt  <  args.size())  {  return  options.hasOption(String.valueOf(opt));  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  args.size())  {  return  options.hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  args.size())  {  return  options.hasOption(String.valueOf(opt));  }	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
524	[BUG]  [BUGGY]  if(opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    haveOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
525	[BUG]  [BUGGY]  if(opt!=  null  &&  options.hasOption(opt))  {  return  options.hasOption(opt);  }  [CE]  incomparable  types:  char  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null  &&  options.hasOption(opt))  {  return  options.hasOption(opt);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null  &&  options.hasOption(opt))  {  return  options.hasOption(opt);  }	  if(opt!=    null)    {    return    options.hasOption(opt);    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	139	None	replace
526	[BUG]  [BUGGY]  String  opt  =  getOptionName().toLowerCase(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionName().toLowerCase(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionName().toLowerCase(opt);	  String    opt    =    getOptionName().toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	96	None	replace
527	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  true;  }  [CE]  incomparable  types:  char  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()!=  0)  {  return  true;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()!=  0)  {  return  true;  }	  if(opt    ==    null)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	112	None	replace
528	[BUG]  [BUGGY]  return  options.hasOption(StringUtil.valueOf(option));  [CE]  cannot  find  symbol  option  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(StringUtil.valueOf(option));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(StringUtil.valueOf(option));	  return    options.hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  option	94	None	replace
529	[BUG]  [BUGGY]  if(options!=  null  &&  options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null  &&  options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null  &&  options.containsValue(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  if(options!=    null)    {    boolean    opt    =    options.containsValue(String.valueOf(opt));    }    	non-compiled	[CE]  missing  return  statement	143	None	replace
530	[BUG]  [BUGGY]  if(options!=  null  &&  options.hasOption(String.valueOf(opt));  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null  &&  options.hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null  &&  options.hasOption(String.valueOf(opt));  }	  if(options!=    null)    {    return    options.hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	30	None	replace
531	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  =  0  ||  hasOption(String.valueOf(opt));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  =  0  ||  hasOption(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  =  0  ||  hasOption(String.valueOf(opt));	  parent    ==    null    ||    opt    <    0    ||    hasOption(String.valueOf(opt));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
532	[BUG]  [BUGGY]  if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  '.')  {  return  hasOption(String.valueOf(opt  +  1));  }	  return    hasOption(String.valueOf(opt    +    1));    String    str    =    getOptionValue(opt);    if(str    ==    null)    {    return    hasOption(String.valueOf(str    +    1));    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
533	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  3));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
534	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  3));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  3));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  3));	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
535	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  getOption(opt);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  3));  HashcodeMap  <  String,Object>  options  =  getOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    3));    HashcodeMap  <  String,Object>  options  =  getOption(opt);	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
536	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  =  0)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
537	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  <  =  0)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()  <  =  0)  {  return  false;  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  <  =  0)  {  return  false;  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
538	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
539	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  nfe)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
540	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  e)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  e)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  catch(NumberFormatException  e)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
541	[BUG]  [BUGGY]  String  opt  =  getArgName()  + "= "  +  getValue();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getArgName()  + "= "  +  getValue();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getArgName()  + "= "  +  getValue();	  String    opt    =    getArgName();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	69	None	replace
542	[BUG]  [BUGGY]  String  name  =  getName()  + "_ "  +  opt);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getName()  + "_ "  +  opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getName()  + "_ "  +  opt);	  String    name    =    getName(),    opt);    	non-compiled	[CE]  	80	None	replace
543	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  return  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  return  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    return  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  unreachable  statement	58	None	add
544	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
545	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,String>  options  =  getOptions();  return  hasOption(String.valueOf(opt  +  1)+  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)+  1);  HashcodeMap  <  String,String>  options  =  getOptions();  return  hasOption(String.valueOf(opt  +  1)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    1)+    1);    HashcodeMap  <  String,String>  options  =  getOptions();  return  hasOption(String.valueOf(opt  +  1)+  1);	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
546	[BUG]  [BUGGY]  mutableValues(String.valueOf(opt));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableValues(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableValues(String.valueOf(opt));	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    >=    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
547	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsValue(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)||  options.containsValue(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)||  options.containsValue(opt);	  boolean    opt    =    options.containsKey(opt)||    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	27	None	replace
548	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  return  hasOption(String.valueOf(opt)+  0);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  return  hasOption(String.valueOf(opt)+  0);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    return  hasOption(String.valueOf(opt)+  0);	  	non-compiled	[CE]  unreachable  statement	63	None	add
549	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  {  return  hasOption(String.valueOf(opt)+  0);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  {  return  hasOption(String.valueOf(opt)+  0);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    if(String.valueOf(opt)+  0)  {  return  hasOption(String.valueOf(opt)+  0);  }	  	non-compiled	[CE]  incompatible  types	63	None	add
550	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  {  hasOption(String.valueOf(opt)+  0);  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  {  hasOption(String.valueOf(opt)+  0);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    if(String.valueOf(opt)+  0)  {  hasOption(String.valueOf(opt)+  0);  }	  	non-compiled	[CE]  incompatible  types	63	None	add
551	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  <  options.size())  {  return  hasOption(String.valueOf(opt)+  0);  }  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  0);  if(String.valueOf(opt)+  0)  <  options.size())  {  return  hasOption(String.valueOf(opt)+  0);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    0);    if(String.valueOf(opt)+  0)  <  options.size())  {  return  hasOption(String.valueOf(opt)+  0);  }	  	non-compiled	[CE]  >  expected	63	None	add
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
553	[BUG]  [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  <  0)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
554	[BUG]  [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	130	None	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
556	[BUG]  [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options  ==  null)  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    return    hasOption(String.valueOf(opt)+    1);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
557	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)&&  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)&&  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)&&  true);	  boolean    opt    =    options.hasOption(String.valueOf(opt),    true);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	45	None	replace
558	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  return  hasOption(String.valueOf(opt)+  2);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    return  hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  unreachable  statement	60	None	add
559	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
560	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  2);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  2);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(String.valueOf(opt)+  2);  }	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
561	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);  return  hasOption(String.valueOf(opt)+  2);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  2);  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);  return  hasOption(String.valueOf(opt)+  2);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt)+    2);    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt)+  2);  return  hasOption(String.valueOf(opt)+  2);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
562	[BUG]  [BUGGY]  String  opt  =  getOptionValue(opt,  args,  true);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  getOptionValue(opt,  args,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  getOptionValue(opt,  args,  true);	  String    opt    =    getOptionValue(opt,    args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	101	None	replace
563	[BUG]  [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.hasOption(String.valueOf(opt)+  1));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.hasOption(String.valueOf(opt)+  1));	  boolean    opt    =    options.hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  4));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	add	return  hasOption(String.valueOf(opt  +  4));	  return    hasOption(String.valueOf(opt    +    2));    	compilable	  [FE]  AssertionFailedError  	57	1	replace
565	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  4));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  4));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  4));	  return    hasOption(String.valueOf(opt    +    2));    	compilable	  [FE]  AssertionFailedError  	57	1	replace
566	[BUG]  [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    String    opt    =    getOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	52	None	replace
567	[BUG]  [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  String  opt  =  getOption(String.valueOf(opt)+  1);  }  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  String  opt  =  getOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt!=  null)  {  return  hasOption(String.valueOf(opt)+  1);  String  opt  =  getOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    String    opt    =    getOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  incomparable  types:  char  and  <null>	52	None	replace
568	[BUG]  [BUGGY]  if(opt  ==  null  ||  opt.length()  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  null  ||  opt.length()  >=  0)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  null  ||  opt.length()  >=  0)  {  return  hasOption(String.valueOf(opt));  }	  if(opt    ==    null    ||    opt.length()    ==    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  incomparable  types:  char  and  <null>	110	None	replace
569	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)));  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(hasOption(String.valueOf(opt)));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)));	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  missing  return  statement	120	None	replace
570	[BUG]  [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(hasOption(String.valueOf(opt)))  {  return  hasOption(String.valueOf(opt));  }	  aughtExceptionHandler(hasOption(String.valueOf(opt)));    	non-compiled	[CE]  missing  return  statement	120	None	replace
571	[BUG]  [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  options.length)  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  opt  <  0  ||  opt  >  options.length)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  opt  <  0  ||  opt  >  options.length)  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||    opt    <    0    ||    opt    >    names.length)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  not  a  statement	37	None	replace
572	[BUG]  [BUGGY]  if(opt  ==  'n'  ||  opt  ==  'r')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  'n'  ||  opt  ==  'r')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  'n'  ||  opt  ==  'r')  {  try  {  }  catch(Throwable  t)  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
573	[BUG]  [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  try  {  return  hasOption(String.valueOf(opt));  }	  try    {    [Delete]    catch(Throwable    t)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	35	None	replace
574	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  1)*  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  1)*  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt  +  1)*  1);	  return    hasOption(String.valueOf(opt    +    1)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
575	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt)+  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt)+  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  hasOption(String.valueOf(opt)+  1);	  boolean    opt    =    options.containsKey(opt)&&    hasOption(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	97	None	replace
576	[BUG]  [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  false);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt));  }  else  {  options.put(opt,  false);  }  if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  false);  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	                if(opt        <        0)        {        return        hasOption(String.valueOf(opt));        }        else        {        options.put(opt,        true);        }        if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    false);    }    if(opt  <  0)  {  return  hasOption(String.valueOf(opt);  }  else  {  options.put(opt,  false);  }	  	non-compiled	[CE]  ')'  expected	15	None	add
577	[BUG]  [BUGGY]  return  this.options.hasOption(opt)||  this.args.hasOption(opt);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  this.options.hasOption(opt)||  this.args.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  this.options.hasOption(opt)||  this.args.hasOption(opt);	  return    this.options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
578	[BUG]  [BUGGY]  return  this.options.hasOption(opt)&&  this.args.contains(opt);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  this.options.hasOption(opt)&&  this.args.contains(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  this.options.hasOption(opt)&&  this.args.contains(opt);	  return    this.options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
579	[BUG]  [BUGGY]  char  opt  =  getOption(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  getOption(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  getOption(opt);	  String    opt    =    getOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	21	None	replace
580	[BUG]  [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.contains(opt)&&  options.contains(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.contains(opt)&&  options.contains(option);	  boolean    opt    =    options.contains(opt)&&    options.contains(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	100	None	replace
581	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(option);  [CE]  cannot  find  symbol  option  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(option);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(String.valueOf(opt)+  1);  String  str  =  getOptionString(option);	  return    hasOption(String.valueOf(opt)+    1);    String    str    =    getOptionString(opt);    	non-compiled	[CE]  cannot  find  symbol  option	108	None	replace
582	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(opt.valueOf(opt)+  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(opt.valueOf(opt)+  1);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOptions();  return  hasOption(opt.valueOf(opt)+  1);	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOptions();    return    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
583	[BUG]  [BUGGY]  parent  ==  null  ||  parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  parent  ==  null  ||  parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	parent  ==  null  ||  parent.hasOption(opt))  {  return  hasOption(String.valueOf(opt));  }	  parent    ==    null    ||!parent.hasOption(opt))    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  not  a  statement	67	None	replace
584	[BUG]  [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt),  hashcode);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableMap.put(opt,  hasOption(String.valueOf(opt),  hashcode);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableMap.put(opt,  hasOption(String.valueOf(opt),  hashcode);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    	non-compiled	[CE]  ')'  expected	39	None	replace
585	[BUG]  [BUGGY]  String  opt  =  options.toUpperCase();  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  options.toUpperCase();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  options.toUpperCase();	  String    opt    =    options.toLowerCase();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	88	None	replace
586	[BUG]  [BUGGY]  char  opt  =  getOptionValue(args);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  getOptionValue(args);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  getOptionValue(args);	  String    opt    =    getOptionValue(args);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	22	None	replace
587	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  2));  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  2));  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    if(opt!=  opt)  {  return  hasOption(String.valueOf(opt  +  2));  }	  	non-compiled	[CE]  unreachable  statement	56	None	add
588	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  2));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    HashcodeMap  <  String,Object>  options  =  hasOption(String.valueOf(opt  +  2));	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
589	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  2));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  2));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    HashcodeMap  <  String,String>  options  =  hasOption(String.valueOf(opt  +  2));	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
590	[BUG]  [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,Object>  options  =  getOptions();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(String.valueOf(opt  +  2));  HashcodeMap  <  String,Object>  options  =  getOptions();  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return    hasOption(String.valueOf(opt    +    2));    HashcodeMap  <  String,Object>  options  =  getOptions();	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
591	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsValue(opt);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsValue(opt);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  options.containsValue(opt);	  boolean    opt    =    options.containsKey(opt)&&    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	98	None	replace
592	[BUG]  [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(option);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  boolean  opt  =  options.containsKey(opt)&&  options.containsKey(option);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	boolean  opt  =  options.containsKey(opt)&&  options.containsKey(option);	  boolean    opt    =    options.containsKey(opt)&&    options.containsKey(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	98	None	replace
593	[BUG]  [BUGGY]  return  hasOption(StringUtil.decode(opt));  [CE]  cannot  find  symbol  StringUtil  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  hasOption(StringUtil.decode(opt));  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  hasOption(StringUtil.decode(opt));	  return    hasOption(StringUtil.valueOf(opt));    	non-compiled	[CE]  cannot  find  symbol  StringUtil	74	None	replace
594	[BUG]  [BUGGY]  String  opt  =  args.substring(0,  args.length()  -  1);  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  opt  =  args.substring(0,  args.length()  -  1);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  opt  =  args.substring(0,  args.length()  -  1);	  String    opt    =    args.trim();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	9	None	replace
595	[BUG]  [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(opt  ==  '.')  {  return  hasOption(String.valueOf(opt)+  1);  }  else  {  hasOption(String.valueOf(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    hasOption(String.valueOf(opt)+    1);    	non-compiled	[CE]  missing  return  statement	51	None	replace
596	[BUG]  [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  return  hasOption(String.valueOf(opt));  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  return  hasOption(String.valueOf(opt));  }  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	if(options!=  null)  {  aughtExceptionHandler  <  String>  hashcodeMap(String.valueOf(opt));  }  else  {  return  hasOption(String.valueOf(opt));  }	  aughtExceptionHandler    <    String>    hashcodeMap(String.valueOf(opt));    	non-compiled	[CE]  ';'  expected	121	None	replace
597	[BUG]  [BUGGY]  String  name  =  getHtmlName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  String  name  =  getHtmlName();  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	String  name  =  getHtmlName();	  String    name    =    getString();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
598	[BUG]  [BUGGY]  char  opt  =  getOptionValue(String.valueOf(opt));  [CE]  variable  opt  is  already  defined  in  method  hasOption(char)  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  char  opt  =  getOptionValue(String.valueOf(opt));  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	char  opt  =  getOptionValue(String.valueOf(opt));	  String    opt    =    getOptionValue(String.valueOf(opt));    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  hasOption(char)	19	None	replace
599	[BUG]  [BUGGY]  return  options.hasOption(option)||  options.hasOption(opt);  [CE]  cannot  find  symbol  option  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  return  options.hasOption(option)||  options.hasOption(opt);  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	return  options.hasOption(option)||  options.hasOption(opt);	  return    options.hasOption(opt)||    options.hasOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	138	None	replace
600	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hashCode()  +  1);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hashCode()  +  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hashCode()  +  1);  }	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
601	[BUG]  [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hasOption(opt)+  1);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hasOption(opt)+  1);  }  [BUGGY]      }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	HashcodeMap  <  String,Object>  options  =  getOption(opt);  if(options!=  null)  {  return  hasOption(options.hasOption(opt)+  1);  }	  return    hasOption(String.valueOf(opt)+    1);    HashcodeMap    <    String,Object>    options    =    getOption(opt);    if(options!=    null)    {    return    hasOption(String.valueOf(opt)+    1);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
602	[BUG]  [BUGGY]  mutableValues.put(opt,  true);  [CE]  cannot  find  symbol  mutableValues  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  hasOption(char  opt)  {      [BUGGY]  mutableValues.put(opt,  true);  [BUGGY]      return  hasOption(String.valueOf(opt));  }  [CLASS]  CommandLine  [METHOD]  hasOption  [RETURN_TYPE]  boolean  char  opt  [VARIABLES]  char  opt  List  args  boolean  Map  hashcodeMap  names  options  	projects/Cli1/src/java/org/apache/commons/cli/CommandLine.java	1.0	80	80	1	replace	mutableValues.put(opt,  true);	          if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    if(opt    <    0)    {    return    hasOption(String.valueOf(opt));    }    else    {    options.put(opt,    true);    }    	non-compiled	[CE]  cannot  find  symbol  mutableValues	12	None	replace
