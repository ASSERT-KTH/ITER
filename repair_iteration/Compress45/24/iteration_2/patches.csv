bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(buf,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(buf,  negative);	  final    byte[]    b    =    val.getByteArray(value);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
2	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteArray(val);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getByteArray(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteArray(val);	  final    byte[]    b    =    val.getByteArray(value);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
3	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(boolean);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(boolean);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(boolean);	  final    byte[]    b    =    val.getByteArray(value);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
4	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UBJECT_BACK_ENCODING ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UBJECT_BACK_ENCODING ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UBJECT_BACK_ENCODING ");	  final    byte[]    b    =    val.getBytes(   ".UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	80	None	replace
5	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.UTF-8 ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.UTF-8 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "BigInteger.UTF-8 ");	  final    byte[]    b    =    val.getBytes(   ".UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	80	None	replace
6	[BUG]  [BUGGY]  BigInteger  b  =  value.byteValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  value.byteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  value.byteValue();	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
7	[BUG]  [BUGGY]  BigInteger  b  =  val.longValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.longValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.longValue();	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
8	[BUG]  [BUGGY]  BigInteger  b  =  val.length();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.length();	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
9	[BUG]  [BUGGY]  BigInteger  b  =  val.byteValue()  +  1;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.byteValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.byteValue()  +  1;	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
10	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset,  length);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset  +  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset  +  length);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
12	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(buf,  offset);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(buf,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(buf,  offset);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
13	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean,  offset);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
14	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  offset);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
15	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buf,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buf,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  buf,  offset);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
16	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(offset,  value);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
17	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( "US-ASCII ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( "US-ASCII ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( "US-ASCII ");	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ".s.IFJDCS ");	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
20	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ",UTF-8 ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ",UTF-8 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ",UTF-8 ");	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
21	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  final  byte[]  b  =  buf.getByteArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.getByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.getByteArray();	  final    byte[]    b    =    value.getByteArray();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
23	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(val);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(val);	  final    byte[]    b    =    value.getByteArray();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
24	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(buf,  offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(buf,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(buf,  offset);	  final    byte[]    b    =    val.getByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
25	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(boolean  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(boolean  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(boolean  negative);	  final    byte[]    b    =    val.getByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
26	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteArray(buf);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getByteArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteArray(buf);	  final    byte[]    b    =    val.getByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
27	[BUG]  [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	While(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
28	[BUG]  [BUGGY]  While(val!=  null  &&  value.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  While(val!=  null  &&  value.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	While(val!=  null  &&  value.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
29	[BUG]  [BUGGY]  final  boolean  val  =  val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  boolean  val  =  val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  boolean  val  =  val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
30	[BUG]  [BUGGY]  While(val!=  null  &&  val.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  While(val!=  null  &&  val.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	While(val!=  null  &&  val.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
31	[BUG]  [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	While(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
32	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer().getByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteBuffer().getByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer().getByteArray();	  final    byte[]    b    =    val.getByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
33	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray()  *  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray()  *  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray()  *  1;	  final    byte[]    b    =    val.getByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
34	[BUG]  [BUGGY]  final  byte[]  b  =  data.toByteArray(val);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  data.toByteArray(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  data.toByteArray(val);	  final    byte[]    b    =    val.toByteArray(data);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
35	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(data,  negative);	  final    byte[]    b    =    val.toByteArray(data);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
36	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(data,  offset);	  final    byte[]    b    =    val.toByteArray(data);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
37	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(data,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(data,  value);	  final    byte[]    b    =    val.toByteArray(data);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
38	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  new  BigInteger(val.toByteArray()):  val.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  new  BigInteger(val.toByteArray()):  val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  ==  null)?  new  BigInteger(val.toByteArray()):  val.toByteArray();	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
39	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  val.toByteArray()  :  val.toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  val.toByteArray()  :  val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  ==  null)?  val.toByteArray()  :  val.toByteArray();	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
40	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  BigInteger.ZERO  :  val.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  ==  null)?  BigInteger.ZERO  :  val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  ==  null)?  BigInteger.ZERO  :  val.toByteArray();	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
41	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  0;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  0;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  0;	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
42	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MIN_VALUE)?  val.toByteArray()  :  0;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MIN_VALUE)?  val.toByteArray()  :  0;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  <  BigInteger.MIN_VALUE)?  val.toByteArray()  :  0;	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
43	[BUG]  [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  val;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  val;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =(val.toByteArray()  <  BigInteger.MAX_VALUE)?  val.toByteArray()  :  val;	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
44	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
45	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
46	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
47	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
48	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(0);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
49	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(buf);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
50	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
51	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".trim());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".trim());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".trim());	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
52	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toCharArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toCharArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").toCharArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
53	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").removeLast();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").removeLast();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").removeLast();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
54	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toString();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toString();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").toString();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
55	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictBytes();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictBytes();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictBytes();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
56	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").length;	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length;	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "js.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
60	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "ISO-8859-1 ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  byte[]  b  =  buf.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  buf.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  buf.toByteArray();	  byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  byte[]  b  =  value.toByteArray(val);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  value.toByteArray(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.toByteArray(val);	  byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
63	[BUG]  [BUGGY]  byte[]  b  =  value.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  value.toByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.toByteArray()  +  1;	  byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(true);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(true);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(true);	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
65	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(false);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(false);	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
66	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  length);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(buf,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(buf,  negative);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean,  negative);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
69	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  0,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  0,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  0,  negative);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
70	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buf);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  buf);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
71	[BUG]  [BUGGY]  final  byte[]  b  =  val.length()  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length()  +  1;	  final    byte[]    b    =    val.length();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
72	[BUG]  [BUGGY]  final  byte[]  b  =  val.length()  +  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length()  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length()  +  2;	  final    byte[]    b    =    val.length();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
73	[BUG]  [BUGGY]  final  byte[]  b  =  value.length();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.length();	  final    byte[]    b    =    val.length();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
74	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(negative);	  byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
75	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(booleanValue,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(booleanValue,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(booleanValue,  negative);	  byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
76	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(binary);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(binary);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(binary);	  final    byte[]    b    =    val.toByteArray(binary);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
77	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(binary,  value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(binary,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(binary,  value);	  final    byte[]    b    =    val.toByteArray(binary);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
78	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.intValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.intValue()  +  1;	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
79	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.doubleValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.doubleValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
80	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.longValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.longValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.longValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
81	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)value.intValue();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)value.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)value.intValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
82	[BUG]  [BUGGY]  final  BigInteger  b  =(BigInteger)val.intValue();  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  BigInteger  b  =(BigInteger)val.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  BigInteger  b  =(BigInteger)val.intValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
83	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.intValue()  *  2;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.intValue()  *  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.intValue()  *  2;	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
84	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(booleanValue,  negative);	  final    byte[]    b    =    val.getBytes(booleanValue);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
85	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(booleanValue);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(booleanValue);	  final    byte[]    b    =    val.getBytes(booleanValue);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
86	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(buf,  negative);	  final    byte[]    b    =    val.getBytes(booleanValue);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
87	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(booleanValue,  value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(booleanValue,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(booleanValue,  value);	  final    byte[]    b    =    val.toByteArray(booleanValue,    negative);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
88	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(booleanValue,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(booleanValue,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(booleanValue,  negative);	  final    byte[]    b    =    val.toByteArray(booleanValue,    negative);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
89	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative,  val);	  final    byte[]    b    =    val.toByteArray(booleanValue,    negative);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
90	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  buf);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative,  buf);	  final    byte[]    b    =    val.toByteArray(booleanValue,    negative);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
91	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(offset,  negative);	  final    byte[]    b    =    val.toByteArray(booleanValue,    negative);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
92	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean  +  1);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean  +  1);	  final    byte[]    b    =    val.toByteArray(boolean);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
93	[BUG]  [BUGGY]  final  byte[]  b  =  value.booleanValue();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.booleanValue();	  final    byte[]    b    =    val.booleanValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
94	[BUG]  [BUGGY]  byte[]  b  =  val.getBytesArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytesArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytesArray();	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
95	[BUG]  [BUGGY]  byte[]  b  =  val.getByteBuffer();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteBuffer();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteBuffer();	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
96	[BUG]  [BUGGY]  byte[]  b  =  value.getByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  value.getByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.getByteArray();	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
97	[BUG]  [BUGGY]  final  byte[]  b  =  buf.getBytes();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.getBytes();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.getBytes();	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
98	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(val.length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(val.length);	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
99	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".charAt(0));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".charAt(0));	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
100	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").charAt(0);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").charAt(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "ISO-8859-1 ").charAt(0);	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
101	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ".charAt(0));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "js.IFJDCS ".charAt(0));	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
102	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "s.IFJDCS ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "s.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "s.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
103	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ".length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
104	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ".length());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "ISO-8859-1 ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "ISO-8859-1 ".length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
105	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").length();	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
106	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "js.IFJDCS ".length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
108	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer(buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteBuffer(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer(buf);	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
109	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteBuffer();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getByteBuffer();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteBuffer();	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
110	[BUG]  [BUGGY]  final  byte[]  buf  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  buf  =  val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  buf  =  val.toByteArray();	  final    byte[]    b    =    buf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
111	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  offset);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(buf,  offset);	  final    byte[]    b    =    val.getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
112	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(offset,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(offset,  length);	  final    byte[]    b    =    val.getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
113	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(offset  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(offset  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(offset  +  1);	  final    byte[]    b    =    val.getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
114	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(length);	  final    byte[]    b    =    val.getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
115	[BUG]  [BUGGY]  final  byte[]  b  =  value.byteValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.byteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.byteValue();	  final    byte[]    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
116	[BUG]  [BUGGY]  byte[]  b  =  val.byteValue();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.byteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.byteValue();	  final    byte[]    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
117	[BUG]  [BUGGY]  final  byte[]  b  =  val.byteValue()  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.byteValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.byteValue()  +  1;	  final    byte[]    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
118	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(false);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(false);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
119	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(true,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(true,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(true,  negative);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
120	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(boolean  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(boolean  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(boolean  negative);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
121	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(false,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(false,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(false,  negative);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
122	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(null);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(null);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(null);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
123	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(true,  false);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(true,  false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(true,  false);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
124	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(intValue);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(intValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(intValue);	  final    byte[]    b    =    val.getBytes(intValue);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
125	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset  +  1];  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset  +  1];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  [offset  +  1];	  final    byte[]    b    =    val.toByteArray()    [offset];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
126	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  [0];  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  [0];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  [0];	  final    byte[]    b    =    val.toByteArray()    [offset];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
127	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  [length];  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  [length];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  [length];	  final    byte[]    b    =    val.toByteArray()    [offset];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
128	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset++];  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset++];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  [offset++];	  final    byte[]    b    =    val.toByteArray()    [offset];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
129	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray()  [offset];  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray()  [offset];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray()  [offset];	  final    byte[]    b    =    val.toByteArray()    [offset];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
130	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean,  value);	  final    byte[]    b    =    val.toByteArray(buf,    value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
131	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset,  value);	  final    byte[]    b    =    val.toByteArray(buf,    value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
132	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".toByteArray());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".toByteArray());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".toByteArray());	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
133	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ",UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ",UTF-8 ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ",UTF-8 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
134	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
135	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes( "UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes( "UTF-8 ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes( "UTF-8 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
136	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".UTF-8 ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".UTF-8 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
137	[BUG]  [BUGGY]  byte[]  b  =  val.trim();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.trim();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.trim();	  final    byte[]    b    =    buf.trim();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
138	[BUG]  [BUGGY]  final  byte[]  buf  =  val.trim();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  buf  =  val.trim();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  buf  =  val.trim();	  final    byte[]    b    =    buf.trim();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
139	[BUG]  [BUGGY]  final  byte[]  b  =  buf.getBytes(val);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.getBytes(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.getBytes(val);	  final    byte[]    b    =    buf.trim();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
140	[BUG]  [BUGGY]  final  byte[]  b  =  val.length  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length  +  1;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
141	[BUG]  [BUGGY]  final  byte[]  b  =  val.length,  value.length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length,  value.length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length,  value.length;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
142	[BUG]  [BUGGY]  final  byte[]  b  =  val.length,  val.length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length,  val.length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length,  val.length;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
143	[BUG]  [BUGGY]  final  byte[]  b  =  value.length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.length;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
144	[BUG]  [BUGGY]  final  byte[]  b  =  buf.intValue();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.intValue();	  final    byte[]    b    =    value.intValue();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
145	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  /  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  /  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  /  1;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
146	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  2;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  *  2;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
147	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  4;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  4;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  *  4;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
148	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray()  /  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray()  /  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray()  /  1;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
149	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray()  *  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.toByteArray()  *  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray()  *  1;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  length,  negative?  0xff  :  val);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  length,  negative?  0xff  :  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off  +  length,  negative?  0xff  :  val);	  System.arraycopy(b,    0,    buf,    offset    +    length,    negative?    0xff    :    val);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  val,  negative?  0xff  :  val);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  val,  negative?  0xff  :  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset  +  length,  val,  negative?  0xff  :  val);	  System.arraycopy(b,    0,    buf,    offset    +    length,    negative?    0xff    :    val);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  value?  0xff  :  val);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  value?  0xff  :  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset  +  length,  value?  0xff  :  val);	  System.arraycopy(b,    0,    buf,    offset    +    length,    negative?    0xff    :    val);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative?  0xff  :  val);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative?  0xff  :  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(buf,  0,  buf,  offset  +  length,  negative?  0xff  :  val);	  System.arraycopy(b,    0,    buf,    offset    +    length,    negative?    0xff    :    val);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
154	[BUG]  [BUGGY]  final  byte[]  b  =  buf.longValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.longValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.longValue();	  final    byte[]    b    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.toByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray()  +  1;	  final    byte[]    b    =    value.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
156	[BUG]  [BUGGY]  final  byte[]  b  =  data.toByteArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  data.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  data.toByteArray();	  final    byte[]    b    =    value.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(boolean  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(boolean  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(boolean  negative);	  byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
158	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(buf,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(buf,  negative);	  byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
159	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(value,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(value,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(value,  negative);	  byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
160	[BUG]  [BUGGY]  final  BigInteger  b  =  BigInteger.valueOf(val);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  BigInteger  b  =  BigInteger.valueOf(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  BigInteger  b  =  BigInteger.valueOf(val);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
161	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.parseBigInteger(value);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
162	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.valueOf(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(0);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
163	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(buf);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.parseBigInteger(buf);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
164	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.valueOf(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(negative);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
165	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.valueOf(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(buf);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
166	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ",  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ",  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ",  negative);	  final    byte[]    b    =    val.getBytes(   ",UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
167	[BUG]  [BUGGY]  BigInteger  b  =  value.intValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  value.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  value.intValue();	  BigInteger    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
168	[BUG]  [BUGGY]  BigInteger  b  =  val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.intValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.intValue()  +  1;	  BigInteger    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
169	[BUG]  [BUGGY]  BigInteger  b  =  buf.intValue();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  buf.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  buf.intValue();	  BigInteger    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
170	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytesArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytesArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytesArray();	  final    byte[]    b    =    val.getBytesArray();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
171	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().toByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray()  +  1;	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
172	[BUG]  [BUGGY]  final  byte[]  b  =  value.trim().toByteArray();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.trim().toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.trim().toByteArray();	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
173	[BUG]  [BUGGY]  final  byte[]  b  =  buf.trim().toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.trim().toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.trim().toByteArray();	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
174	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().intValue();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().intValue();	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
175	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().getBytes();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().getBytes();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().getBytes();	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
176	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().substring(0,  val.length()  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().substring(0,  val.length()  -  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().substring(0,  val.length()  -  1);	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
177	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(length);	  final    byte[]    b    =    val.toByteArray(negative);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
178	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(value,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(value,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(value,  negative);	  final    byte[]    b    =    val.getBytes(value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
179	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(value  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(value  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(value  +  1);	  final    byte[]    b    =    val.getBytes(value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
180	[BUG]  [BUGGY]  final  byte[]  b  =  value.binary();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.binary();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.binary();	  final    byte[]    b    =    val.binary();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
181	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset,  negative);	  final    byte[]    b    =    val.toByteArray(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
182	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)value.clone();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)value.clone();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)value.clone();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
183	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.getValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.getValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.getValue();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
184	[BUG]  [BUGGY]  final  BigInteger  b  =(BigInteger)val.clone();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  BigInteger  b  =(BigInteger)val.clone();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  BigInteger  b  =(BigInteger)val.clone();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
185	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.cloneByte();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.cloneByte();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.cloneByte();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
186	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.s.IFJDCS ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.s.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.s.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
187	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.IFJDCS ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "BigInteger.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
188	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.BYTE_MASK ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "BigInteger.BYTE_MASK ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "BigInteger.BYTE_MASK ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
189	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(boolean);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(boolean);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(boolean);	  final    byte[]    b    =    val.getBytes(negative);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
190	[BUG]  [BUGGY]  final  byte[]  b  =  val.longValue()  *  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.longValue()  *  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.longValue()  *  1;	  final    byte[]    b    =    val.longValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
191	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(buf,  offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(buf,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(buf,  offset);	  byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
192	[BUG]  [BUGGY]  byte[]  b  =  value.toByteArray(buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  value.toByteArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.toByteArray(buf);	  byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
193	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(boolean  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(boolean  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(boolean  negative);	  final    byte[]    b    =    value.toByteArray(val);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
194	[BUG]  [BUGGY]  final  int  len  =  val.length()  +  1;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  +  1;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
195	[BUG]  [BUGGY]  final  int  len  =  val.length()  *  2;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  *  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  *  2;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
196	[BUG]  [BUGGY]  final  int  len  =  value.length();  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  value.length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  value.length();	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
197	[BUG]  [BUGGY]  final  int  len  =  val.length()  +  2;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  +  2;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
198	[BUG]  [BUGGY]  final  int  len  =  val.length()  -  1;  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  -  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  -  1;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
199	[BUG]  [BUGGY]  final  int  len  =  val.length()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  *  BYTE_MASK;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  *  BYTE_MASK;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
200	[BUG]  [BUGGY]  byte[]  b  =  val.longValue();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.longValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.longValue();	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
201	[BUG]  [BUGGY]  byte[]  b  =  val.doubleValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.doubleValue();	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
202	[BUG]  [BUGGY]  byte[]  b  =  val.booleanValue();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.booleanValue();	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
203	[BUG]  [BUGGY]  byte[]  b  =  value.intValue();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  value.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.intValue();	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
204	[BUG]  [BUGGY]  byte[]  b  =  val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.intValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.intValue()  +  1;	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
205	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(booleanValue,  negative);	  final    byte[]    b    =    val.getByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
206	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(negative);	  final    byte[]    b    =    val.getByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
207	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue,  value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(booleanValue,  value);	  final    byte[]    b    =    val.getByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
208	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getByteArray(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteArray(booleanValue);	  final    byte[]    b    =    val.getByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  val.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off,  val.length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off,  length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(buf,  0,  buf,  off,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(buf,  0,  buf,  off,  length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  val,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(buf,  0,  val,  offset,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(buf,  0,  val,  offset,  length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  val);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off,  val);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  value.length);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  value.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off,  value.length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(b,  0,  val,  offset,  length);  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  val,  offset,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  val,  offset,  length);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
216	[BUG]  [BUGGY]  final  BigInteger  b  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  BigInteger  b  =  BigInteger.valueOf(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  BigInteger  b  =  BigInteger.valueOf(value);	  BigInteger    b    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
217	[BUG]  [BUGGY]  final  byte[]  b  =  val.intValue()  *  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.intValue()  *  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.intValue()  *  1;	  final    byte[]    b    =    val.intValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
218	[BUG]  [BUGGY]  final  byte[]  b  =  this.buffer.toByteArray();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  this.buffer.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  this.buffer.toByteArray();	  final    byte[]    b    =    buffer.toByteArray();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
219	[BUG]  [BUGGY]  final  byte[]  b  =  buffer.toByteArray(val);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buffer.toByteArray(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buffer.toByteArray(val);	  final    byte[]    b    =    buffer.toByteArray();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
220	[BUG]  [BUGGY]  final  byte[]  b  =  val.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.doubleValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.doubleValue()  +  1;	  final    byte[]    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
221	[BUG]  [BUGGY]  final  byte[]  b  =  value.doubleValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.doubleValue();	  final    byte[]    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
222	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(false);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(false);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
223	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(true,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(true,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(true,  negative);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
224	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(true,  false);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(true,  false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(true,  false);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
225	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(false,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(false,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(false,  negative);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
226	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(true,  value);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(true,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(true,  value);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
227	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryChar();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryChar();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryChar();	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
228	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryBinary();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryBinary();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryBinary();	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
229	[BUG]  [BUGGY]  final  byte[]  b  =  value.binaryValue();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.binaryValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.binaryValue();	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
230	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryData();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryData();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryData();	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
231	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(true);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(true);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(true);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
232	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(offset);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
233	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(value);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
234	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(booleanValue);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(booleanValue);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
235	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(buf);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(buf);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
236	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  0,  val.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(buf,  0,  val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(buf,  0,  val.length);	  final    byte[]    b    =    val.getBytes(buf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
237	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray(value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.toByteArray(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray(value);	  final    byte[]    b    =    value.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
238	[BUG]  [BUGGY]  final  byte[]  buf  =  val.toByteArray(buf);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  buf  =  val.toByteArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  buf  =  val.toByteArray(buf);	  final    byte[]    b    =    value.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
239	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.toByteArray(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray(booleanValue);	  final    byte[]    b    =    value.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
240	[BUG]  [BUGGY]  BigInteger  b  =  val.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.doubleValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.doubleValue()  +  1;	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
241	[BUG]  [BUGGY]  BigInteger  b  =  value.doubleValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  value.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  value.doubleValue();	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
242	[BUG]  [BUGGY]  BigInteger  b  =  val.doubleValue()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.doubleValue()  *  BYTE_MASK;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.doubleValue()  *  BYTE_MASK;	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
243	[BUG]  [BUGGY]  BigInteger  b  =  buf.doubleValue();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  buf.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  buf.doubleValue();	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
244	[BUG]  [BUGGY]  BigInteger  b  =  val.doubleValue()  +  2;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.doubleValue()  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.doubleValue()  +  2;	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
245	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ",  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ",  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ",  negative);	  final    byte[]    b    =    val.getBytes(   "US-ASCII   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
246	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "ASCII ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "ASCII ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "ASCII ");	  final    byte[]    b    =    val.getBytes(   "US-ASCII   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
247	[BUG]  [BUGGY]  byte  field  =  val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.intValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.intValue()  +  1;	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
248	[BUG]  [BUGGY]  byte  field  =  val.doubleValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.doubleValue();	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
249	[BUG]  [BUGGY]  byte  field  =  value.intValue();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  value.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  value.intValue();	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
250	[BUG]  [BUGGY]  byte  field  =  val.longValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.longValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.longValue();	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
251	[BUG]  [BUGGY]  byte  field  =  val.intValue()  *  2;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.intValue()  *  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.intValue()  *  2;	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
252	[BUG]  [BUGGY]  final  byte  field  =  val.intValue();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte  field  =  val.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte  field  =  val.intValue();	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
253	[BUG]  [BUGGY]  val.byteValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.byteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.byteValue();	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
254	[BUG]  [BUGGY]  val.setLength(0);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.setLength(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.setLength(0);	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
255	[BUG]  [BUGGY]  val.doubleValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.doubleValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.doubleValue();	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
256	[BUG]  [BUGGY]  val.booleanValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.booleanValue();	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
257	[BUG]  [BUGGY]  val.setLongValue(value);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.setLongValue(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.setLongValue(value);	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
258	[BUG]  [BUGGY]  BigInteger  b  =  val.booleanValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.booleanValue();	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
259	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "US-ASCII   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
260	[BUG]  [BUGGY]  negative  &&(val!=  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  negative  &&(val!=  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	negative  &&(val!=  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
261	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
262	[BUG]  [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
263	[BUG]  [BUGGY]  negative?  null  :  val.intValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  negative?  null  :  val.intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	negative?  null  :  val.intValue();	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
264	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(value,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(value,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(value,  negative);	  final    byte[]    b    =    val.getByteArray(value);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
265	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteArray(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray(booleanValue);	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
266	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray(buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray(buf);	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
267	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteArray(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray(value);	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
268	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray(true);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteArray(true);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray(true);	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
269	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray()  +  1;	  byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
270	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(offset,  length);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
271	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset  +  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset  +  1);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val,  0);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val,  0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val,  0);	  System.arraycopy(b,    0,    buf,    offset    +    length,    negative?    0xff    :    val);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
273	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(buf);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray(buf);	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
274	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray(value);	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
275	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray()  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().toByteArray()  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray()  +  2;	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
276	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(idx));  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(idx));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(idx));	  final    byte[]    b    =    val.getBytes(   ".UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	80	None	replace
277	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").length();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ").length();	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
278	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toByteArray();	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
279	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ").length;	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
280	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
281	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(null);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(null);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(null);	  final    byte[]    b    =    value.toByteArray(val);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
282	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative));  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative));	  final    byte[]    b    =    value.toByteArray(val);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
283	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryKey();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryKey();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryKey();	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
284	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryValue(buf);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryValue(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryValue(buf);	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
285	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryValue(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.binaryValue(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryValue(value);	  final    byte[]    b    =    val.binaryValue();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
286	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(negative);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
287	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray()  +  1;	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
288	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-16 ").toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-16 ").toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-16 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
289	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(1).toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(1).toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(1).toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").toByteArray();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
290	[BUG]  [BUGGY]  final  byte[]  b  =  val.length  +  2;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length  +  2;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
291	[BUG]  [BUGGY]  final  byte[]  b  =  val.intValue;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.intValue;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.intValue;	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
292	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  3;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  3;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  *  3;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
293	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(positive);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(positive);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(positive);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
294	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(full);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(full);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(full);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
295	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buffer);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  buffer);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  buffer);	  final    byte[]    b    =    val.toByteArray(buf,    value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
296	[BUG]  [BUGGY]  final  byte[]  b  =  val.byteByteValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.byteByteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.byteByteValue();	  final    byte[]    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
297	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  booleanValue);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative,  booleanValue);	  final    byte[]    b    =    val.getBytes(booleanValue);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
298	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  buf);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative,  buf);	  final    byte[]    b    =    val.getBytes(negative);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
299	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative,  value);	  final    byte[]    b    =    val.getBytes(negative);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
300	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative,  length);	  final    byte[]    b    =    val.getBytes(negative);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
301	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.byteValue();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.byteValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.byteValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
302	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.booleanValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.booleanValue();	  BigInteger    b    =(BigInteger)val.intValue();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
303	[BUG]  [BUGGY]  BigInteger  b  =(bigInteger)val.clone();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(bigInteger)val.clone();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(bigInteger)val.clone();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
304	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(BigInteger)val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.toByteArray();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
305	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray()  +  1L;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray()  +  1L;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray()  +  1L;	  final    byte[]    b    =    val.getByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
306	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(1);	  final    byte[]    b    =    val.getByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
307	[BUG]  [BUGGY]  final  byte[]  b  =  values.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  values.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  values.toByteArray();	  final    byte[]    b    =    value.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
308	[BUG]  [BUGGY]  final  byte[]  b  =  buffer.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buffer.toByteArray()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buffer.toByteArray()  +  1;	  final    byte[]    b    =    buffer.toByteArray();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
309	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer(32);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteBuffer(32);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer(32);	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
310	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer(16);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteBuffer(16);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer(16);	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
311	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer(0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteBuffer(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer(0);	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
312	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(positive);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(positive);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(positive);	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
313	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative,  value);	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
314	[BUG]  [BUGGY]  final  byte[]  b  =  val.floatValue();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.floatValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.floatValue();	  final    byte[]    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
315	[BUG]  [BUGGY]  final  byte[]  b  =  val.doubleValue()  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.doubleValue()  +  2;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.doubleValue()  +  2;	  final    byte[]    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
316	[BUG]  [BUGGY]  byte  field  =  val.booleanValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.booleanValue();	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
317	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(value);	  final    byte[]    b    =    value.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
318	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.toByteArray(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(negative);	  final    byte[]    b    =    value.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
319	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray(val);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.toByteArray(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray(val);	  final    byte[]    b    =    buf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
320	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray()  [0];  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray()  [0];  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray()  [0];	  byte[]    b    =    val.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
321	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(false,  false);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(false,  false);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(false,  false);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
322	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(false,  value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(false,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(false,  value);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
323	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(null);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(null);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(null);	  byte[]    b    =    val.toByteArray(true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset,  length,  negative);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length  -  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset,  length  -  1);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
326	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytesArray(buf);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytesArray(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytesArray(buf);	  final    byte[]    b    =    val.getBytesArray();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
327	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").booleanValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").booleanValue();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
328	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toInt();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toInt();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").toInt();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
329	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "false.IFJDCS ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "false.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "false.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
330	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "JDCS ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "JDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "JDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
331	[BUG]  [BUGGY]  final  byte[]  b  =  val.longValue()  +  1L;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.longValue()  +  1L;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.longValue()  +  1L;	  final    byte[]    b    =    val.longValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
332	[BUG]  [BUGGY]  final  byte[]  b  =  val  ==  null?  null  :  val.booleanValue();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val  ==  null?  null  :  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val  ==  null?  null  :  val.booleanValue();	  final    byte[]    b    =    val.booleanValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
333	[BUG]  [BUGGY]  final  byte[]  b  =  val!=  null?  null  :  val.booleanValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val!=  null?  null  :  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val!=  null?  null  :  val.booleanValue();	  final    byte[]    b    =    val.booleanValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
334	[BUG]  [BUGGY]  final  byte[]  b  =  val!=  null?  BigInteger.ZERO  :  val.booleanValue();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val!=  null?  BigInteger.ZERO  :  val.booleanValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val!=  null?  BigInteger.ZERO  :  val.booleanValue();	  final    byte[]    b    =    val.booleanValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
335	[BUG]  [BUGGY]  final  byte[]  b  =  val.fromByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.fromByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.fromByteArray();	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
336	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(offset);	  final    byte[]    b    =    val.getByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
337	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(data);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(data);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(data);	  final    byte[]    b    =    val.getByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
338	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(boolean);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(boolean);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(boolean);	  byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
339	[BUG]  [BUGGY]  final  int  len  =  val.length()  +  length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length()  +  length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length()  +  length;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
340	[BUG]  [BUGGY]  final  int  len  =  val.length;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
341	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(buf);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(buf);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(buf);	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
342	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(value);	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
343	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(binary,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(binary,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(binary,  negative);	  final    byte[]    b    =    val.toByteArray(binary);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
344	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ".UTF-8 ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ".UTF-8 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ".UTF-8 ");	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
345	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
346	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ").trim();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ").trim();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( "UTF-8 ").trim();	  byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
347	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").charAt(0);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").charAt(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").charAt(0);	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
348	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toCharArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toCharArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").toCharArray();	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
349	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").charAt(0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ").charAt(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ").charAt(0);	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
350	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").trim());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").trim());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ").trim());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
351	[BUG]  [BUGGY]  final  byte[]  b  =  buf.length();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  buf.length();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.length();	  final    byte[]    b    =    val.length();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
352	[BUG]  [BUGGY]  final  byte[]  b  =  value.longValue()  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.longValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.longValue()  +  1;	  final    byte[]    b    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
353	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
354	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
355	[BUG]  [BUGGY]  if(val!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
356	[BUG]  [BUGGY]  val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.intValue()  +  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.intValue()  +  1;	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
357	[BUG]  [BUGGY]  final  byte[]  b  =  value.trim().intValue();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.trim().intValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.trim().intValue();	  final    byte[]    b    =    value.trim();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
358	[BUG]  [BUGGY]  final  byte[]  b  =  value.split( "u000 ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.split( "u000 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.split( "u000 ");	  final    byte[]    b    =    value.trim();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
359	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(booleanValue());	  final    byte[]    b    =    val.getBytes(buf);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
360	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(offset  +  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(offset  +  length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(offset  +  length);	  final    byte[]    b    =    val.getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
361	[BUG]  [BUGGY]  byte[]  b  =  val.binaryValue();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.binaryValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.binaryValue();	  byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
362	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  -  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray()  -  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  -  1;	  final    byte[]    b    =    val.toByteArray()    *    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
363	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  val.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  val.length);	  final    byte[]    b    =    val.toByteArray(value,    negative);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
364	[BUG]  [BUGGY]  final  byte[]  b  =  val.split( ", ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.split( ", ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.split( ", ");	  final    byte[]    b    =    buf.trim();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
365	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(val);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.parseBigInteger(val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.parseBigInteger(val);	  BigInteger    b    =    BigInteger.valueOf(val);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
366	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(begin);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(begin);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(begin);	  final    byte[]    b    =    value.toByteArray(val);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
367	[BUG]  [BUGGY]  final  byte[]  b  =  val.length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.length,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length,  negative);	  final    byte[]    b    =    val.length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
368	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(binary);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(binary);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(binary);	  byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
369	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
370	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
371	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ").length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "js.IFJDCS ").length;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "js.IFJDCS ").length;	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
372	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictByNotNullOrUndefined();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictByNotNullOrUndefined();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").restrictByNotNullOrUndefined();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
373	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").split( "u000 ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").split( "u000 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").split( "u000 ");	  final    byte[]    b    =    val.getBytes(   "UTF-8   ").trim();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
374	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(this.value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteArray(this.value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(this.value);	  final    byte[]    b    =    val.getByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
375	[BUG]  [BUGGY]  ByteArray  b  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  ByteArray  b  =  val.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	ByteArray  b  =  val.toByteArray();	  byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
376	[BUG]  [BUGGY]  BigInteger  b  =  val.floatValue();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.floatValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.floatValue();	  BigInteger    b    =    val.doubleValue();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
377	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
378	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.sql.IFJDCS ").length());	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
379	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(val.intValue());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(val.intValue());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(val.intValue());	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
380	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes(val.longValue());  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getBytes(val.longValue());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes(val.longValue());	  final    byte[]    b    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
381	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".charAt(0));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ".charAt(0));	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
382	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".charAt(0));  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "i.s.IFJDCS ".charAt(0));	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
383	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ").charAt(0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ").charAt(0);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "java.util.Arrays.IFJDCS ").charAt(0);	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
384	[BUG]  [BUGGY]  BigInteger  b  =  val.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  val.parseBigInteger(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.parseBigInteger(value);	  BigInteger    b    =    val.byteValue();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
385	[BUG]  [BUGGY]  byte  field  =  val.intValue()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte  field  =  val.intValue()  *  BYTE_MASK;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.intValue()  *  BYTE_MASK;	  byte    field    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
386	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(positive);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.toByteArray(positive);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(positive);	  byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
387	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  offset);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(offset,  offset);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(offset,  offset);	  final    byte[]    b    =    val.toByteArray(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
388	[BUG]  [BUGGY]  final  byte[]  b  =  value.trim().toLowerCase();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.trim().toLowerCase();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.trim().toLowerCase();	  final    byte[]    b    =    value.trim();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
389	[BUG]  [BUGGY]  final  byte[]  b  =  val.split( "u000 ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.split( "u000 ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.split( "u000 ");	  final    byte[]    b    =    value.trim();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
390	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(intValue  +  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(intValue  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(intValue  +  1);	  final    byte[]    b    =    val.getBytes(intValue);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
391	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(intValue,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(intValue,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(intValue,  negative);	  final    byte[]    b    =    val.getBytes(intValue);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
392	[BUG]  [BUGGY]  tryFallThrough(val.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  tryFallThrough(val.getValue()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	tryFallThrough(val.getValue()))  {  throw  new  IllegalArgumentException( " ");  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
393	[BUG]  [BUGGY]  tryFallThrough(val)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  tryFallThrough(val)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	tryFallThrough(val)  {  throw  new  IllegalArgumentException( " ");  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
394	[BUG]  [BUGGY]  try  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  try  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	try  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
395	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  [Delete]  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	[Delete]	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
396	[BUG]  [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(val!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
397	[BUG]  [BUGGY]  final  byte[]  b  =  val.valueToByteArray();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.valueToByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.valueToByteArray();	  final    byte[]    b    =    buffer.toByteArray();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
398	[BUG]  [BUGGY]  BigInteger  b  =(Byte)val.clone();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =(Byte)val.clone();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(Byte)val.clone();	  BigInteger    b    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
399	[BUG]  [BUGGY]  final  byte[]  b  =  key.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  key.toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  key.toByteArray();	  final    byte[]    b    =    value.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
400	[BUG]  [BUGGY]  val.setLength(length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  val.setLength(length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.setLength(length);	  val.intValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
401	[BUG]  [BUGGY]  final  int  len  =  val.length  -  1;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  int  len  =  val.length  -  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length  -  1;	  final    int    len    =    val.length();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
402	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteArray(buf,  0,  val.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  value.getByteArray(buf,  0,  val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteArray(buf,  0,  val.length);	  final    byte[]    b    =    value.getByteArray();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
403	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val.length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val.length);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative,  val.length);	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
404	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative).toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative).toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative).toByteArray();	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
405	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val.intValue());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(negative,  val.intValue());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative,  val.intValue());	  final    byte[]    b    =    val.toByteArray(boolean    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
406	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(intValue);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(intValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(intValue);	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
407	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes(booleanValue());  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  byte[]  b  =  val.getBytes(booleanValue());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes(booleanValue());	  byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
408	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.trim().toByteArray(negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray(negative);	  final    byte[]    b    =    val.trim().toByteArray();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
409	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value  +  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(value  +  1);	  BigInteger    b    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
410	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value,  negative);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(value,  negative);	  BigInteger    b    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
411	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(value)+  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(value)+  1;  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(value)+  1;	  final    byte[]    b    =    val.getBytes(value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
412	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(value).toByteArray();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(value).toByteArray();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(value).toByteArray();	  final    byte[]    b    =    val.getBytes(value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
413	[BUG]  [BUGGY]  final  byte[]  b  =  (val.toByteArray());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  (val.toByteArray());  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  (val.toByteArray());	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
414	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(1);	  final    byte[]    b    =    val.toByteArray()    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
415	[BUG]  [BUGGY]  if(val  ==  null  ||  val.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val  ==  null  ||  val.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null  ||  val.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
416	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
417	[BUG]  [BUGGY]  if(val  ==  null  ||  val.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val  ==  null  ||  val.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null  ||  val.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
418	[BUG]  [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
419	[BUG]  [BUGGY]  if(val  ==  null  ||  val.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  if(val  ==  null  ||  val.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null  ||  val.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  length  -  1);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  length  -  1);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  off,  length  -  1);	  System.arraycopy(b,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
421	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(type);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(type);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(type);	  final    byte[]    b    =    val.getBytes(negative);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
422	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  true);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes(negative,  true);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative,  true);	  final    byte[]    b    =    val.getBytes(true);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
423	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBinaryValue();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBinaryValue();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBinaryValue();	  final    byte[]    b    =    val.binary();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
424	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteData();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getByteData();  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteData();	  final    byte[]    b    =    val.getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
425	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  val);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  val);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  val);	  final    byte[]    b    =    val.toByteArray(buf,    value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
426	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  value);	  final    byte[]    b    =    val.toByteArray(buf,    value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
427	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(positive);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
428	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytesArray(booleanValue);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytesArray(booleanValue);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytesArray(booleanValue);	  final    byte[]    b    =    val.getBytesArray();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
429	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytesArray(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytesArray(value);  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytesArray(value);	  final    byte[]    b    =    val.getBytesArray();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
430	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "int ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);      [BUGGY]  final  byte[]  b  =  val.getBytes( "int ");  [BUGGY]      final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "int ");	  final    byte[]    b    =    val.getBytes(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
