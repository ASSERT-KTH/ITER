bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length);	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( "US-ASCII ");  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "US-ASCII ");	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ");  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ");	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ",UTF-8 ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ",UTF-8 ");  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ",UTF-8 ");	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".length());	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  final  byte[]  b  =  buf.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  buf.toByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.toByteArray();	  final    byte[]    b    =    val.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray()  *  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  *  1;	  final    byte[]    b    =    val.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.getBytes();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes();	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  byte[]  b  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  value.toByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  value.toByteArray();	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  byte[]  b  =  val.getByteArray();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.getByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getByteArray();	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.getBytes( "UTF-8 ");  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.getBytes( "UTF-8 ");	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  final  byte[]  b  =  val.length();  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.length();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length();	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  final  byte[]  b  =  val.doubleValue();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.doubleValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.doubleValue();	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  final  byte[]  b  =  value.longValue();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.longValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.longValue();	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  final  byte[]  b  =  val.length;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.length;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.length;	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  final  byte[]  b  =  value.getBytes();  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.getBytes();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getBytes();	  final    byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(val);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.toByteArray(val);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(val);	  final    byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.toByteArray()  +  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray()  +  1;	  final    byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(true);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(true);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(true);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(value);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(value);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(offset);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(offset);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(offset);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(booleanValue);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(booleanValue);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(buf);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(buf);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(buf);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean  negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean  negative);	  final    byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  negative);	  final    byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(value,  negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(value,  negative);	  final    byte[]    b    =    val.toByteArray(value);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  offset);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  offset);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(buf);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.toByteArray(buf);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(buf);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  value);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(buf,  value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(buf,  value);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  final  byte[]  b  =  val.byteValue();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.byteValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.byteValue();	  final    byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  final  byte[]  b  =  val.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.intValue()  +  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.intValue()  +  1;	  final    byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  final  byte[]  b  =  value.intValue();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.intValue();	  final    byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytesArray();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytesArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytesArray();	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  final  byte[]  b  =  value.getByteArray();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.getByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.getByteArray();	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteBuffer();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getByteBuffer();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteBuffer();	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  val  =  BigInteger.valueOf(value);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.clone();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =(BigInteger)val.clone();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.clone();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  BigInteger  b  =  val.intValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =  val.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.intValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  val.intValue();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  val.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	val.intValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  BigInteger  b  =(BigInteger)val.intValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =(BigInteger)val.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =(BigInteger)val.intValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  BigInteger  b  =  val.byteValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =  val.byteValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.byteValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  final  int  len  =  val.length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  int  len  =  val.length();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  int  len  =  val.length();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  final  byte[]  b  =  value.trim();  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.trim();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.trim();	  final    byte[]    b    =    val.trim();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  final  byte[]  b  =  val.trim().toByteArray();  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.trim().toByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.trim().toByteArray();	  final    byte[]    b    =    val.trim();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
45	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(booleanValue,  negative);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(booleanValue,  negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(booleanValue,  negative);	  final    byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  final  byte[]  b  =  value.toByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  value.toByteArray(booleanValue);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  value.toByteArray(booleanValue);	  final    byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(negative);	  final    byte[]    b    =    val.toByteArray(booleanValue);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.toByteArray()  +  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray()  +  1;	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
49	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.toByteArray(booleanValue);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(booleanValue);	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(buf);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.toByteArray(buf);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(buf);	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(true);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.toByteArray(true);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(true);	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.toByteArray(value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.toByteArray(value);	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
53	[BUG]  [BUGGY]  final  byte[]  b  =  val.longValue()  +  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.longValue()  +  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.longValue()  +  1;	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
54	[BUG]  [BUGGY]  final  byte[]  b  =  val.booleanValue();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.booleanValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.booleanValue();	  final    byte[]    b    =    val.longValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
55	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =  BigInteger.valueOf(value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(value);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  BigInteger  b  =  BigInteger.valueOf(val);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =  BigInteger.valueOf(val);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  BigInteger.valueOf(val);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset  +  length,  negative?  0xff  :  val);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  length);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	System.arraycopy(b,  0,  buf,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getByteArray(booleanValue);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(booleanValue);	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
61	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(buf);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getByteArray(buf);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(buf);	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
62	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getByteArray()  +  1;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray()  +  1;	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  final  byte[]  b  =  val.getByteArray(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getByteArray(value);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getByteArray(value);	  final    byte[]    b    =    val.getByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
64	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray()  +  2;  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  +  2;	  final    byte[]    b    =    val.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(boolean);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(boolean);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(data);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(data);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(data);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
67	[BUG]  [BUGGY]  final  byte[]  b  =  buf.trim();  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  buf.trim();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buf.trim();	  final    byte[]    b    =    val.trim();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
68	[BUG]  [BUGGY]  final  byte[]  b  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  buffer.toByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  buffer.toByteArray();	  final    byte[]    b    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
69	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").toByteArray();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".s.IFJDCS ".charAt(0));	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").trim();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( "UTF-8 ").trim();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( "UTF-8 ").trim();	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  final  byte[]  b  =  val.binaryValue();  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.binaryValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binaryValue();	  final    byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  final  byte[]  b  =  val.binary();  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.binary();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.binary();	  final    byte[]    b    =    val.intValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset];  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray()  [offset];  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray()  [offset];	  final    byte[]    b    =    val.toByteArray()    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
75	[BUG]  [BUGGY]  if(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  if(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	if(val!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  BigInteger  b  =  val.doubleValue();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  BigInteger  b  =  val.doubleValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	BigInteger  b  =  val.doubleValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
77	[BUG]  [BUGGY]  byte  field  =  val.intValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte  field  =  val.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte  field  =  val.intValue();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
78	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(negative);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(negative);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(negative);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes(intValue);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes(intValue);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes(intValue);	  final    byte[]    b    =    val.getBytes();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
80	[BUG]  [BUGGY]  final  byte[]  b  =  val.getBytes( ".UTF-8 ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.getBytes( ".UTF-8 ");  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.getBytes( ".UTF-8 ");	  final    byte[]    b    =    val.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  final  byte[]  b  =  val.toByteArray(binary);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  final  byte[]  b  =  val.toByteArray(binary);  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	final  byte[]  b  =  val.toByteArray(binary);	  final    byte[]    b    =    val.toByteArray(buf);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
82	[BUG]  [BUGGY]  byte[]  b  =  val.intValue();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);    [BUGGY]  byte[]  b  =  val.intValue();  [BUGGY]    final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	520	520	1	replace	byte[]  b  =  val.intValue();	  byte[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
