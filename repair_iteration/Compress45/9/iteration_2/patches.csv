bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
2	[BUG]  [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
3	[BUG]  [BUGGY]  while(val  <  =  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  <  =  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  <  =  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
4	[BUG]  [BUGGY]  if(length  >  1)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  1)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  1)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  val  |=  0xfff  &  buf.length  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  buf.length  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  buf.length  -  1;	  val    |=    0xfff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
7	[BUG]  [BUGGY]  val  |=  0xfff  &  buf.length  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  buf.length  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  buf.length  +  1;	  val    |=    0xfff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
8	[BUG]  [BUGGY]  val  -=  0xfff  &  buf.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfff  &  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfff  &  buf.length;	  val    |=    0xfff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
9	[BUG]  [BUGGY]  val  &=  0xfff  &  buf.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  buf.length;	  val    |=    0xfff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
10	[BUG]  [BUGGY]  val  -=  0xffffl  -  value;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl  -  value;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
11	[BUG]  [BUGGY]  val  |=  0xffff  -  value.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  value.length;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
12	[BUG]  [BUGGY]  val  |=  value  -  0xffffl;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  -  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  -  0xffffl;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
13	[BUG]  [BUGGY]  val  |=  0xffff  -  value  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  value  +  1;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
16	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
18	[BUG]  [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
20	[BUG]  [BUGGY]  val  |=  0xfff  &  value.length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  value.length;	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
21	[BUG]  [BUGGY]  val  |=  0xfff  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  value.longValue();	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
22	[BUG]  [BUGGY]  val  |=  value  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xfff;	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
23	[BUG]  [BUGGY]  val  |=  0xfff  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  value  +  1;	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
24	[BUG]  [BUGGY]  val  &=  0xfff  &  value;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  value;	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
31	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
32	[BUG]  [BUGGY]  val  |=  0xff  &  value.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  value.length;	  val    |=    0xff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
33	[BUG]  [BUGGY]  val  |=  0xff  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  value.longValue();	  val    |=    0xff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  val  |=  0xff  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  value  +  1;	  val    |=    0xff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
35	[BUG]  [BUGGY]  val  |=  0xff  &  value.longValue;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  value.longValue;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  value.longValue;	  val    |=    0xff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
36	[BUG]  [BUGGY]  val  |=  0xfffL  &  0xff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  &  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  &  0xff;	  val    |=    0xfffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
37	[BUG]  [BUGGY]  val  |=  0xfffl  -  0xfff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  0xfff;	  val    |=    0xfffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
38	[BUG]  [BUGGY]  val  |=  0xfffl  -  0xff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  0xff;	  val    |=    0xfffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
39	[BUG]  [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
40	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
41	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
42	[BUG]  [BUGGY]  val  |=  val  -  offset;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  -  offset;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
43	[BUG]  [BUGGY]  val  -=  val;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  val;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
44	[BUG]  [BUGGY]  val  |=  val  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  -  1;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
45	[BUG]  [BUGGY]  val  |=  val  /  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  /  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  /  bits;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
46	[BUG]  [BUGGY]  val  |=  value  -  bits;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  -  bits;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
47	[BUG]  [BUGGY]  val  -=  0xffff  -  value;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  -  value;	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  val  |=  value  -  0xffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  -  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  -  0xffff;	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  val  |=  0xffff  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  BYTE_MASK  +  1;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
50	[BUG]  [BUGGY]  val  &=  0xffff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  BYTE_MASK;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
51	[BUG]  [BUGGY]  val  -=  0xffff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  BYTE_MASK;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
52	[BUG]  [BUGGY]  val  |=  max  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  BYTE_MASK;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
53	[BUG]  [BUGGY]  val  -=  0xffff  &  value;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  value;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
54	[BUG]  [BUGGY]  val  -=  max  &  bits;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  max  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  max  &  bits;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
55	[BUG]  [BUGGY]  val  -=  0xffff  &  val;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  val;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
56	[BUG]  [BUGGY]  val  -=  0xffff  &  offset;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  offset;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
57	[BUG]  [BUGGY]  val  -=  0xffff  &  max;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  max;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
58	[BUG]  [BUGGY]  val  -=  0xffff  &  buf.length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  buf.length;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
59	[BUG]  [BUGGY]  val  |=  0xffff  &  value.length;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  value.length;	  val    |=    0xffff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  val  |=  value  &  0xffff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xffff;	  val    |=    0xffff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  val  |=  0xffff  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  value  +  1;	  val    |=    0xffff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  val  |=  0xffff  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  value.longValue();	  val    |=    0xffff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  val  |=  0xffffl  -  0xfff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  0xfff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
64	[BUG]  [BUGGY]  val  |=  0xfffffl  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  0xfff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
65	[BUG]  [BUGGY]  val  |=  0xfffffl  &  0xff;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  0xff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
66	[BUG]  [BUGGY]  val  |=  0xfffffl  -  0xfff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  0xfff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
67	[BUG]  [BUGGY]  val  |=  0xffffL  &  0xff;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  &  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  &  0xff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
68	[BUG]  [BUGGY]  val  -=  0xffffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl;	  val    |=    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
69	[BUG]  [BUGGY]  val  &=  0xffffl;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl;	  val    |=    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
70	[BUG]  [BUGGY]  val  -=  0xffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff;	  val    |=    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
71	[BUG]  [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  BYTE_MASK  +  1;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
72	[BUG]  [BUGGY]  val  &=  0xfff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  BYTE_MASK;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
73	[BUG]  [BUGGY]  val  -=  0xfff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfff  &  BYTE_MASK;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
74	[BUG]  [BUGGY]  val  |=  0xffffffl  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  offset  +  length;	  val    |=    0xfffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  offset  +  length;	  val    |=    0xfffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  val  |=  offset  &  0xffffffl;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  &  0xffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  &  0xffffffl;	  val    |=    0xfffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  offset;	  val    |=    0xfffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  val  |=  0xffffffl  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  offset  +  1;	  val    |=    0xfffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
80	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
84	[BUG]  [BUGGY]  val  |=  0xff  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  BYTE_MASK  +  1;	  val    |=    0xff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
85	[BUG]  [BUGGY]  val  &=  0xff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xff  &  BYTE_MASK;	  val    |=    0xff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
86	[BUG]  [BUGGY]  val  -=  0xff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xff  &  BYTE_MASK;	  val    |=    0xff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
87	[BUG]  [BUGGY]  val  |=  0xfff  &  val  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  val  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  val  +  1;	  val    |=    0xfff    &    val;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
88	[BUG]  [BUGGY]  val  &=  0xfff  &  val;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  val;	  val    |=    0xfff    &    val;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
89	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  value;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  value;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  val  |=  0xffffffffl  &  value;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffffl  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffffl  &  value;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  val  |=  max  &  0xfffffffl;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xfffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xfffffffl;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  max  +  1;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  val  |=  0xfffffffl  -  max;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  -  max;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  val  |=  0xffffffffl  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffffl  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffffl  &  max  +  1;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
95	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  max;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  max;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
96	[BUG]  [BUGGY]  val  |=  0xfffffl  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  offset  +  length;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
97	[BUG]  [BUGGY]  val  |=  0xfffffl  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  offset  +  1;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
98	[BUG]  [BUGGY]  val  -=  0xfffffl  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  -  offset;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  val  |=  0xfffffl  -  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  offset;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  val  |=  0xffffffl  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  -  offset  +  1;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  val  |=  0xffff  &  buf.length  -  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  buf.length  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  buf.length  -  1;	  val    |=    0xffff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
102	[BUG]  [BUGGY]  val  |=  0xffff  &  buf.length  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  buf.length  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  buf.length  +  1;	  val    |=    0xffff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
103	[BUG]  [BUGGY]  val  &=  0xffff  &  buf.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  buf.length;	  val    |=    0xffff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
104	[BUG]  [BUGGY]  val  |=  0xffff  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  offset  +  length;	  val    |=    0xffff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  val  |=  offset  &  0xffff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  &  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  &  0xffff;	  val    |=    0xffff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
106	[BUG]  [BUGGY]  val  |=  0xffff  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  offset  +  1;	  val    |=    0xffff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
107	[BUG]  [BUGGY]  val  |=  max  &  0xfffffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xfffffl;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
108	[BUG]  [BUGGY]  val  |=  0xfffffl  -  max;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  max;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
109	[BUG]  [BUGGY]  val  |=  0xfffffl  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  max  +  1;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
110	[BUG]  [BUGGY]  val  |=  0xfffffl  &  val;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  val;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
111	[BUG]  [BUGGY]  val  |=  0xfffffl  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  offset  +  length;	  val    |=    0xffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
112	[BUG]  [BUGGY]  val  |=  offset  &  0xfffffl;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  &  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  &  0xfffffl;	  val    |=    0xffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
113	[BUG]  [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
114	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
115	[BUG]  [BUGGY]  while(val  <  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  <  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  <  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
116	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
117	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
118	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  limit;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  limit;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  limit;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
119	[BUG]  [BUGGY]  val  |=  max  -  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  -  offset;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
120	[BUG]  [BUGGY]  val  |=  offset  -  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  -  bits;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
121	[BUG]  [BUGGY]  val  |=  max  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  -  1;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
122	[BUG]  [BUGGY]  val  |=  0xffffl  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  BYTE_MASK  +  1;	  val    |=    0xfffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
123	[BUG]  [BUGGY]  val  &=  0xffffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  BYTE_MASK;	  val    |=    0xfffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
124	[BUG]  [BUGGY]  val  |=  0xfffff  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffff  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffff  &  BYTE_MASK;	  val    |=    0xfffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
125	[BUG]  [BUGGY]  val  |=  0xfffffl  /  max;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  max;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  val  |=  0xfffff  /  max;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffff  /  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffff  /  max;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  val  |=  0xfffffl  /  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  offset;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  val  |=  0xffffl  /  max;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  max;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
129	[BUG]  [BUGGY]  val  |=  0xfffffl  /  value;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  value;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  val  |=  0xfffffl  /  2;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  2;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  val  |=  0xfffffl  &  8;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  8;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
132	[BUG]  [BUGGY]  val  |=  0xfffffl  &  0xffff;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  0xffff;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
133	[BUG]  [BUGGY]  val  |=  0xfffffl  -  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  8;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
134	[BUG]  [BUGGY]  val  |=  0xfffffl  <  <  4;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  <  <  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  <  <  4;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
135	[BUG]  [BUGGY]  val  |=  0xfffffl  <  <  8;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  <  <  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  <  <  8;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
136	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
139	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
141	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >>  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
142	[BUG]  [BUGGY]  val  |=  0xffffffffl  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffffl  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffffl  &  offset  +  length;	  val    |=    0xffffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  val  |=  offset  &  0xfffffffl;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  &  0xfffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  &  0xfffffffl;	  val    |=    0xffffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
144	[BUG]  [BUGGY]  val  |=  0xffffffffl  &  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffffl  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffffl  &  offset;	  val    |=    0xffffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  offset  +  1;	  val    |=    0xffffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
146	[BUG]  [BUGGY]  val  |=  0xffff  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  max  +  1;	  val    |=    0xffff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
147	[BUG]  [BUGGY]  val  |=  max  &  0xffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xffff;	  val    |=    0xffff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  val  |=  0xffff  &  val;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  val;	  val    |=    0xffff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
149	[BUG]  [BUGGY]  val  &=  0xffff  &  max;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  max;	  val    |=    0xffff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  val  |=  value  &  0xffffl;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xffffl;	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
151	[BUG]  [BUGGY]  val  |=  0xffffl  &  value.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  value.length;	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
152	[BUG]  [BUGGY]  val  |=  0xfffffl  &  value.length;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  value.length;	  val    |=    0xffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
153	[BUG]  [BUGGY]  val  |=  value  &  0xfffffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xfffffl;	  val    |=    0xffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
154	[BUG]  [BUGGY]  val  |=  0xffffffl  &  value.length;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  value.length;	  val    |=    0xffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
155	[BUG]  [BUGGY]  val  |=  0xfffffl  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  value.longValue();	  val    |=    0xffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
157	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
161	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >>  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
162	[BUG]  [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
163	[BUG]  [BUGGY]  while(val  <  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  <  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  <  max)  {  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
164	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  max;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
165	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
166	[BUG]  [BUGGY]  val  |=  0xfffffl  &  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  1L;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
167	[BUG]  [BUGGY]  val  |=  0xfffffl  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  1;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
168	[BUG]  [BUGGY]  val  |=  0xffffffl  &  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  1L;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
169	[BUG]  [BUGGY]  val  |=  0xfffffl  &  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  1;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
170	[BUG]  [BUGGY]  val  &=  0xfffffl  &  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffffl  &  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffffl  &  1;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
171	[BUG]  [BUGGY]  val  |=  0xfffffl  &  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  2;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
172	[BUG]  [BUGGY]  val  |=  0xfffffl  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  BYTE_MASK  +  1;	  val    |=    0xffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
173	[BUG]  [BUGGY]  val  |=  0xffffffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  BYTE_MASK;	  val    |=    0xffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
174	[BUG]  [BUGGY]  val  &=  0xfffffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffffl  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffffl  &  BYTE_MASK;	  val    |=    0xffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
175	[BUG]  [BUGGY]  val  |=  0xffffffl  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  BYTE_MASK  +  1;	  val    |=    0xffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
176	[BUG]  [BUGGY]  val  -=  0xfffffl  &  bits;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  &  bits;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
177	[BUG]  [BUGGY]  val  -=  0xffffl  &  bits;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl  &  bits;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
178	[BUG]  [BUGGY]  val  &=  0xffff;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
179	[BUG]  [BUGGY]  val  &=  0xffffl  &  value;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  value;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
180	[BUG]  [BUGGY]  val  &=  0xfffffl  &  value;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffffl  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffffl  &  value;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
181	[BUG]  [BUGGY]  val  &=  0xffffl  &  val;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  val;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
182	[BUG]  [BUGGY]  val  &=  0xfffff;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffff;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
183	[BUG]  [BUGGY]  val  -=  0xfffff  &  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffff  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffff  &  bits;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
184	[BUG]  [BUGGY]  val  &=  0xffff  &  value;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  value;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
185	[BUG]  [BUGGY]  val  &=  0xfffff  &  value;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffff  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffff  &  value;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
186	[BUG]  [BUGGY]  val  &=  0xfffff  &  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffff  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffff  &  offset;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
188	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	||  length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
189	[BUG]  [BUGGY]  while(val  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
190	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
191	[BUG]  [BUGGY]  while(val  <  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(val  <  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(val  <  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
192	[BUG]  [BUGGY]  if(length  >  8)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  8)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  8)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
193	[BUG]  [BUGGY]  val  -=  0xff  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xff  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xff  +  1;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
194	[BUG]  [BUGGY]  val  &=  0xff  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xff  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xff  +  1;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
195	[BUG]  [BUGGY]  val  |=  0xff  +  1L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  +  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  +  1L;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
196	[BUG]  [BUGGY]  val  |=  0xff  +  1l;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  +  1l;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  +  1l;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
197	[BUG]  [BUGGY]  val  |=  val  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  +  1;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
198	[BUG]  [BUGGY]  val  |=  0xfffffL  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  -  offset  +  length;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
199	[BUG]  [BUGGY]  val  |=  0xfffffL  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  -  offset  +  1;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
200	[BUG]  [BUGGY]  val  |=  0xffffL  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  -  offset  +  length;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
201	[BUG]  [BUGGY]  val  |=  0xffffL  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  -  offset  +  1;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
202	[BUG]  [BUGGY]  val  |=  0xfffffL  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  -  offset;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
203	[BUG]  [BUGGY]  val  -=  0xffffl  -  offset;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl  -  offset;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
204	[BUG]  [BUGGY]  val  |=  0xffff  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  offset  +  length;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
205	[BUG]  [BUGGY]  val  |=  0xffff  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  offset  +  1;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
206	[BUG]  [BUGGY]  val  |=  0xffffl  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  offset  +  length;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
207	[BUG]  [BUGGY]  val  |=  0xffffl  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  offset  +  1;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
208	[BUG]  [BUGGY]  val  -=  max  -  bits;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  max  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  max  -  bits;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
209	[BUG]  [BUGGY]  val  -=  0xffffffl  -  offset;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffffl  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffffl  -  offset;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
210	[BUG]  [BUGGY]  val  -=  0xffffffl  /  bits;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffffl  /  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffffl  /  bits;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
211	[BUG]  [BUGGY]  val  -=  0xfffffl  /  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  /  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  /  bits;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
212	[BUG]  [BUGGY]  val  -=  0xfffffl  -  value;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  -  value;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
213	[BUG]  [BUGGY]  val  -=  0xffffffl  -  value;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffffl  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffffl  -  value;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
214	[BUG]  [BUGGY]  val  -=  0xffff  -  offset;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  -  offset;	  val    |=    0xffff    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
215	[BUG]  [BUGGY]  val  |=  offset  -  0xffff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  -  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  -  0xffff;	  val    |=    0xffff    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
216	[BUG]  [BUGGY]  val  |=  value  &  0xffffffl;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xffffffl;	  val    |=    0xfffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
217	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  value.length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  value.length;	  val    |=    0xfffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
218	[BUG]  [BUGGY]  val  |=  0xffffffl  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  value  +  1;	  val    |=    0xfffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
219	[BUG]  [BUGGY]  val  -=  0xfffffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
220	[BUG]  [BUGGY]  val  &=  0xfffffl;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffffl;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
221	[BUG]  [BUGGY]  val  |=  0xfffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffff;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
222	[BUG]  [BUGGY]  val  /=  0xfffffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  /=  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  /=  0xfffffl;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
223	[BUG]  [BUGGY]  val  |=  0xfffffl  -  0xffff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  0xffff;	  val    |=    0xffffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
224	[BUG]  [BUGGY]  val  |=  0xffffl  -  0xffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  0xffff;	  val    |=    0xffffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
225	[BUG]  [BUGGY]  val  |=  0xfffffL  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  &  0xfff;	  val    |=    0xffffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
226	[BUG]  [BUGGY]  val  -=  max;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  max;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
227	[BUG]  [BUGGY]  val  -=  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  1;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
228	[BUG]  [BUGGY]  value  -=  0xff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  value  -=  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	value  -=  0xff;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
229	[BUG]  [BUGGY]  val  -=  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  2;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
230	[BUG]  [BUGGY]  val  |=  0xffffffl  +  offset;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  +  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  +  offset;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
231	[BUG]  [BUGGY]  val  |=  0xfffffl  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  length;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
232	[BUG]  [BUGGY]  val  |=  0xfffffl  +  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  offset;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
233	[BUG]  [BUGGY]  val  |=  0xffffffl  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  +  length;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
234	[BUG]  [BUGGY]  val  |=  0xffffff  +  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffff  +  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffff  +  offset;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
235	[BUG]  [BUGGY]  val  |=  0xfffff  +  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffff  +  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffff  +  offset;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
236	[BUG]  [BUGGY]  val  -=  0xfffffl  +  bits;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  +  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  +  bits;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
237	[BUG]  [BUGGY]  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(value  +  1);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(value  +  1);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
238	[BUG]  [BUGGY]  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(value  -  1);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(value  -  1);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
239	[BUG]  [BUGGY]  val  =  Math.abs(value  -  offset);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(value  -  offset);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(value  -  offset);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
240	[BUG]  [BUGGY]  val  =  Math.max(val,  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.max(val,  max);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.max(val,  max);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
241	[BUG]  [BUGGY]  val  =  Math.abs(val);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(val);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(val);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
242	[BUG]  [BUGGY]  val  |=  0xffffl  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  1;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
243	[BUG]  [BUGGY]  val  |=  0xffffl  /  8;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  8;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
244	[BUG]  [BUGGY]  val  &=  0xffffl  -  8;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  -  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  -  8;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
245	[BUG]  [BUGGY]  val  |=  0xfffl  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  1;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
246	[BUG]  [BUGGY]  val  |=  0xffffl  -  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  2;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
247	[BUG]  [BUGGY]  val  |=  0xfff  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  max  +  1;	  val    |=    0xfff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
248	[BUG]  [BUGGY]  val  |=  max  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xfff;	  val    |=    0xfff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
249	[BUG]  [BUGGY]  val  &=  0xfff  &  max;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  max;	  val    |=    0xfff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
250	[BUG]  [BUGGY]  val  +=  max;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  max;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
251	[BUG]  [BUGGY]  val  +=  length;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  length;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
252	[BUG]  [BUGGY]  val  +=  val;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  val;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
253	[BUG]  [BUGGY]  val  +=  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  1;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
254	[BUG]  [BUGGY]  val  &=  0xfff  &  bits.length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  bits.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  bits.length;	  val    |=    0xfff    &    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
255	[BUG]  [BUGGY]  val  -=  0xfff  &  bits.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfff  &  bits.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfff  &  bits.length;	  val    |=    0xfff    &    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
256	[BUG]  [BUGGY]  val  |=  0xfff  &  bits.length  -  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  bits.length  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  bits.length  -  1;	  val    |=    0xfff    &    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
257	[BUG]  [BUGGY]  val  -=  val  -  bits;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  val  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  val  -  bits;	  val    -=    0xfffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
258	[BUG]  [BUGGY]  val  -=  0xffffl  /  bits;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl  /  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl  /  bits;	  val    -=    0xfffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
259	[BUG]  [BUGGY]  val  |=  0xfff  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  offset  +  length;	  val    |=    0xfff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
260	[BUG]  [BUGGY]  val  |=  0xfff  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  offset  +  1;	  val    |=    0xfff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
261	[BUG]  [BUGGY]  val  |=  offset  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  offset  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  offset  &  0xfff;	  val    |=    0xfff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
262	[BUG]  [BUGGY]  val  &=  0xff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xff;	  val    |=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
263	[BUG]  [BUGGY]  val  /=  0xff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  /=  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  /=  0xff;	  val    |=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
265	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
268	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
271	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
272	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
273	[BUG]  [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
276	[BUG]  [BUGGY]  val  |=  0xfffffl  &  0xfffff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  0xfffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  0xfffff;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
277	[BUG]  [BUGGY]  val  |=  0xffffffl  &  0xfffff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  0xfffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  0xfffff;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
278	[BUG]  [BUGGY]  val  |=  0xfffffl  -  0xfffff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  0xfffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  0xfffff;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
279	[BUG]  [BUGGY]  val  |=  0xffffffl  &  0xffff;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  0xffff;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
280	[BUG]  [BUGGY]  val  /=  0xfff;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  /=  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  /=  0xfff;	  val    &=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
281	[BUG]  [BUGGY]  val  |=  value  &  0xfffffffl;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xfffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xfffffffl;	  val    |=    0xffffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
282	[BUG]  [BUGGY]  val  |=  0xffffffffl  &  value.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffffl  &  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffffl  &  value.length;	  val    |=    0xffffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
283	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  value  +  1;	  val    |=    0xffffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
284	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  BYTE_MASK;	  val    |=    0xfffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
285	[BUG]  [BUGGY]  val  |=  0xfffffffl  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffffl  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffffl  &  BYTE_MASK  +  1;	  val    |=    0xfffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
286	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
291	[BUG]  [BUGGY]  val  |=  0xfffffl  -  value.length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  value.length;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
292	[BUG]  [BUGGY]  val  |=  0xfffffl  -  value  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  value  +  1;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
293	[BUG]  [BUGGY]  val  |=  value  -  0xfffffl;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  -  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  -  0xfffffl;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
294	[BUG]  [BUGGY]  val  |=  0xfffffl  -  value;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  value;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
295	[BUG]  [BUGGY]  val  |=  0xffffL  &  0xfff;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  &  0xfff;	  val    |=    0xfffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
296	[BUG]  [BUGGY]  val  |=  0xfffffl  &  4;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  4;	  val    |=    0xffffl    &    8;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
297	[BUG]  [BUGGY]  val  |=  0xfffffl  /  8;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  8;	  val    |=    0xffffl    &    8;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
298	[BUG]  [BUGGY]  val  |=  max  &  0xffffffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xffffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xffffffl;	  val    |=    0xfffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
299	[BUG]  [BUGGY]  val  |=  0xffffffl  -  max;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  -  max;	  val    |=    0xfffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
300	[BUG]  [BUGGY]  val  |=  0xffffffl  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  max  +  1;	  val    |=    0xfffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
301	[BUG]  [BUGGY]  val  |=  0xffffffl  &  val;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  val;	  val    |=    0xfffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
302	[BUG]  [BUGGY]  val  |=  0xfffffL  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  &  BYTE_MASK;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
303	[BUG]  [BUGGY]  val  |=  0xfffffL  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  &  BYTE_MASK  +  1;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
304	[BUG]  [BUGGY]  val  |=  0xffffL  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  &  BYTE_MASK  +  1;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
305	[BUG]  [BUGGY]  val  |=  0xfffffL  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffL  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffL  -  BYTE_MASK;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
306	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  bits;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  bits;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  bits;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
311	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  <  bits;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
315	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
316	[BUG]  [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
318	[BUG]  [BUGGY]  val  &=  0xfff  &  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  &  bits;	  val    |=    0xfff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
319	[BUG]  [BUGGY]  val  -=  0xfff  &  bits;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfff  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfff  &  bits;	  val    |=    0xfff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
320	[BUG]  [BUGGY]  val  |=  0xfffffl  -  2;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  2;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
321	[BUG]  [BUGGY]  val  &=  0xfffffl  -  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffffl  -  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffffl  -  8;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
322	[BUG]  [BUGGY]  val  |=  0xfff  -  value  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  value  +  1;	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
323	[BUG]  [BUGGY]  val  |=  0xfff  -  value;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  value;	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
324	[BUG]  [BUGGY]  val  |=  0xfff  -  value.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  value.length;	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
325	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
326	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
327	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
328	[BUG]  [BUGGY]  if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
329	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
330	[BUG]  [BUGGY]  val  |=  0xfffffl  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  offset  +  1;	  val    |=    0xffffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
331	[BUG]  [BUGGY]  val  |=  0xfff  &  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  offset  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  offset  +  2;	  val    |=    0xfff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
332	[BUG]  [BUGGY]  val  |=  0xfff  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  offset;	  val    |=    0xfff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
333	[BUG]  [BUGGY]  val  |=  0xffffl  &  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  1L;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
334	[BUG]  [BUGGY]  val  |=  0xffffl  &  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  2;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
335	[BUG]  [BUGGY]  val  |=  0xffffl  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  1;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
336	[BUG]  [BUGGY]  val  |=  0xffffl  &  4;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  4;	  val    |=    0xffffl    &    1;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
337	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
338	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  offset  +  length;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  offset  +  length;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  offset  +  length;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
339	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(length  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
340	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
341	[BUG]  [BUGGY]  val  |=  0xff  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  -  1;	  val    |=    0xff    +    1;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
342	[BUG]  [BUGGY]  val  |=  0xfffl  -  value  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  value  +  1;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
343	[BUG]  [BUGGY]  val  |=  value  -  0xfffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  -  0xfffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  -  0xfffl;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
344	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
345	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
346	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
347	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
348	[BUG]  [BUGGY]  val  |=  0xffffl  &  0xfffL;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  0xfffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  0xfffL;	  val    |=    0xffffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
349	[BUG]  [BUGGY]  val  |=  0xffffl  +  0xfff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  0xfff;	  val    |=    0xffffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
350	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
351	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
352	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
353	[BUG]  [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i!=  len;  i++)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
355	[BUG]  [BUGGY]  val  -=  8;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  8;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
356	[BUG]  [BUGGY]  val  -=  4;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  4;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
357	[BUG]  [BUGGY]  val  -=  value;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  value;	  val    -=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
358	[BUG]  [BUGGY]  val  -=  0xfffl  -  offset;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffl  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffl  -  offset;	  val    -=    0xfffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
359	[BUG]  [BUGGY]  val  -=  0xffff  -  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  -  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  -  bits  +  1;	  val    -=    0xfffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
360	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
361	[BUG]  [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
362	[BUG]  [BUGGY]  val  &=  0xffffl  &  bits;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  bits;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
363	[BUG]  [BUGGY]  val  &=  0xffffl  &  buf.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  buf.length;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
364	[BUG]  [BUGGY]  val  &=  0xffffl  &  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffffl  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffffl  &  offset;	  val    &=    0xfffl    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
365	[BUG]  [BUGGY]  val  |=  0xffffL;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
366	[BUG]  [BUGGY]  val  |=  0xfffL  -  offset;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  -  offset;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
367	[BUG]  [BUGGY]  val  |=  0xfffL  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  -  offset  +  1;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
368	[BUG]  [BUGGY]  val  |=  0xfffL  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  -  offset  +  length;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
369	[BUG]  [BUGGY]  val  |=  0xffffL  -  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  -  offset  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  -  offset  +  2;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
370	[BUG]  [BUGGY]  val  |=  0xffffl  &  0xffffL;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  0xffffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  0xffffL;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
371	[BUG]  [BUGGY]  val  |=  0xffffl  +  0xffff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  0xffff;	  val    |=    0xffffl    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
373	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
374	[BUG]  [BUGGY]  val  |=  0xfffL  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  &  BYTE_MASK;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
375	[BUG]  [BUGGY]  val  |=  0xfffL  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  &  BYTE_MASK  +  1;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
376	[BUG]  [BUGGY]  val  |=  0xffffL  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  -  BYTE_MASK;	  val    |=    0xffffL    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
377	[BUG]  [BUGGY]  val  |=  0xfff  &  value.longValue;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  value.longValue;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  value.longValue;	  val    |=    0xfff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
378	[BUG]  [BUGGY]  val  |=  value  &  0xfffl;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xfffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xfffl;	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
379	[BUG]  [BUGGY]  val  |=  0xffffl  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  value  +  1;	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
380	[BUG]  [BUGGY]  val  |=  0xfffl  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  &  value  +  1;	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
381	[BUG]  [BUGGY]  val  |=  0xffffl  -  value  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  value  +  1;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
382	[BUG]  [BUGGY]  val  |=  0xffffl  -  value.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  value.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  value.length;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
383	[BUG]  [BUGGY]  val  |=  0xffffl  /  value;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  value;	  val    |=    0xffffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
384	[BUG]  [BUGGY]  val  |=  0xffffl  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  length;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
385	[BUG]  [BUGGY]  val  |=  0xffffl  +  offset;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  offset;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
386	[BUG]  [BUGGY]  val  |=  0xfffffl  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  1;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
387	[BUG]  [BUGGY]  val  |=  0xffffl  +  value;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  value;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
388	[BUG]  [BUGGY]  val  |=  value  &  0xff;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  value  &  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  value  &  0xff;	  val    |=    0xff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
389	[BUG]  [BUGGY]  val  |=  0xffffl  +  8;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  8;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
390	[BUG]  [BUGGY]  val  |=  0xffffl  /  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  bits  +  1;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
391	[BUG]  [BUGGY]  val  |=  0xffffl  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  BYTE_MASK;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
392	[BUG]  [BUGGY]  val  |=  0xffffl  /  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  offset;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
393	[BUG]  [BUGGY]  val  |=  0xffffl  /  bits.length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  bits.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  bits.length;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
394	[BUG]  [BUGGY]  val  |=  0xffffl  /  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  length;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
395	[BUG]  [BUGGY]  val  +=  8;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  8;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
396	[BUG]  [BUGGY]  val  +=  2;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  2;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
397	[BUG]  [BUGGY]  val  +=  4;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  4;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
398	[BUG]  [BUGGY]  val  +=  0xff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  0xff;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
399	[BUG]  [BUGGY]  val  -=  0xffff  &  buf;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  buf;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  buf;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
400	[BUG]  [BUGGY]  val  -=  0xffff  &  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffff  &  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffff  &  bits  +  1;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
401	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
402	[BUG]  [BUGGY]  if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  8)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
403	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
404	[BUG]  [BUGGY]  val  |=  0xfff  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  offset  +  1;	  val    |=    0xffff    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
405	[BUG]  [BUGGY]  val  |=  0xfff  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  offset  +  length;	  val    |=    0xffff    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
406	[BUG]  [BUGGY]  val  |=  0xffffl  -  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  offset  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  offset  +  2;	  val    |=    0xffffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
407	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
408	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  buffer[i];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  buffer[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  new  byte[max  -  1];  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  new  byte[max  -  1];  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  new  byte[max  -  1];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
410	[BUG]  [BUGGY]  val  |=  0xffffl  -  max;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  max;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
411	[BUG]  [BUGGY]  val  |=  max  &  0xffffl;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  max  &  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  max  &  0xffffl;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
412	[BUG]  [BUGGY]  val  |=  0xffffl  &  max  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  max  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  max  +  1;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
413	[BUG]  [BUGGY]  val  |=  0xffffl  +  max;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  max;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
414	[BUG]  [BUGGY]  val  |=  0xfff  &  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  bits  +  1;	  val    |=    0xfff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
415	[BUG]  [BUGGY]  val  |=  0xffffffl  +  max;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  +  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  +  max;	  val    |=    0xffffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
416	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
417	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
418	[BUG]  [BUGGY]  val  |=  0xff  &  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  &  BYTE_MASK  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  &  BYTE_MASK  +  2;	  val    |=    0xff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
419	[BUG]  [BUGGY]  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.sqrt(value);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.sqrt(value);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
420	[BUG]  [BUGGY]  val  =  Math.abs(value  -  value);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(value  -  value);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(value  -  value);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
421	[BUG]  [BUGGY]  val  &=  0xfff  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfff  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfff  +  1;	  val    &=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
422	[BUG]  [BUGGY]  val  |=  0xffff  &  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  offset  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  offset  +  2;	  val    |=    0xffff    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
423	[BUG]  [BUGGY]  val  |=  0xffffL  &  value;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  &  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  &  value;	  val    |=    0xffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
424	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
425	[BUG]  [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
426	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
427	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
428	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
429	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  1;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
430	[BUG]  [BUGGY]  val  |=  0xfffffl  +  max;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  max;	  val    |=    0xfffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
431	[BUG]  [BUGGY]  val  |=  0xfffl  &  0xfffL;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  &  0xfffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  &  0xfffL;	  val    |=    0xfffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
432	[BUG]  [BUGGY]  val  |=  0xfffL  &  0xfff;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffL  &  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffL  &  0xfff;	  val    |=    0xfffl    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
433	[BUG]  [BUGGY]  val  |=  0xfffffl  &  value  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  &  value  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  &  value  +  1;	  val    |=    0xfffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
434	[BUG]  [BUGGY]  val  |=  0xfffffl  +  value;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  value;	  val    |=    0xfffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
435	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
436	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
437	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
438	[BUG]  [BUGGY]  val  |=  0xfff  &  buf;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  buf;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  buf;	  val    |=    0xfff    &    val;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
439	[BUG]  [BUGGY]  val  -=  0xfff  &  val;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfff  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfff  &  val;	  val    |=    0xfff    &    val;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
440	[BUG]  [BUGGY]  val  -=  0xffffl  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffl  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffl  -  1;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
441	[BUG]  [BUGGY]  val  =  0xff;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  0xff;	  val    |=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
442	[BUG]  [BUGGY]  val  |=  0xfffl  &  0xffL;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  &  0xffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  &  0xffL;	  val    |=    0xfffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
443	[BUG]  [BUGGY]  val  |=  0xfffl  +  0xff;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  +  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  +  0xff;	  val    |=    0xfffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
444	[BUG]  [BUGGY]  val  |=  0xffffl  *  8;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  *  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  *  8;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
445	[BUG]  [BUGGY]  val  |=  0xffffl  -  4;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  4;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
446	[BUG]  [BUGGY]  val  |=  0xffff  &  BYTE_MASK  +  1L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  BYTE_MASK  +  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  BYTE_MASK  +  1L;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
447	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
448	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
449	[BUG]  [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	long  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
450	[BUG]  [BUGGY]  val  |=  0xfffl  /  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  /  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  /  8;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
451	[BUG]  [BUGGY]  val  |=  0xfffl  -  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  2;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
452	[BUG]  [BUGGY]  val  -=  0xfffl;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffl;	  val    |=    0xfffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
453	[BUG]  [BUGGY]  val  |=  0xffffffl  +  value;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  +  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  +  value;	  val    |=    0xffffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
454	[BUG]  [BUGGY]  val  |=  0xffff  -  max;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  max;	  val    |=    0xffff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
455	[BUG]  [BUGGY]  val  |=  0xffffl  &  3;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  3;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  3;	  val    |=    0xffffl    &    8;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
456	[BUG]  [BUGGY]  val  &=  0xfffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xfffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xfffl;	  val    |=    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
457	[BUG]  [BUGGY]  val  |=  0xffffl  &  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  offset  +  1;	  val    |=    0xffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
458	[BUG]  [BUGGY]  val  |=  0xffffl  &  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  offset  +  length;	  val    |=    0xffffl    &    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
459	[BUG]  [BUGGY]  val  |=  0xfff  -  max;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  max;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  max;	  val    |=    0xfff    &    max;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
460	[BUG]  [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  BYTE_MASK  +  2;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
461	[BUG]  [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  BYTE_MASK  +  1L;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  BYTE_MASK  +  1L;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
462	[BUG]  [BUGGY]  val  |=  length  -  bits;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  length  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  length  -  bits;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
463	[BUG]  [BUGGY]  val  -=  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  bits;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
464	[BUG]  [BUGGY]  val  |=  0xfffl  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  offset  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  offset  +  1;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
465	[BUG]  [BUGGY]  val  |=  0xfffl  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  -  offset  +  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  -  offset  +  length;	  val    |=    0xfffl    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
466	[BUG]  [BUGGY]  val  |=  0xffffl  -  0xff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  -  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  -  0xff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
467	[BUG]  [BUGGY]  val  |=  0xffffl  +  0xff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  +  0xff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  +  0xff;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
468	[BUG]  [BUGGY]  val  |=  0xffffl  &  0xffL;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  0xffL;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  0xffL;	  val    |=    0xffffl    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
469	[BUG]  [BUGGY]  val  &=  0xffff  &  offset;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  offset;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
470	[BUG]  [BUGGY]  val  &=  0xffff  &  bits.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  bits.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  bits.length;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
471	[BUG]  [BUGGY]  val  |=  0xfff  &  bits.length  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  &  bits.length  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  &  bits.length  +  1;	  val    |=    0xfff    &    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
472	[BUG]  [BUGGY]  val  |=  0xfffl  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffl  &  BYTE_MASK  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffl  &  BYTE_MASK  +  1;	  val    |=    0xfffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
473	[BUG]  [BUGGY]  val  |=  0xfffffl  +  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  +  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  +  BYTE_MASK;	  val    |=    0xfffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
474	[BUG]  [BUGGY]  val  |=  0xfffffl;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
475	[BUG]  [BUGGY]  val  |=  0xffffl  <  <  4;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  <  <  4;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  <  <  4;	  val    |=    0xffffl    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
476	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
477	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	while(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
478	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
479	[BUG]  [BUGGY]  val  |=  val  -  8;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  -  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  -  8;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
480	[BUG]  [BUGGY]  val  +=  0xffffl  -  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  0xffffl  -  8;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  0xffffl  -  8;	  val    |=    0xffffl    -    8;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
481	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
482	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
483	[BUG]  [BUGGY]  val  |=  0xfffffl  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  -  BYTE_MASK;	  val    |=    0xfffffl    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
484	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
485	[BUG]  [BUGGY]  if(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(value  >  0)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	  if(length    >    0)    {    for(int    i    =    offset;    i    <    offset;    i++)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
486	[BUG]  [BUGGY]  val  |=  0xfff  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  BYTE_MASK;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
487	[BUG]  [BUGGY]  val  |=  val  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  &  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  &  BYTE_MASK;	  val    |=    0xfff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
488	[BUG]  [BUGGY]  val  +=  0xffffl;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  0xffffl;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  0xffffl;	  val    |=    0xffffl;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
489	[BUG]  [BUGGY]  val  |=  val  +  bits;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  +  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  +  bits;	  val    |=    0xffffl    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
490	[BUG]  [BUGGY]  val  |=  0xffffffl  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffffl  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffffl  &  value.longValue();	  val    |=    0xffffffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
491	[BUG]  [BUGGY]  val  |=  val  -  value;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  -  value;	  val    |=    0xfffl    -    value;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
492	[BUG]  [BUGGY]  val  |=  0xff  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xff  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xff  -  BYTE_MASK;	  val    |=    0xff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
493	[BUG]  [BUGGY]  if(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(val  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
494	[BUG]  [BUGGY]  if(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(value  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
495	[BUG]  [BUGGY]  val  |=  0xfff  -  val;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  val;	  val    |=    0xfff    &    val;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
496	[BUG]  [BUGGY]  val  |=  0xffff  &  value.longValue;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  &  value.longValue;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  &  value.longValue;	  val    |=    0xffff    &    value;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
497	[BUG]  [BUGGY]  val  |=  0xfff  -  value.longValue();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  value.longValue();	  val    |=    0xffff    -    value;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
498	[BUG]  [BUGGY]  val  |=  0xfffffl  /  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfffffl  /  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfffffl  /  bits  +  1;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
499	[BUG]  [BUGGY]  val  |=  0xffffl  /  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  /  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  /  2;	  val    |=    0xffffl    /    bits;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
500	[BUG]  [BUGGY]  val  +=(value  <  >  0)?  val  :  0xfff;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=(value  <  >  0)?  val  :  0xfff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=(value  <  >  0)?  val  :  0xfff;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
501	[BUG]  [BUGGY]  val  +=(value  >  max)?  0xfff  :  val;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=(value  >  max)?  0xfff  :  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=(value  >  max)?  0xfff  :  val;	  val    +=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
502	[BUG]  [BUGGY]  val  -=  length;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  length;	  val    -=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
503	[BUG]  [BUGGY]  val  -=  offset;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  offset;	  val    -=    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
504	[BUG]  [BUGGY]  val  |=  0xffffL  -  value;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffL  -  value;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffL  -  value;	  val    |=    0xffffL    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
505	[BUG]  [BUGGY]  val  +=  0xffff;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  0xffff;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  0xffff;	  val    |=    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
506	[BUG]  [BUGGY]  val  |=  0xffff  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffff  -  BYTE_MASK;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffff  -  BYTE_MASK;	  val    |=    0xffff    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
507	[BUG]  [BUGGY]  val  -=  0xffffL  -  offset;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xffffL  -  offset;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xffffL  -  offset;	  val    -=    0xfffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
508	[BUG]  [BUGGY]  val  &=  0xffff  &  val;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  &=  0xffff  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  &=  0xffff  &  val;	  val    &=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
509	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	cearcă  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =(byte)val;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =(byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
510	[BUG]  [BUGGY]  val  +=  max  -  bits;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  max  -  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  max  -  bits;	  val    |=    max    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
511	[BUG]  [BUGGY]  val  -=  val  &  bits;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  val  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  val  &  bits;	  val    -=    0xffff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
512	[BUG]  [BUGGY]  val  |=  val  -  bits  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  val  -  bits  +  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  val  -  bits  +  1;	  val    |=    val    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
513	[BUG]  [BUGGY]  val  -=  0xfffffl  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  -=  0xfffffl  -  1;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  -=  0xfffffl  -  1;	  val    -=    0xffffl    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
514	[BUG]  [BUGGY]  val  |=  0xfff  -  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  offset  +  2;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  offset  +  2;	  val    |=    0xffff    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
515	[BUG]  [BUGGY]  val  =  Math.abs(value  /  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.abs(value  /  BYTE_MASK);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.abs(value  /  BYTE_MASK);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
516	[BUG]  [BUGGY]  val  =  Math.max(0,  val);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  =  Math.max(0,  val);  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  =  Math.max(0,  val);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
517	[BUG]  [BUGGY]  int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  val  <  <  8;  }	  for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
520	[BUG]  [BUGGY]  val  +=  0xfff  &  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  +=  0xfff  &  bits;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  +=  0xfff  &  bits;	  val    |=    0xfff    &    bits;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
521	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
522	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  off;  i--)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  off;  i--)  {  buf[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  off;  i--)  {  buf[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
524	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buffer[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
525	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  value;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buffer[i]  =  value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buffer[i]    =    buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
526	[BUG]  [BUGGY]  val  |=  0xffffl  &  value.longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  value.longValue();  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  value.longValue();	  val    |=    0xfffl    &    value;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
527	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  val  >  >=  8;  }	  for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    val    >    >=    8;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
528	[BUG]  [BUGGY]  val  |=  0xfff  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xfff  -  buf.length;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xfff  -  buf.length;	  val    |=    0xfff    &    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
529	[BUG]  [BUGGY]  val  |=  0xffffl  &  val;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  val  |=  0xffffl  &  val;  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	val  |=  0xffffl  &  val;	  val    |=    0xffffl    &    max;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
530	[BUG]  [BUGGY]  if(value  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(value  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(value  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i++)  {  buf[i]  =  (byte)value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
531	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)  value;  val  <  <  8;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)  value;  val  <  <  8;  }  [BUGGY]      }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	507	507	1	replace	if(negative)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i++)  {  buf[i]  =  (byte)  value;  val  <  <  8;  }	  if(length    >    0)    {    for(int    i    =    offset    +    length;    i    >=    offset;    i++)    {    buf[i]    =    (byte)value;    val    <    <    8;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
