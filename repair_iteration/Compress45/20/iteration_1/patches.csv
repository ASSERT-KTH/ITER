bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  maxAsOctalChar);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongOctalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBytes(value,  buf,  offset,  length,  negative);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  0);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  0);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  size);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0,  size);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  false);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  false);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
23	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  10);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  10);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  10);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  size);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  -  1);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  -  1);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  -  1);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  +  1);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size  +  1);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value.length);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  false);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  false);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  formatBigBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  idx);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  idx);	  formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length  -  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length  -  negative);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  maxAsOctalChar);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  FormatUtils.formatBigDecimal(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimal(value,  buf,  offset,  length,  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimal(value,  buf,  offset,  length,  negative);	  FormatUtils.formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0xff);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0xff);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
43	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0L);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0L);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0L);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative  +  1);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  formatBigDecimalBytes(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(negative,  buf,  offset,  length);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(negative,  buf,  offset,  length);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length  -  negative);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(negative,  buf,  offset,  length);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(negative,  buf,  offset,  length);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  value);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);	  formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
55	[BUG]  [BUGGY]  formatBigIntegerBytes(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(negative,  buf,  offset,  length);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(negative,  buf,  offset,  length);	  formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0xff);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  0xff);	  formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  offset  +=  length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,  length  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,  length	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  formatLongOctalBytes(value,  buf,  offset,	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);	  formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  encoding);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  encoding);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  encoding);	  formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  encoding);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  encoding);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  encoding);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative,  len);	  FormatUtils.formatBigDecimalBinary(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  positive,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  positive,  maxAsOctalChar);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  positive,  maxAsOctalChar);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  4);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  4);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  4);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0x80);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }    [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0x80);  [BUGGY]      buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0x80);	  formatBigIntegerBinary(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
