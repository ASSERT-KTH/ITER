bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBinary(value,  buf,  offset,  length,  negative);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
2	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]      IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
3	[BUG]  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBytes(value,  buf,  offset,  length,  negative);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
4	[BUG]  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigDecimalBinary(value,  buf,  offset,  length,  negative);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	FormatUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigDecimalBytes(value,  buf,  offset,  length,  negative);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
7	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]    [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	  	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
8	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  0);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
9	[BUG]  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]      IllegalArgumentException  [CONTEXT]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]  formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);  [BUGGY]    buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	488	488	1	replace	formatBigIntegerBinary(value,  buf,  offset,  length,  negative,  size);	formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  	non-compiled	[CE]  <identifier>  expected	39	None	replace
