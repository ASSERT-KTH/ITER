bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val  <  <  8)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0l)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0l)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0l)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  val  <  <  8)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8)  {  val++;  }  else  {  buffer[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  val  +=  Math.abs(value)/  2L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value)/  2L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value)/  2L;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  val  +=  Math.abs(max)/  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(max)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(max)/  2;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  val  +=  Math.abs(val)/  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(val)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(val)/  2;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  val  +=  Math.abs(value)/  4;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value)/  4;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value)/  4;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  if(val  >  0)  {  val  +=  length;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val  +=  length;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val  +=  length;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  value,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  value,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  value,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  val  =  val  >  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  val  >  0xffl)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xffl)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xffl)  {  val++;  }	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  val  <  0  ||  val  >  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  0  ||  val  >  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  0  ||  val  >  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  val  >  0xfffl)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xfffl)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xfffl)  {  val++;  }	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  val  =  val  >  0L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0L;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
22	[BUG]  [BUGGY]  val  >  0;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  val  +=  Math.max(value,  val);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(value,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(value,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  val  +=  Math.max(max,  value);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(max,  value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(max,  value);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  val  +=  Math.min(value,  val);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.min(value,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.min(value,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  val  +=  Math.max(val,  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(val,  max);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(val,  max);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  val  +=  Math.max(max,  val  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(max,  val  +  1);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(max,  val  +  1);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  val  <  =  max  -  1;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  max  -  1;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  max  -  1;	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  val  >  max;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  max;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  max;	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  val  +=  length;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  length;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  length;	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  val  <  =  max;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  max;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  max;	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  val  <  =  0L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0L;	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
40	[BUG]  [BUGGY]  val  <  =  0l;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0l;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0l;	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ".s.IFJDCS ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ".s.IFJDCS ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ".s.IFJDCS ");  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
43	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  val  >  0xffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  val  >  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  val  +=  Math.pow(10,  max  -  1);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  max  -  1);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  max  -  1);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  val  +=  Math.pow(10,  value);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  value);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  val  +=  Math.pow(10,  val);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  val);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  val  +=  Math.pow(10,  max  -  offset);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  max  -  offset);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  max  -  offset);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  val  +=  Math.pow(10,  max  -  2);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  max  -  2);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  max  -  2);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  val  |=  0xffl  <  <  bits;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xffl  <  <  bits;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xffl  <  <  bits;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  val  =  val  >  0?  buf.length  :  max;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0?  buf.length  :  max;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0?  buf.length  :  max;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  val  |=  0xfffl  <  <  bits;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xfffl  <  <  bits;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xfffl  <  <  bits;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  val  =  val  >  0?  buffer[i]  :  null;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0?  buffer[i]  :  null;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0?  buffer[i]  :  null;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  val  =  val  >  0?  buffer[i]  :  max;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0?  buffer[i]  :  max;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0?  buffer[i]  :  max;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  val  =  val  >  0?  buffer[i]  :  value;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0?  buffer[i]  :  value;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0?  buffer[i]  :  value;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  val  =  val  >  0?  buffer[i]  :  val;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  val  >  0?  buffer[i]  :  val;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  val  >  0?  buffer[i]  :  val;	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
59	[BUG]  [BUGGY]  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  val  |=  0xfffl  <  <  buf.length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xfffl  <  <  buf.length;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xfffl  <  <  buf.length;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  int  offset  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  int  offset  =  offset  +  length  -  1;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	int  offset  =  offset  +  length  -  1;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  val  |=  0xffl  <  <  buf.length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xffl  <  <  buf.length;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xffl  <  <  buf.length;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  val  |=  0xffffl  <  <  bits;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xffffl  <  <  bits;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xffffl  <  <  bits;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
65	[BUG]  [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
67	[BUG]  [BUGGY]  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
69	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
70	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8  ||  val  >  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8  ||  val  >  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  val  +=  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value  -  1);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value  -  1);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  val  +=  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.min(value,  max);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.min(value,  max);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  val  -=  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  -=  Math.abs(value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  -=  Math.abs(value);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  val  +=  Math.max(value,  max);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(value,  max);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(value,  max);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  val  +=  Math.sin(value);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.sin(value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.sin(value);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  val  +=  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.sqrt(value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.sqrt(value);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  val  >  0xffl)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xffl)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xffl)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  val  =  Math.abs(value)/  2L;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  2L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  2L;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  val  =  Math.abs(value)/  2  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  2  +  1;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  2  +  1;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
83	[BUG]  [BUGGY]  val  =  Math.abs(val)/  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(val)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(val)/  2;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
84	[BUG]  [BUGGY]  val  =  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  0;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  0;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  val  +=  0xffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  0xffl;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  0xffl;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  if(length  >  8)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  8)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  8)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  if(length  >  4)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  4)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  4)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
89	[BUG]  [BUGGY]  if(length  >  0)  {  val  =  value;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val  =  value;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val  =  value;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
90	[BUG]  [BUGGY]  if(length  >  0)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
91	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
93	[BUG]  [BUGGY]  value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  >  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  if(value  >  0)  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  max;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  max;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  buf[offset++]  =  max;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
96	[BUG]  [BUGGY]  value  >  0)  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  >  0)  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  >  0)  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
97	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
100	[BUG]  [BUGGY]  if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
102	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
104	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  val  +=  Math.max(buf,  val);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(buf,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(buf,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
106	[BUG]  [BUGGY]  val  +=  Math.max(length,  val);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(length,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(length,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
107	[BUG]  [BUGGY]  val  +=  Math.max(bits,  val);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(bits,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(bits,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
108	[BUG]  [BUGGY]  if(length  >  max)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  max)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  max)  {  val  +=  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
109	[BUG]  [BUGGY]  if(length  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  val  +=  Math.abs(value  -  offset);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value  -  offset);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value  -  offset);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  val  +=  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(max);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(max);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  while(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  while(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	while(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  final  int  offset  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  final  int  offset  =  offset  +  length  -  1;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	final  int  offset  =  offset  +  length  -  1;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
117	[BUG]  [BUGGY]  int  offset  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  int  offset  =  offset  +  length;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	int  offset  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  final  int  offset  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  final  int  offset  =  offset  +  length;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	final  int  offset  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
120	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
121	[BUG]  [BUGGY]  value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
122	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
123	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  buf,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
124	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  value,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
125	[BUG]  [BUGGY]  val  +=  Math.pow(10,  max  -  value);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  max  -  value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  max  -  value);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
126	[BUG]  [BUGGY]  val  +=  Math.pow(10,  buffer);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  buffer);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  buffer);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
127	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
129	[BUG]  [BUGGY]  if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(buf!=  null)  {  if(val  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
132	[BUG]  [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(length  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  value);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  >  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buffer,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
134	[BUG]  [BUGGY]  if(negative)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(negative)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(negative)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  if(negative)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(negative)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(negative)  {  val++;  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
136	[BUG]  [BUGGY]  val  =  Math.abs(value)/  4;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  4;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  4;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
137	[BUG]  [BUGGY]  val  =  Math.abs(value)/  3;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  3;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  3;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
138	[BUG]  [BUGGY]  val  =  Math.abs(value)/  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  8;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  8;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
139	[BUG]  [BUGGY]  val  +=  Math.sqrt(value)/  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.sqrt(value)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.sqrt(value)/  2;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
140	[BUG]  [BUGGY]  val  +=  Math.abs(value)/  2  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value)/  2  +  1;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value)/  2  +  1;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
141	[BUG]  [BUGGY]  val  +=  Math.abs(value)/  3;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(value)/  3;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(value)/  3;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
142	[BUG]  [BUGGY]  if(value  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  val  <  =  0l)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0l)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0l)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
144	[BUG]  [BUGGY]  if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
146	[BUG]  [BUGGY]  value  <  =  0)  {  value++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  value  <  =  0)  {  value++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	value  <  =  0)  {  value++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
147	[BUG]  [BUGGY]  val  +=  Math.pow(10,  MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  MAX_VALUE);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  MAX_VALUE);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
148	[BUG]  [BUGGY]  val  +=  Math.pow(10,  offset);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.pow(10,  offset);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.pow(10,  offset);	  val    +=    Math.pow(10,    max);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
149	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
150	[BUG]  [BUGGY]  if(val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >=  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  if(val  <  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0)  {  val++;  }  else  {  buf[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
152	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
153	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }  else  {  buffer[offset++]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    buf[offset++]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
154	[BUG]  [BUGGY]  if(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
155	[BUG]  [BUGGY]  if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(value  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
156	[BUG]  [BUGGY]  val  <  =  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0;	  if(value    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
157	[BUG]  [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
158	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  if(val  >=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  length,  buf,  0,  val);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    length,    buf,    0,    val);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
160	[BUG]  [BUGGY]  val  <  <  8;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  <  8;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  <  8;	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
161	[BUG]  [BUGGY]  if(val  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
162	[BUG]  [BUGGY]  val  +=  Math.sqrt(val)/  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.sqrt(val)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.sqrt(val)/  2;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
163	[BUG]  [BUGGY]  val  +=  Math.abs(val)/  2L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(val)/  2L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(val)/  2L;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
164	[BUG]  [BUGGY]  val  +=  Math.abs(length)/  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.abs(length)/  2;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.abs(length)/  2;	  val    +=    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
165	[BUG]  [BUGGY]  if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
166	[BUG]  [BUGGY]  val  <  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
167	[BUG]  [BUGGY]  val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
168	[BUG]  [BUGGY]  val  <  >  max)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  >  max)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  >  max)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
169	[BUG]  [BUGGY]  val  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
170	[BUG]  [BUGGY]  val  <  =  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  =  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  =  0xfffl)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    <    =    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
171	[BUG]  [BUGGY]  val  +=  Math.max(0,  val);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.max(0,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.max(0,  val);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
172	[BUG]  [BUGGY]  val  +=  Math.sqrt(val);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.sqrt(val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.sqrt(val);	  val    +=    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
173	[BUG]  [BUGGY]  if(val  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
174	[BUG]  [BUGGY]  if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
175	[BUG]  [BUGGY]  if(val  >  max)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  max)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  max)  {  val++;  }	  if(value    >    max)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
176	[BUG]  [BUGGY]  val  =  Math.abs(value)/  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  BYTE_MASK;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  BYTE_MASK;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
177	[BUG]  [BUGGY]  long  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  long  val  =  Math.abs(value);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	long  val  =  Math.abs(value);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
178	[BUG]  [BUGGY]  val  |=  0xfffl  <  <  8;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  |=  0xfffl  <  <  8;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  |=  0xfffl  <  <  8;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
179	[BUG]  [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
180	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
181	[BUG]  [BUGGY]  if(buf[i]  ==  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(buf[i]  ==  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(buf[i]  ==  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
182	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(buf[i]!=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(buf[i]!=  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  buffer[i]  =  value;  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    buffer[i]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
183	[BUG]  [BUGGY]  val  <  >  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  <  >  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  <  >  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
184	[BUG]  [BUGGY]  val  >  0xfffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xfffl;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xfffl;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
185	[BUG]  [BUGGY]  val  +=  0xfffl;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  0xfffl;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  0xfffl;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
186	[BUG]  [BUGGY]  val  >  0)  {  val++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0)  {  val++;  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0)  {  val++;  }	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
187	[BUG]  [BUGGY]  val  >  0xfff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  0xfff;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  0xfff;	  if(val    >    0)    {    val++;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
188	[BUG]  [BUGGY]  val  =  Math.abs(val)/  2L;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(val)/  2L;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(val)/  2L;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
189	[BUG]  [BUGGY]  val  =  Math.abs(value)/  2  +  1l;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  =  Math.abs(value)/  2  +  1l;  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  =  Math.abs(value)/  2  +  1l;	  val    =    Math.abs(value)/    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
190	[BUG]  [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
191	[BUG]  [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  =  0)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
192	[BUG]  [BUGGY]  val  >  neamean)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  >  neamean)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  >  neamean)  {  val++;  }  else  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
193	[BUG]  [BUGGY]  if(val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  >  0)  {  System.arraycopy(buf,  offset  +  1,  val,  0,  buf.length);  }	  if(val    >    0)    {    val++;    }    else    {    System.arraycopy(buf,    offset    +    1,    val,    0,    buf.length);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
194	[BUG]  [BUGGY]  val  +=  Math.min(length,  val);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  val  +=  Math.min(length,  val);  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	val  +=  Math.min(length,  val);	  val    +=    Math.max(max,    val);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
195	[BUG]  [BUGGY]  if(val  <  0  ||  val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;    [BUGGY]  if(val  <  0  ||  val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	506	506	1	replace	if(val  <  0  ||  val  >  max)  {  val++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(val    >    0)    {    val++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
