bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getName()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException(val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException(val.getName()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getName()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getName()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.length  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.length  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.length  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.length    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.length    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.length    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(len);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  len);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value  +  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value  +  1);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(b.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(b.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(b.length);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(0);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
15	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  Throwable    t    =    new    IllegalArgumentException(   "Value    '   "    +    value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
16	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");	  Throwable    t    =    new    IllegalArgumentException(   "Value    '   "    +    value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  final  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
20	[BUG]  [BUGGY]  final  BigInteger  field  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  field  =  BigInteger.valueOf(value);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  field  =  BigInteger.valueOf(value);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
21	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
22	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
23	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
24	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  -  1);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  -  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  -  1);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
25	[BUG]  [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");  }	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    value.       ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
26	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  value.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    value.       ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  value.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    value.       ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
28	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)b.clone();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)b.clone();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)b.clone();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
29	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)val.getValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)val.getValue();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)val.getValue();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
30	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)val.intValue();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)val.intValue();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)val.intValue();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
31	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)value.clone();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)value.clone();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)value.clone();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
32	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)len.clone();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)len.clone();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)len.clone();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  val  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    length    +   "    is    too    large    for       "    +    val    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  length  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  length  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  length  + "  is  too  large  for   "  +  val  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    length    +   "    is    too    large    for       "    +    val    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
35	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
36	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");	  new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
37	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes. ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
38	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  val.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  val.length);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  off  +  len,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  len  +  val.length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  len  +  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  off,  len  +  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(val,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(val,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(val,  0,  buf,  off  +  len,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  offset  +  length,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  len,  val.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  off,  len,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off,  offset  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  off,  offset  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  off,  offset  +  len,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
51	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
53	[BUG]  [BUGGY]  BigInteger[]  b  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  value.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  value.toByteArray();	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  BigInteger[]  b  =  buf.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  buf.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  buf.toByteArray();	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  final  BigInteger[]  b  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger[]  b  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger[]  b  =  val.toByteArray();	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  BigInteger[]  b  =  val.getBytes();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  val.getBytes();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  val.getBytes();	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  BigInteger[]  b  =  val.toByteArray(length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  val.toByteArray(length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  val.toByteArray(length);	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   ",   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
60	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   ",   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  value.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  value.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   ",   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
62	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  Throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
63	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");	  Throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
64	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  final    Throwable    t    =    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
65	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");	  final    Throwable    t    =    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
66	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
67	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "] ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "] ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "] ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "] ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
69	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  val.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  buf[off  +  len]  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  buf[off  +  len]  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(len);  buf[off  +  len]  =  val.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
71	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len]  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len]  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len]  =  val.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  buf[off  +  len]  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  buf[off  +  len]  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(0);  buf[off  +  len]  =  val.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
73	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  value.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  value.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
74	[BUG]  [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
75	[BUG]  [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
76	[BUG]  [BUGGY]  ||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  ||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
77	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes. ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.longValue()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.longValue()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.longValue()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.longValue()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.longValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.longValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.longValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.longValue()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.longValue()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.longValue()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.longValue()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.longValue()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
83	[BUG]  [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
84	[BUG]  [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
85	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
86	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  len  + "'  is  too  large  for   "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  len  + "'  is  too  large  for   "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  len  + "'  is  too  large  for   "  +  value  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    length    +   "'    is    too    large    for   "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for   "  +  val  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for   "  +  val  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for   "  +  val  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    length    +   "'    is    too    large    for   "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
89	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
90	[BUG]  [BUGGY]  if(val.toString().equals( " "))  {  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(val.toString().equals( " "))  {  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(val.toString().equals( " "))  {  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  throw    new    IllegalArgumentException(   "Value[   "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
91	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  value.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
93	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  value.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  len,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  value.length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  offset  +  length,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
96	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1,  value.length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
97	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  value.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  value.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  value.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
99	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
101	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len  +  1);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
102	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
103	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
104	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  value  + "]  is  too  large  for "  +  length  + "  bytes  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    bytes    field.       ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
106	[BUG]  [BUGGY]  final  String  val  =  val.toString();  throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  String  val  =  val.toString();  throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  String  val  =  val.toString();  throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.toString()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
107	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(len);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(len);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value,  val.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value,  val.length);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
109	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value,  len);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value,  len);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
110	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(val);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(val);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(val);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
111	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.parseBigInteger(value);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.parseBigInteger(value);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
112	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  +  1);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  +  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value  +  1);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
113	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    len    +   "    is    too    large    for       "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  len  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  len  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  len  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    len    +   "    is    too    large    for       "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
115	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  len  + "  is  too  large  for   "  +  value  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    len    +   "    is    too    large    for       "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for "  +  length  + "]  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for   "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.getText()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.getText()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.getText()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getText()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getText()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException(val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException(val.getText()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getText()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getText()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
121	[BUG]  [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val!=  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
122	[BUG]  [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	While(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
123	[BUG]  [BUGGY]  ||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  ||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	||  val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
124	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
125	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray()  +  1;  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray()  +  1;	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
126	[BUG]  [BUGGY]  BigInteger  field  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  value.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  value.toByteArray();	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
127	[BUG]  [BUGGY]  BigInteger  field  =  val.intValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.intValue();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.intValue();	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
128	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray(len);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray(len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray(len);	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
129	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray()  +  len;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray()  +  len;  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray()  +  len;	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
130	[BUG]  [BUGGY]  BigInteger  field  =  val.length();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.length();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.length();	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
131	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(buf,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
132	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(buf,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(buf,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(len);  System.arraycopy(buf,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(buf,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
133	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(buf,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
134	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  bytes. ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  bytes. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "]  bytes. ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
136	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
137	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  ' "  +  length  + "'  is  too  large  for "  +  value  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value    '   "    +    value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
138	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for "  +  length  + "  bytes  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
139	[BUG]  [BUGGY]  BigInteger[]  b  =  val.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  val.toByteArray()  +  1;  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  val.toByteArray()  +  1;	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
140	[BUG]  [BUGGY]  BigInteger[]  b  =  val.toByteArray(len);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  val.toByteArray(len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  val.toByteArray(len);	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "] ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "] ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "] ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
142	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
143	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  bytes. ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  bytes. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "]  bytes. ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
144	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value   "  +  val.value  + "  is  too  large  for "  +  length  + "  value.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
145	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
146	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
147	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
148	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
149	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  field.   ");	  new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
150	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
151	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
152	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
153	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + "  value.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  val.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
156	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  val.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  val  + "  is  too  large  for   "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  val  + "  is  too  large  for   "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  val  + "  is  too  large  for   "  +  value  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    len    +   "    is    too    large    for       "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
158	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  value  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  value  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  value  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    len    +   "    is    too    large    for       "    +    value    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
159	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
160	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.getText()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getText()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
161	[BUG]  [BUGGY]  BigInteger  field  =(BigInteger)val.get(len);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(BigInteger)val.get(len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(BigInteger)val.get(len);	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
163	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "]  bytes.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "]  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  value  + "  is  too  large  for   "  +  length  + "]  bytes.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
165	[BUG]  [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  bytes.   ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  bytes.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(val  ==  null)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  bytes.   ");  }	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
166	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.toString()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
167	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.toString()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
168	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.toString()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException(val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException(val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
170	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
171	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  value.   ");	  Throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
172	[BUG]  [BUGGY]  if(val.length  >  0)  {  throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(val.length  >  0)  {  throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(val.length  >  0)  {  throw  new  IllegalArgumentException( "Value   "  +  val.length  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  throw    new    IllegalArgumentException(   "Value       "    +    val.length    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
173	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.length  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.length    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
174	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  -  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value  -  1);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
175	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  +  len);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value  +  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value  +  len);	  BigInteger    field    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
176	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwable  t  =  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
177	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(buf,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
178	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len  +  1);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len  +  1);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  len  +  1);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(buf,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
179	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value  +  len);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value  +  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value  +  len);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
180	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  val  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  val  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    length    +   "    is    too    large    for       "    +    val    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
181	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray()  +  length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray()  +  length;  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray()  +  length;	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
182	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray(length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray(length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray(length);	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
183	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  length]  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  length]  =  val.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  length]  =  val.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(val,  0,  buf,  offset  +  len,  b.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(val,  0,  buf,  offset  +  len,  b.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(val,  0,  buf,  offset  +  len,  b.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(val,  0,  buf,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(val,  0,  buf,  offset  +  len,  length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(val,  0,  buf,  offset  +  len,  length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset  +  length,  val.length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset  +  length,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(buf,  0,  buf,  offset  +  length,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
187	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length  ==  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
188	[BUG]  [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	negative  &&(val  ==  null  ||  val.length!=  0))  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   ",   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
190	[BUG]  [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off,  length);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
191	[BUG]  [BUGGY]  byte  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  byte  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	byte  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
192	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  value.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  length,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
193	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  value.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  off  +  len,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
194	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  value.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  value.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  value.length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
195	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + ",  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + ",  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + ",  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
196	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for "  +  length  + "  bytes  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    bytes.       ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
197	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  [Delete]  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	[Delete]	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
198	[BUG]  [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
199	[BUG]  [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
200	[BUG]  [BUGGY]  BigInteger  field  =(bigInteger)val.clone();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =(bigInteger)val.clone();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =(bigInteger)val.clone();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
201	[BUG]  [BUGGY]  BigInteger  field  =  val.clone();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.clone();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.clone();	  BigInteger    field    =(BigInteger)val.clone();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
202	[BUG]  [BUGGY]  BigInteger  field  =  val.toByteArray(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  field  =  val.toByteArray(value);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  field  =  val.toByteArray(value);	  BigInteger    field    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
205	[BUG]  [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	final  Throwable  t  =  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  bytes.   ");	  final    Throwable    t    =    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
206	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");	  Throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
207	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  value.length);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    value.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
208	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  b.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  b.toByteArray();  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  buf[off  +  len]  =  b.toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value);    buf[off    +    len]    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
209	[BUG]  [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes.   ");	  new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
210	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
211	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
212	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
213	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value  ' "  +  val.value  + "'  is  too  large  for   "  +  length  + "  byte  field. ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.value    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
214	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + ",  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for   "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
215	[BUG]  [BUGGY]  BigInteger[]  b  =  val.toByteArray(Long.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger[]  b  =  val.toByteArray(Long.MAX_VALUE);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger[]  b  =  val.toByteArray(Long.MAX_VALUE);	  BigInteger[]    b    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
216	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off  +  len,  val.length);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
217	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  val.byteValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value   "  +  val.byteValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value   "  +  val.byteValue()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.longValue()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
218	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.toString()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
219	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + ", ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + ", ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.value  + "  is  too  large  for   "  +  length  + ", ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
220	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  of  type. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  of  type. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  bytes  of  type. ");	  Throwables.throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
221	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
222	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    value    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
223	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.getName()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value       "    +    val.getName()    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
224	[BUG]  [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
225	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset  +  len);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    bytes    field.       ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
227	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value[ "  +  val  + "]  is  too  large  for "  +  length  + "  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "]    is    too    large    for   "    +    length    +   "    bytes    field.       ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
228	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + "  byte  field. ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
229	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value  ' "  +  val.getName()  + "'  is  too  large  for   "  +  length  + ",  byte  field.   ");	  throw    new    IllegalArgumentException(   "Value    '   "    +    val.getName()    +   "'    is    too    large    for       "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
230	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes  field.   ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
231	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes. ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes. ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for "  +  length  + "  bytes. ");	  throw    new    IllegalArgumentException(   "Value[   "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  length,  val.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(b,  0,  buf,  off  +  length,  val.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(b,  0,  buf,  off  +  length,  val.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(val,  0,  buf,  off  +  len,  b.length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  System.arraycopy(val,  0,  buf,  off  +  len,  b.length);  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	System.arraycopy(val,  0,  buf,  off  +  len,  b.length);	  System.arraycopy(b,    0,    buf,    offset    +    len,    val.length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
234	[BUG]  [BUGGY]  if(length  >  0)  {  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  if(length  >  0)  {  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	if(length  >  0)  {  BigInteger  field  =  BigInteger.valueOf(value);  System.arraycopy(b,  0,  buf,  off,  len);  }	  BigInteger    field    =    BigInteger.valueOf(value);    System.arraycopy(b,    0,    buf,    off,    len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
235	[BUG]  [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
236	[BUG]  [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
237	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  field   "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  field   "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  field   "  +  val.toString()  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
238	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Valued  value:  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Valued  value:  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Valued  value:  ' "  +  val.toString()  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
239	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	Throwables.throw  new  IllegalArgumentException( "Value[ "  +  val.toString()  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");	  Throwables.throw    new    IllegalArgumentException(   "Value       "    +    val.toString()    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
240	[BUG]  [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
241	[BUG]  [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {      [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }  [BUGGY]       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	523	524	1	replace	try  {  [Delete]  catch(IllegalArgumentException  e)  {  throw  new  IllegalArgumentException( "Value[ "  +  val  + "  is  too  large  for   "  +  length  + "]  byte  field.   ");  }	  if(val    ==    null)    {    throw    new    IllegalArgumentException(   "Value[   "    +    val    +   "    is    too    large    for       "    +    length    +   "]    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
