bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  max  =  offset  -  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  offset  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  offset  -  bits;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
2	[BUG]  [BUGGY]  final  long  max  =  offset  -  bits.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  -  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  -  bits.length;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
3	[BUG]  [BUGGY]  final  long  max  =  buf.length  -  bits;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  buf.length  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  buf.length  -  bits;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
4	[BUG]  [BUGGY]  final  long  max  =  size  -  bits;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  size  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  size  -  bits;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
5	[BUG]  [BUGGY]  final  long  max  =  offset  -  length;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  -  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  -  length;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
6	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  length;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
7	[BUG]  [BUGGY]  final  int  max  =  1  <  <  end  +  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  end  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  end  +  offset;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
8	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  bits;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
9	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  end;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  end;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  end;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
10	[BUG]  [BUGGY]  final  long  max  =  1  <  <  len  +  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  len  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  len  +  offset;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
11	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  offset  +  length;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
12	[BUG]  [BUGGY]  final  long  max  =  1  <  <  2  +  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  2  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  2  +  bits;	  final    long    max    =    1    <    <    2;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  +  bits;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  +  bits;	  final    long    max    =    1    <    <    length    +    bits;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
14	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  /  bits;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  /  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  /  bits;	  final    long    max    =    1    <    <    length    +    bits;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
15	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  +  bits.length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  +  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  +  bits.length;	  final    long    max    =    1    <    <    length    +    bits;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
16	[BUG]  [BUGGY]  final  long  max  =  1  <  <  size  +  bits;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  size  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  size  +  bits;	  final    long    max    =    1    <    <    length    +    bits;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
17	[BUG]  [BUGGY]  final  long  max  =  1  <  <  16L;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  16L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  16L;	  final    long    max    =    1    <    <    16;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
18	[BUG]  [BUGGY]  final  int  max  =  1  <  <  16;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  16;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  16;	  final    long    max    =    1    <    <    16;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
19	[BUG]  [BUGGY]  final  long  max  =  1  <  <  24;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  24;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  24;	  final    long    max    =    1    <    <    16;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
20	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  /  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  /  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  /  1;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
21	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  +  1;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
22	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  +  2;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  +  2;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
23	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  /  2;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  /  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  /  2;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
24	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  negative);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
25	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  size);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  size);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  size);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset,  length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  offset);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
29	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  offset,  bits);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  offset,  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  offset,  bits);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
30	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  offset,  length);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
31	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits,  length);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
32	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset,  length  +  1);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
33	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset,  length  -  1);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
34	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length  -  2);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset,  length  -  2);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
35	[BUG]  [BUGGY]  final  int  max  =  1L  <  <  8;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  <  <  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  <  <  8;	  final    int    max    =    1L    <    <    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
36	[BUG]  [BUGGY]  final  int  max  =  1L  <  <  2;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  <  <  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  <  <  2;	  final    int    max    =    1L    <    <    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
37	[BUG]  [BUGGY]  final  int  max  =  1L  <  <  3;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  <  <  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  <  <  3;	  final    int    max    =    1L    <    <    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
38	[BUG]  [BUGGY]  final  long  max  =  1L  -  value.length;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  value.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  value.length;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
39	[BUG]  [BUGGY]  final  long  max  =  value  -  1L;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  1L;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  final  long  max  =  1L  -  value  +  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  value  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  value  +  1;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  final  long  max  =  1  -  value;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  -  value;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  -  value;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  final  long  max  =  1L  -  bits;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  bits;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  final  long  max  =  1L  -  value.longValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  value.longValue();  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  value.longValue();	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  final  long  max  =  1L  -  value  *  bits;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  value  *  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  value  *  bits;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
45	[BUG]  [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
46	[BUG]  [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
47	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
48	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  length);	  final    long    max    =    1    <    <    (bits    -    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
49	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (length  -  bits);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (length  -  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (length  -  bits);	  final    long    max    =    1    <    <    (bits    -    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
50	[BUG]  [BUGGY]  final  long  max  =  1  <  <  10;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  10;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  10;	  final    long    max    =    1    <    <    6;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
51	[BUG]  [BUGGY]  final  int  max  =  0xfffl  &  bits;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xfffl  &  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xfffl  &  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
52	[BUG]  [BUGGY]  final  int  max  =  0xfffl  -  bits;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xfffl  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xfffl  -  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
53	[BUG]  [BUGGY]  final  int  max  =  0xffff  &  bits;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xffff  &  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xffff  &  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
54	[BUG]  [BUGGY]  final  int  max  =  0xffl  &  bits;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xffl  &  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xffl  &  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
55	[BUG]  [BUGGY]  final  int  max  =  0xfffl  /  bits;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xfffl  /  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xfffl  /  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
56	[BUG]  [BUGGY]  final  int  max  =  0xfffL  <  <  bits;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xfffL  <  <  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xfffL  <  <  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
57	[BUG]  [BUGGY]  final  int  max  =  0xffl  -  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0xffl  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0xffl  -  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
58	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  offset  +  bits);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  offset  +  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  offset  +  bits);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
59	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset  +  length);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset  +  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  offset  +  length);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
60	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  offset  +  length);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  offset  +  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  offset  +  length);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
61	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  length,  negative);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
62	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length,  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length,  value.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  length,  value.length);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
63	[BUG]  [BUGGY]  final  long  max  =  1L  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  +  bits;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
64	[BUG]  [BUGGY]  final  long  max  =  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
65	[BUG]  [BUGGY]  final  int  max  =  1L  +  4;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  +  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  +  4;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
66	[BUG]  [BUGGY]  final  long  max  =  1L  *  4;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  *  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  *  4;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
67	[BUG]  [BUGGY]  final  long  max  =  1L  /  4;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  /  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  /  4;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
68	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits  +  width;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits  +  width;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits  +  width;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
69	[BUG]  [BUGGY]  final  long  max  =  1  <  <  width  +  buf.length;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  width  +  buf.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  width  +  buf.length;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
70	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  width  +  1;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  width  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  width  +  1;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
71	[BUG]  [BUGGY]  final  long  max  =  1  <  <  size  +  width;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  size  +  width;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  size  +  width;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
72	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  offset;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  length  +  offset;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
73	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits  +  offset  +  length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits  +  offset  +  length;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
74	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  +  offset  +  length;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
75	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  offset  +  length  -  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  offset  +  length  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  offset  +  length  -  1;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
76	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf  +  offset  +  length;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
77	[BUG]  [BUGGY]  final  long  max  =  1  <  <  size  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  size  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  size  +  offset  +  length;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
78	[BUG]  [BUGGY]  final  int  max  =  1l  -  offset;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1l  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1l  -  offset;	  final    long    max    =    1l    -    offset;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
79	[BUG]  [BUGGY]  final  long  max  =  1  -  bits;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  -  bits;	  final    long    max    =    1l    -    offset;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
80	[BUG]  [BUGGY]  final  long  max  =  value  -  offset;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  offset;	  final    long    max    =    1l    -    offset;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
81	[BUG]  [BUGGY]  final  int  max  =  1L  -  offset;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  offset;	  final    long    max    =    1l    -    offset;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
82	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  -  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  -  1;	  final    long    max    =    1    <    <    length    -    1;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
83	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  -  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  -  1;	  final    long    max    =    1    <    <    length    -    1;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
84	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  /  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  /  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  /  1;	  final    long    max    =    1    <    <    length    -    1;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
85	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  2;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  2;	  final    long    max    =    1    <    <    length    -    1;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
86	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  offset,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
87	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  offset,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  offset,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  offset,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
88	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  value,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  value,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  value,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
89	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (value  -  offset,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (value  -  offset,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (value  -  offset,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
90	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  length,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  length,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  length,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
91	[BUG]  [BUGGY]  final  long  max  =  value  -  1l;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  1l;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  1l;	  final    long    max    =    1l    -    value;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
92	[BUG]  [BUGGY]  final  long  max  =  1l  -  value.length;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1l  -  value.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1l  -  value.length;	  final    long    max    =    1l    -    value;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
93	[BUG]  [BUGGY]  final  long  max  =  1  -  value.length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  -  value.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  -  value.length;	  final    long    max    =    1l    -    value;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
94	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  length;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
95	[BUG]  [BUGGY]  final  int  max  =  1  <  <  offset  +  bits;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  offset  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  offset  +  bits;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
96	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value  +  bits;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value  +  bits;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
97	[BUG]  [BUGGY]  final  long  max  =  1  <  <  val  +  bits;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  val  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  val  +  bits;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
98	[BUG]  [BUGGY]  final  int  max  =  1  <  <  12;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  12;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  12;	  final    long    max    =    1    <    <    12;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
99	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits.length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits.length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
100	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
101	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
102	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  +  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  +  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
103	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK,  bits.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK,  bits.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  *  BYTE_MASK,  bits.length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
104	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  2);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  2);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value.length  -  2);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
105	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  -  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  -  1;	  final    long    max    =    1    <    <    bits.length    -    1;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
106	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  1L;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  1L;	  final    long    max    =    1    <    <    bits.length    -    1;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
107	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  offset);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  offset);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  offset);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
108	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  *  bits);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  *  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  *  bits);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
109	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits,  negative);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
110	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits  +  1);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
111	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  offset);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits,  offset);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
112	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  value);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits,  value);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits,  value);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
113	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  3L;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  3L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  3L;	  final    long    max    =    1L    <    <    2L;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
114	[BUG]  [BUGGY]  final  long  max  =  1L  -  2L;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  2L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  2L;	  final    long    max    =    1L    <    <    2L;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
115	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  24L;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  24L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  24L;	  final    long    max    =    1L    <    <    2L;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
116	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (value  *  BYTE_MASK,  bits);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (value  *  BYTE_MASK,  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (value  *  BYTE_MASK,  bits);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
117	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  +  1);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  +  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value);    	non-compiled	[CE]  	17	None	replace
118	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value);  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK,  value);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value);    	non-compiled	[CE]  	17	None	replace
119	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value  -  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
120	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK  +  1);  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK  +  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    +    1);    	non-compiled	[CE]  	20	None	replace
121	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  2);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  2);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  2);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    +    1);    	non-compiled	[CE]  	20	None	replace
122	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  /  1);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  /  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK  /  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    +    1);    	non-compiled	[CE]  	20	None	replace
123	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  *  BYTE_MASK  +  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    +    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
124	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  -  offset;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  -  offset;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  	60	None	replace
125	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  -  2;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  -  2;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
126	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  &&  offset  <  =  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  &&  offset  <  =  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  &&  offset  <  =  length;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
127	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length?  bits.length  :  0;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length?  bits.length  :  0;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length?  bits.length  :  0;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  	60	None	replace
128	[BUG]  [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  	79	None	replace
129	[BUG]  [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  	79	None	replace
130	[BUG]  [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  	79	None	replace
131	[BUG]  [BUGGY]  final  int  max  =  1  <  <  8  +  bits;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  8  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  8  +  bits;	  final    int    max    =    1    <    <    8;    	non-compiled	[CE]  	10	None	replace
132	[BUG]  [BUGGY]  final  int  max  =  1  <  <  6;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  6;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  6;	  final    int    max    =    1    <    <    8;    	non-compiled	[CE]  	10	None	replace
133	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  -  bits;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  -  bits;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
134	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  +  1;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  +  1;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
135	[BUG]  [BUGGY]  final  int  max  =  1  <  <  end;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  end;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  end;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
136	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  +  2;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  +  2;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
137	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (length  -  1);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (length  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (length  -  1);	  final    int    max    =    1    <    <    (bits    -    1);    	non-compiled	[CE]  	13	None	replace
138	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  1);	  final    int    max    =    1    <    <    (bits    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
139	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  2);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  2);	  final    int    max    =    1    <    <    (bits    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
140	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  /  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  /  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  /  1);	  final    int    max    =    1    <    <    (bits    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
141	[BUG]  [BUGGY]  final  long  max  =  1  -  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  -  offset;	  final    long    max    =    1L    -    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
142	[BUG]  [BUGGY]  final  long  max  =  1L  -  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  offset  +  length;	  final    long    max    =    1L    -    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
143	[BUG]  [BUGGY]  final  int  max  =  1  -  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  -  offset;	  final    long    max    =    1L    -    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
144	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  BYTE_MASK);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  BYTE_MASK);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
145	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  negative);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
146	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK)+  1;	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
147	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  /  BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  /  BYTE_MASK);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  /  BYTE_MASK);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
148	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  value.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK,  value.length);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
149	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (value  -  bits);  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (value  -  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (value  -  bits);	  final    long    max    =    1    <    <    (bits    -    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
150	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  value);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  value);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  value);	  final    long    max    =    1    <    <    (bits    -    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
151	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  value);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  value);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  value);	  final    long    max    =    1    <    <    (bits    -    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
152	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  value  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  value  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  value  +  1);	  final    long    max    =    1    <    <    (bits    -    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
153	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  value.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  value.length);	  final    long    max    =    1    <    <    (bits    -    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
154	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  4;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  4;	  final    long    max    =    1    <    <    bits.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
155	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  3;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  3;	  final    long    max    =    1    <    <    bits.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
156	[BUG]  [BUGGY]  final  int  max  =  1  <  <  10;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  10;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  10;	  final    int    max    =    1    <    <    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
157	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  offset  +  1);	  final    int    max    =    1    <    <    (bits    -    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
158	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  offset)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  offset)+  1;	  final    int    max    =    1    <    <    (bits    -    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
159	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK)+  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
160	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)/  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)/  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)/  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
161	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  2;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  2;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
162	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  length)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  length)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  length)+  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
163	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  *  BYTE_MASK)+  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
164	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  3;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  3;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
165	[BUG]  [BUGGY]  final  long  max  =  1L  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  +  1;	  final    long    max    =    1L    +    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
166	[BUG]  [BUGGY]  final  int  max  =  1L  +  8;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  +  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  +  8;	  final    long    max    =    1L    +    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
167	[BUG]  [BUGGY]  final  long  max  =  1L  *  8;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  *  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  *  8;	  final    long    max    =    1L    +    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
168	[BUG]  [BUGGY]  final  long  max  =  1L  /  8;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  /  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  /  8;	  final    long    max    =    1L    +    8;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
169	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
170	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
171	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
172	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
173	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
174	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  width;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  width;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  width;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
175	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  12;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  12;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  12;	  final    long    max    =    1L    <    <    6;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  2);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  2);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  2);	  final    long    max    =    1    <    <    (bits    -    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
177	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  1,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  1,  length);	  final    long    max    =    1    <    <    (bits    -    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
178	[BUG]  [BUGGY]  final  long  max  =  value  /  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  /  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  /  bits;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
179	[BUG]  [BUGGY]  final  int  max  =  value  -  bits;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  value  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  value  -  bits;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  final  long  max  =  value  -  bits.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  bits.length;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
181	[BUG]  [BUGGY]  final  long  max  =  value  -  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  bits  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  bits  +  1;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  final  long  max  =  value  -  bits  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  bits  *  BYTE_MASK;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  bits  *  BYTE_MASK;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
183	[BUG]  [BUGGY]  final  int  max  =  1  <  <  2  +  bits;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  2  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  2  +  bits;	  final    int    max    =    1    <    <    2;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
184	[BUG]  [BUGGY]  final  int  max  =  1  <  <  3;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  3;	  final    int    max    =    1    <    <    2;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
185	[BUG]  [BUGGY]  final  int  max  =  1L  -  bits.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  bits.length;	  final    int    max    =    1l    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
186	[BUG]  [BUGGY]  final  int  max  =  1  -  bits;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  -  bits;	  final    int    max    =    1l    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
187	[BUG]  [BUGGY]  final  int  max  =  1  -  bits.length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  -  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  -  bits.length;	  final    int    max    =    1l    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
188	[BUG]  [BUGGY]  final  int  max  =  1  <  <  val  -  bits;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  val  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  val  -  bits;	  final    int    max    =    1l    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
189	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits  +  length;	  final    long    max    =    1    <    <    bits    +    length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
190	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  +  buf.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  +  buf.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  +  buf.length;	  final    long    max    =    1    <    <    bits    +    length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
191	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  length  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  length  -  1;	  final    long    max    =    1    <    <    bits    +    length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
192	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  length  +  1;	  final    long    max    =    1    <    <    bits    +    length;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
193	[BUG]  [BUGGY]  final  int  max  =  1L  -  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  2;	  final    long    max    =    1L    -    2;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
194	[BUG]  [BUGGY]  final  long  max  =  value.length  -  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value.length  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value.length  -  2;	  final    long    max    =    1L    -    2;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
195	[BUG]  [BUGGY]  final  long  max  =  value  -  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  2;	  final    long    max    =    1L    -    2;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
196	[BUG]  [BUGGY]  final  long  max  =  1L  *  2;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  *  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  *  2;	  final    long    max    =    1L    -    2;    	non-compiled	[CE]  	37	None	replace
197	[BUG]  [BUGGY]  final  int  max  =  1L  -  4;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  4;	  final    long    max    =    1L    -    4;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
198	[BUG]  [BUGGY]  final  long  max  =  value  -  4;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  4;	  final    long    max    =    1L    -    4;    	non-compiled	[CE]  	57	None	replace
199	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  offset  +  length;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
200	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset,  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset,  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  offset,  length;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
201	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf.length  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf.length  -  offset;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
202	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  bits.length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  bits.length;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
203	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  length;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
204	[BUG]  [BUGGY]  final  int  max  =  1  <  <  data.length;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  data.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  data.length;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
205	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf.length;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf.length;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
206	[BUG]  [BUGGY]  final  long  max  =  1  <  <  data.length  -  bits;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  data.length  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  data.length  -  bits;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
207	[BUG]  [BUGGY]  final  long  max  =  1  <  <  this.data.length;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  this.data.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  this.data.length;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
208	[BUG]  [BUGGY]  final  long  max  =  1  <  <  size;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  size;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  size;	  final    long    max    =    1    <    <    offset;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
209	[BUG]  [BUGGY]  final  long  max  =  1  <  <  width;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  width;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  width;	  final    long    max    =    1    <    <    offset;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
210	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  offset;	  final    long    max    =    1    <    <    length    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
211	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  bits  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  bits  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  bits  +  offset;	  final    long    max    =    1    <    <    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
212	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  -  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  -  bits;	  final    long    max    =    1    <    <    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
213	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  bits,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  bits,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  bits,  negative);	  final    long    max    =    1    <    <    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
214	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  1;	  final    long    max    =    1    <    <    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
215	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  1;	  final    long    max    =    1    <    <    length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
216	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  +  offset;	  final    long    max    =    1    <    <    length    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
217	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  /  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  /  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  /  offset;	  final    long    max    =    1    <    <    length    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
218	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  +  offset  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  +  offset  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  +  offset  +  bits;	  final    long    max    =    1    <    <    length    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
219	[BUG]  [BUGGY]  final  long  max  =  1L  -  3;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  3;	  final    long    max    =    1L    <    <    3;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
220	[BUG]  [BUGGY]  final  long  max  =  1L  +  3;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  +  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  +  3;	  final    long    max    =    1L    <    <    3;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
221	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  10;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  10;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  10;	  final    long    max    =    1L    <    <    3;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
222	[BUG]  [BUGGY]  final  int  max  =  1  <  <  buf  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  buf  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  buf  +  offset;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
223	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf  +  length;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
224	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf  +  offset  +  bits;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
225	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf  +  offset,  length;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf  +  offset,  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf  +  offset,  length;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
226	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  -  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf  +  offset  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf  +  offset  -  bits;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
227	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  /  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  /  2;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
228	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  +  3;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  +  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  +  3;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
229	[BUG]  [BUGGY]  final  int  max  =  length  -  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  length  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  length  -  bits;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
230	[BUG]  [BUGGY]  final  long  max  =  length  -  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  length  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  length  -  offset;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
231	[BUG]  [BUGGY]  final  long  max  =  offset  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  +  bits;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
232	[BUG]  [BUGGY]  final  long  max  =  width  -  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  width  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  width  -  bits;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
233	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8  +  offset;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
234	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8  +  length;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
235	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8  +  bits.length;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8  +  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8  +  bits.length;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
236	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8  +  size;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8  +  size;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8  +  size;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
237	[BUG]  [BUGGY]  final  long  max  =  1  <  <  16  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  16  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  16  +  bits;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
238	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  16L;  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  16L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  16L;	  final    long    max    =    1L    <    <    8L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
239	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  end);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  end);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  end);	  final    long    max    =    1    <    <    end;    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
240	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value;	  final    long    max    =    1    <    <    end;    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
241	[BUG]  [BUGGY]  final  int  max  =  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1;	  final    long    max    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
242	[BUG]  [BUGGY]  final  long  max  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  0;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  0;	  final    long    max    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
243	[BUG]  [BUGGY]  final  long  max  =(bits  >  0)?  bits  :  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  >  0)?  bits  :  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  >  0)?  bits  :  1;	  final    long    max    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
244	[BUG]  [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  1  :  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  1  :  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  >  0)?  bits  -  1  :  1;	  final    long    max    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
245	[BUG]  [BUGGY]  final  long  max  =(bits  >  0)?  bits  :  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  >  0)?  bits  :  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  >  0)?  bits  :  1L;	  final    long    max    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
246	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
247	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
248	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
249	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
250	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
251	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
252	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  end;  idx++)  {  buf[idx]  =  value;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  end;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  end;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
253	[BUG]  [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
254	[BUG]  [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value.length  >  0)||(bits  >=  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
255	[BUG]  [BUGGY]  While(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  While(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	While(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
256	[BUG]  [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
257	[BUG]  [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value.length  >  0)||(bits  ==  0  &&  value.charAt(value.length  -  1)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
258	[BUG]  [BUGGY]  final  int  max  =  1L  -  8;  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  8;	  final    long    max    =    1L    -    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
259	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK  -  1);	  final    int    max    =    1    <    <    (bits    *    BYTE_MASK);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
260	[BUG]  [BUGGY]  final  long  max  =  1l  -  4;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1l  -  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1l  -  4;	  final    long    max    =    1l    <    <    4;    	non-compiled	[CE]  	1	None	replace
261	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  value;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  value;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  value;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
262	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  &&  negative;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  &&  negative;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  &&  negative;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
263	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  ||  negative;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  ||  negative;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  ||  negative;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
264	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  offset;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  offset;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
265	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  +  1;  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  negative  +  1;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
266	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  *  BYTE_MASK;  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  *  BYTE_MASK;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  negative  *  BYTE_MASK;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  	63	None	replace
267	[BUG]  [BUGGY]  final  int  max  =  1  <  <  val  &  bits;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  val  &  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  val  &  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  	9	None	replace
268	[BUG]  [BUGGY]  final  int  max  =  1L  -  value;  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  -  value;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  -  value;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  	9	None	replace
269	[BUG]  [BUGGY]  final  int  max  =  1  <  <  val?  1L  -  bits;  [CE]  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  val?  1L  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  val?  1L  -  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  	9	None	replace
270	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (length  -  offset);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (length  -  offset);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (length  -  offset);	  final    int    max    =    1    <    <    offset;    	non-compiled	[CE]  	76	None	replace
271	[BUG]  [BUGGY]  final  int  max  =  1  <  <  size;  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  size;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  size;	  final    int    max    =    1    <    <    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
272	[BUG]  [BUGGY]  final  int  max  =  1  <  <  chunks;  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  chunks;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  chunks;	  final    int    max    =    1    <    <    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
273	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits  +  offset,  length;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits  +  offset,  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits  +  offset,  length;	  final    int    max    =    1    <    <    bits    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
274	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK  -  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  *  BYTE_MASK  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  *  BYTE_MASK  -  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    -    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
275	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  length  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  length  -  1);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
276	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
277	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  value.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
278	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
279	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  size;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
280	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  buf.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  buf.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  buf.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
281	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  value;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  value;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  value;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
282	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  24;  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  24;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  24;	  final    long    max    =    1L    <    <    16;    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
283	[BUG]  [BUGGY]  final  int  max  =  1L  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  +  2;	  final    long    max    =    1L    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
284	[BUG]  [BUGGY]  final  long  max  =  1L  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  /  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  /  2;	  final    long    max    =    1L    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
285	[BUG]  [BUGGY]  final  long  max  =  value  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  +  2;	  final    long    max    =    1L    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
286	[BUG]  [BUGGY]  final  int  max  =  1l  -  8;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1l  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1l  -  8;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
287	[BUG]  [BUGGY]  final  long  max  =  1l;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1l;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1l;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
288	[BUG]  [BUGGY]  final  long  max  =  1l  /  8;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1l  /  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1l  /  8;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
289	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2L  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2L  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2L  +  offset  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
290	[BUG]  [BUGGY]  final  long  max  =  1L  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
291	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
292	[BUG]  [BUGGY]  final  long  max  =  1L  -  2L  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  -  2L  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  -  2L  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
293	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2L  +  length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2L  +  length  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2L  +  length  +  1;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
294	[BUG]  [BUGGY]  final  long  max  =  1L  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  +  offset  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
295	[BUG]  [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
296	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  length  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  length  +  1);	  final    long    max    =    1    <    <    (bits    -    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
297	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  /  length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  /  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  /  length);	  final    long    max    =    1    <    <    (bits    -    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
298	[BUG]  [BUGGY]  final  long  max  =  value  -  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  8;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
299	[BUG]  [BUGGY]  final  long  max  =  buf.length  -  8;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  buf.length  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  buf.length  -  8;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
300	[BUG]  [BUGGY]  if(bits  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
301	[BUG]  [BUGGY]  While(bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  While(bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	While(bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
302	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
303	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
304	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  2  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  2  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  2  +  1;	  final    long    max    =    1    <    <    bits.length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
305	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  2  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  2  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  2  +  offset;	  final    long    max    =    1    <    <    bits.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
306	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  6L;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  6L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  6L;	  final    long    max    =    1L    <    <    4L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
307	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2  +  bits;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
308	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2L  +  bits;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2L  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2L  +  bits;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
309	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2  +  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2  +  offset  +  length;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
310	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  4;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  4;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
311	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)+  1L;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
312	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (value.length  *  BYTE_MASK,  bits);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
313	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  length,  value.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  length,  value.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  length,  value.length);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
314	[BUG]  [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
315	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  4);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  4);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK  +  4);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
316	[BUG]  [BUGGY]  final  long  max  =  value  +  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  +  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  +  8;	  final    long    max    =    1L    +    8;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
317	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  *  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  *  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  *  2;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
318	[BUG]  [BUGGY]  if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
319	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
320	[BUG]  [BUGGY]  final  long  max  =  value  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  1;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
321	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value  -  bits;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value  -  bits;	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
322	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value  &&  value  <  =  bits);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value  &&  value  <  =  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value  &&  value  <  =  bits);	  final    long    max    =    1L    -    value;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
323	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  +  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  negative  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  negative  +  offset;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
324	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  buf.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  buf.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  buf.length;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
325	[BUG]  [BUGGY]  final  long  max  =  1  <  <  start  +  offset;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  start  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  start  +  offset;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
326	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value  +  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value  +  offset;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
327	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length)+  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  length)+  1;	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
328	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  length  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  length  -  1);	  final    long    max    =    1    <    <    (bits    -    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
329	[BUG]  [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
330	[BUG]  [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
331	[BUG]  [BUGGY]  negative  &&  bits  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
332	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  size);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  size);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset,  size);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
333	[BUG]  [BUGGY]  final  int  max  =  0  <  <  bits.length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0  <  <  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0  <  <  bits.length;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
334	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits.length  +  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits.length  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits.length  +  2;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
335	[BUG]  [BUGGY]  final  int  max  =  0  <  <  (bits  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0  <  <  (bits  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0  <  <  (bits  -  1);	  final    int    max    =    1    <    <    (bits    -    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
336	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;	  final    int    max    =    1    <    <    (bits    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
337	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  width;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  width;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  width;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
338	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length)+  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset,  length)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset,  length)+  1;	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
339	[BUG]  [BUGGY]  final  int  max  =  1  <  <  len;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  len;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  len;	  final    int    max    =    1    <    <    offset;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
340	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  bits.length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  bits.length;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
341	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  /  bits;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  /  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  /  bits;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
342	[BUG]  [BUGGY]  final  int  max  =  0  -  bits;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0  -  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
343	[BUG]  [BUGGY]  final  int  max  =  1  }  -  bits;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  }  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  }  -  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
344	[BUG]  [BUGGY]  final  int  max  =  1L  <  <  bits;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1L  <  <  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1L  <  <  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
345	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  positive);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  positive);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  positive);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
346	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)+  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)+  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
347	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)-  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)-  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  negative)-  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
348	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  1);	  final    long    max    =    1    <    <    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
349	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  bits);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  bits);	  final    long    max    =    1    <    <    0;    	non-compiled	[CE]  	87	None	replace
350	[BUG]  [BUGGY]  final  int  max  =  size  -  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  size  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  size  -  bits;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
351	[BUG]  [BUGGY]  final  double  max  =  length  -  bits;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  double  max  =  length  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  double  max  =  length  -  bits;	  final    long    max    =    length    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
352	[BUG]  [BUGGY]  final  long  max  =  1  <  <  size  +  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  size  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  size  +  offset;	  final    long    max    =    1    <    <    length    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
353	[BUG]  [BUGGY]  final  long  max  =  1  <  <  chunks  +  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  chunks  +  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  chunks  +  offset  +  length;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
354	[BUG]  [BUGGY]  final  long  max  =  offset  -  bits  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  -  bits  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  -  bits  +  length;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
355	[BUG]  [BUGGY]  final  long  max  =  offset  -  bits  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  -  bits  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  -  bits  +  1;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
356	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset;  idx++)  {  buf[idx]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
357	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  bits.length;  idx++)  {  buf[idx]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  bits.length;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  offset  +  bits.length;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
358	[BUG]  [BUGGY]  final  long  max  =  1  <  <  value  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  value  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  value  +  1;	  final    long    max    =    1    <    <    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
359	[BUG]  [BUGGY]  final  long  max  =  1  <  <  data.length  -  1;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  data.length  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  data.length  -  1;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
360	[BUG]  [BUGGY]  final  long  max  =  1  <  <  data.length  +  bits;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  data.length  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  data.length  +  bits;	  final    long    max    =    1    <    <    data.length;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
361	[BUG]  [BUGGY]  final  long  max  =  value  +  4;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  +  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  +  4;	  final    long    max    =    1L    +    4;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
362	[BUG]  [BUGGY]  final  int  max  =  1  <  <  bits  +  offset  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  bits  +  offset  -  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  bits  +  offset  -  1;	  final    int    max    =    1    <    <    bits    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
363	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  3);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  3);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  3);	  final    long    max    =    1    <    <    (bits    -    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
364	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  4);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  offset  +  4);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  offset  +  4);	  final    long    max    =    1    <    <    (bits    -    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
365	[BUG]  [BUGGY]  final  long  max  =  1  <  <  len;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  len;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  len;	  final    long    max    =    1    <    <    end;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
366	[BUG]  [BUGGY]  final  long  max  =(bits  <  0)?  bits  -  1  :  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  <  0)?  bits  -  1  :  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  <  0)?  bits  -  1  :  1;	  final    long    max    =    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
367	[BUG]  [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  1  :  0;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  1  :  0;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  >  0)?  bits  -  1  :  0;	  final    long    max    =    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
368	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  -  1L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  -  1L;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  -  1L;	  final    long    max    =    1    <    <    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
369	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  /  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  /  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  /  offset;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
370	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK)-  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK)-  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK)-  1;	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
371	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  +  1);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK  +  1);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
372	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_BACK_ENCODING);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_BACK_ENCODING);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_BACK_ENCODING);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
373	[BUG]  [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
374	[BUG]  [BUGGY]  negative  &&  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  negative  &&  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	negative  &&  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
375	[BUG]  [BUGGY]  if(bits  ==  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  ==  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  ==  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
376	[BUG]  [BUGGY]  if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits!=  0)  {  for(int  idx  =  offset;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
377	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8)+  bits;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8)+  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8)+  bits;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
378	[BUG]  [BUGGY]  final  int  max  =  0  <  <  bits;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0  <  <  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0  <  <  bits;	  final    int    max    =    1    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
379	[BUG]  [BUGGY]  final  int  max  =(bits  <  0)?  0xfffl  :  0xfffl;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =(bits  <  0)?  0xfffl  :  0xfffl;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =(bits  <  0)?  0xfffl  :  0xfffl;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
380	[BUG]  [BUGGY]  final  int  max  =(bits  <  0)?  0xfffl  :  0xfff;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =(bits  <  0)?  0xfffl  :  0xfff;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =(bits  <  0)?  0xfffl  :  0xfff;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  	84	None	replace
381	[BUG]  [BUGGY]  final  long  max  =  value  -  bits  +  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value  -  bits  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value  -  bits  +  offset;	  final    long    max    =    value    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
382	[BUG]  [BUGGY]  final  int  max  =  0l  -  bits;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0l  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0l  -  bits;	  final    int    max    =    1l    -    bits;    	non-compiled	[CE]  	5	None	replace
383	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  &&  buf.length  >  0;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  &&  buf.length  >  0;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  &&  buf.length  >  0;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
384	[BUG]  [BUGGY]  final  int  max  =  1  <  <  length  &&  offset  <  =  bits.length;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  length  &&  offset  <  =  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  length  &&  offset  <  =  bits.length;	  final    int    max    =    1    <    <    length;    	non-compiled	[CE]  	16	None	replace
385	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  &&  value  <  =  bits);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  &&  value  <  =  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  &&  value  <  =  bits);	  final    long    max    =    1L    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
386	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  0);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  0);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  0);	  final    int    max    =    1    <    <    0;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
387	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  bits);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  bits);	  final    int    max    =    1    <    <    0;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
388	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  +  3;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  +  3;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  +  3;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  	61	None	replace
389	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  1,  negative);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  1,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  1,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  	71	None	replace
390	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  /  offset,  negative);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  /  offset,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  /  offset,  negative);	  final    long    max    =    1    <    <    (bits    -    offset,    negative);    	non-compiled	[CE]  	71	None	replace
391	[BUG]  [BUGGY]  final  int  max  =  2  <  <  offset;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  2  <  <  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  2  <  <  offset;	  final    int    max    =    1    <    <    offset;    	non-compiled	[CE]  	76	None	replace
392	[BUG]  [BUGGY]  final  int  max  =  0L  -  bits;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  0L  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  0L  -  bits;	  final    int    max    =    1L    -    bits;    	non-compiled	[CE]  	9	None	replace
393	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  remaining);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  remaining);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  remaining);	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    negative);    	non-compiled	[CE]  	18	None	replace
394	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  -  offset  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  -  offset  +  1;	  final    long    max    =    1    <    <    bits.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
395	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
396	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK)-  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK)+    1;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
397	[BUG]  [BUGGY]  final  long  max  =  1  -  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  -  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  -  length;	  final    long    max    =    1L    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
398	[BUG]  [BUGGY]  final  long  max  =  value.length  -  8;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value.length  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value.length  -  8;	  final    long    max    =    1L    -    8;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
399	[BUG]  [BUGGY]  final  long  max  =  length  -  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  length  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  length  -  8;	  final    long    max    =    1L    -    8;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
400	[BUG]  [BUGGY]  final  long  max  =  bits  -  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  bits  -  8;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  bits  -  8;	  final    long    max    =    1l    -    8;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
401	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
402	[BUG]  [BUGGY]  bits  =  formatLongBinary(buf,  offset,  length,  negative);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  bits  =  formatLongBinary(buf,  offset,  length,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	bits  =  formatLongBinary(buf,  offset,  length,  negative);	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
403	[BUG]  [BUGGY]  final  int  max  =  1  <  <  chunks  +  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  chunks  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  chunks  +  offset;	  final    int    max    =    1    <    <    bits    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
404	[BUG]  [BUGGY]  final  int  max  =  1  <  <  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  offset  +  length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  offset  +  length;	  final    int    max    =    1    <    <    bits    +    offset;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
405	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  width;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  width;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  width;	  final    long    max    =    1    <    <    bits    +    width;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
406	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  start;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
407	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  length;  idx  <  bits.length;  idx++)  {  formatLongBinary(buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    formatLongBinary(buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
408	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  value,  length);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  value,  length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  value,  length);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
409	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  -  length,  buf.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  -  length,  buf.length);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  -  length,  buf.length);	  final    long    max    =    1    <    <    (bits    -    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
410	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  BYTE_MASK;  idx++)  {  buf[idx]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  BYTE_MASK;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  BYTE_MASK;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
411	[BUG]  [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  buf[idx]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  buf[idx]  =  value;  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  buf[idx]  =  value;  }	  if(bits    <    0)    {    for(int    idx    =    offset;    idx    <    bits.length;    idx++)    {    buf[idx]    =    value;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
412	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  +  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  +  2;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
413	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  2;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  2;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
414	[BUG]  [BUGGY]  final  long  max  =  1  <  <  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  offset  +  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  offset  +  2;	  final    long    max    =    1    <    <    length    +    2;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
415	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(value,  buf,  offset,  length,  negative);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatLongBinary(value,  buf,  offset,  length,  negative);  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
416	[BUG]  [BUGGY]  bits  =  formatLongBinary(value,  buf,  offset,  length,  negative);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  bits  =  formatLongBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	bits  =  formatLongBinary(value,  buf,  offset,  length,  negative);	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatLongBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
417	[BUG]  [BUGGY]  final  long  max  =  1  <  <  width  +  bits;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  width  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  width  +  bits;	  final    long    max    =    1    <    <    offset    +    bits;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
418	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value)+  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value)+  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (bits  *  BYTE_MASK,  value)+  1;	  final    long    max    =    1    <    <    (bits    *    BYTE_MASK,    value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
419	[BUG]  [BUGGY]  final  long  max  =  1L  <  <  2L  +  offset;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1L  <  <  2L  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1L  <  <  2L  +  offset;	  final    long    max    =    1L    <    <    2L    +    length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
420	[BUG]  [BUGGY]  final  long  max  =  1  <  <  end  -  offset;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  end  -  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  end  -  offset;	  final    long    max    =    1    <    <    end    +    offset;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
421	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
422	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  short  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  short  field.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  short  field.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
423	[BUG]  [BUGGY]  final  long  max  =  1  <  <  length  &&  negative;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  length  &&  negative;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  length  &&  negative;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
424	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  positive;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits.length  &&  positive;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits.length  &&  positive;	  final    long    max    =    1    <    <    bits.length    &&    negative;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
425	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_MASK);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  &  BYTE_MASK  |  BYTE_MASK);	  final    int    max    =    1    <    <    (bits    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
426	[BUG]  [BUGGY]  final  long  max  =  1  <  <  8  -  bits;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  8  -  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  8  -  bits;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
427	[BUG]  [BUGGY]  final  long  max  =  1  +  offset  +  bits;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  +  offset  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  +  offset  +  bits;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
428	[BUG]  [BUGGY]  final  long  max  =  1  <  <  4  +  bits;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  4  +  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  4  +  bits;	  final    long    max    =    1    <    <    8    +    bits;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
429	[BUG]  [BUGGY]  ||(bits  <  0  &&  value  <  =  BYTE_MASK))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value  <  =  BYTE_MASK))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value  <  =  BYTE_MASK))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
430	[BUG]  [BUGGY]  ||(bits  <  0  &&  value  <  =  bits))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  ||(bits  <  0  &&  value  <  =  bits))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	||(bits  <  0  &&  value  <  =  bits))  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
431	[BUG]  [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
432	[BUG]  [BUGGY]  if(bits  <  0  ||  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  if(bits  <  0  ||  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	if(bits  <  0  ||  bits  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(bits    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
433	[BUG]  [BUGGY]  final  long  max  =  0xfffl  <  <  bits;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  0xfffl  <  <  bits;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  0xfffl  <  <  bits;	  final    int    max    =    0xffl    <    <    bits;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
434	[BUG]  [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  bits  +  length  +  BYTE_MASK;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  bits  +  length  +  BYTE_MASK;	  final    long    max    =    1    <    <    bits    +    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
435	[BUG]  [BUGGY]  final  long  max  =  1  <  <  buf.length  +  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  buf.length  +  offset;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  buf.length  +  offset;	  final    long    max    =    1    <    <    buf    +    offset;    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
436	[BUG]  [BUGGY]  final  long  max  =  offset  -  bits  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  -  bits  *  BYTE_MASK;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  -  bits  *  BYTE_MASK;	  final    long    max    =    offset    -    bits;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
437	[BUG]  [BUGGY]  final  long  max  =(bits  -  1)/  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  -  1)/  BYTE_MASK;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  -  1)/  BYTE_MASK;	  final    long    max    =    1;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
438	[BUG]  [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  offset  :  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =(bits  >  0)?  bits  -  offset  :  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =(bits  >  0)?  bits  -  offset  :  1;	  final    long    max    =    1;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
439	[BUG]  [BUGGY]  final  int  max  =  offset  <  <  bits.length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  offset  <  <  bits.length;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  offset  <  <  bits.length;	  final    int    max    =    1    <    <    bits.length;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
440	[BUG]  [BUGGY]  final  long  max  =  value.length  -  4;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  value.length  -  4;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  value.length  -  4;	  final    long    max    =    1L    -    4;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
441	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (length  -  bits  *  BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (length  -  bits  *  BYTE_MASK);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (length  -  bits  *  BYTE_MASK);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
442	[BUG]  [BUGGY]  final  long  max  =  1  <  <  (offset  -  bits);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  1  <  <  (offset  -  bits);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  1  <  <  (offset  -  bits);	  final    long    max    =    1    <    <    (length    -    bits);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
443	[BUG]  [BUGGY]  final  double  max  =  1  <  <  bits.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  double  max  =  1  <  <  bits.length  -  2;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  double  max  =  1  <  <  bits.length  -  2;	  final    long    max    =    1    <    <    bits.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
444	[BUG]  [BUGGY]  final  int  max  =  1  <  <  (bits  -  size);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  int  max  =  1  <  <  (bits  -  size);  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  int  max  =  1  <  <  (bits  -  size);	  final    int    max    =    1    <    <    (bits    -    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
445	[BUG]  [BUGGY]  final  long  max  =  offset  +  1  <  <  bits.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;      [BUGGY]  final  long  max  =  offset  +  1  <  <  bits.length  +  1;  [BUGGY]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	498	498	1	replace	final  long  max  =  offset  +  1  <  <  bits.length  +  1;	  final    long    max    =    1    <    <    bits.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
