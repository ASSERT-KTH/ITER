bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(negative  &&  value  <  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  max)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  if(negative  &&  value  <  =  val)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  =  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  =  val)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
6	[BUG]  [BUGGY]  if(negative  &&  value  <  =  max  -  1)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  =  max  -  1)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  =  max  -  1)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  if(value  &&  negative  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  &&  negative  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  &&  negative  <  =  max)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  if(negative  &&  value  >=  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  >=  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  >=  max)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if(value  <  =  negative  &&  max  <  =  val)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  <  =  negative  &&  max  <  =  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  <  =  negative  &&  max  <  =  val)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(buf  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf  ==  null)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf  ==  null)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  if(buf!=  null  ||  max  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  max  <  =  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  max  <  =  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  if(buf!=  null  ||  max  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  max  >=  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  max  >=  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  if(buf!=  null  ||  max  >=  val)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  max  >=  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  max  >=  val)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(buf!=  null  ||  max  ==  val)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  max  ==  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  max  ==  val)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if(buf!=  null  ||  max  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  max  ==  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  max  ==  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  if(value  ||  offset  <  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  offset  <  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  offset  <  max)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  if(negative  &&  offset  <  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  offset  <  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  offset  <  max)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  if(offset  <  =  max  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(offset  <  =  max  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(offset  <  =  max  ||  negative)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  if(offset  <  max  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(offset  <  max  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(offset  <  max  ||  negative)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  if(negative  ||  offset  <  length)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  <  length)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  <  length)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  if(value  ==  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  max)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  if(value  ==  value)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  value)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  value)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  if(value  ==  val)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  val)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(value  <  =  negative)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  <  =  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  <  =  negative)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(val  ==  negative)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(val  ==  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(val  ==  negative)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(value!=  max)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value!=  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value!=  max)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  if(negative  &&  offset  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  offset  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  offset  <  =  max)  {	  if(negative    ||    offset    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  if(value  ||  offset  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  offset  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  offset  <  =  max)  {	  if(negative    ||    offset    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(negative  ||  offset  >=  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  >=  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  >=  max)  {	  if(negative    ||    offset    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  if(negative  ||  offset  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  <  =  length)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  <  =  length)  {	  if(negative    ||    offset    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  if(!negative  &&  value  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  value  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  value  <  =  max)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(!negative  &&  max  >  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  max  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  max  >  max)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  if(!negative  &&  offset  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  offset  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  offset  <  =  max)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  if(buf!=  null  ||!negative)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||!negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||!negative)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if(!negative  &&  offset  >  max)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  offset  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  offset  >  max)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  if(value  ||  offset  >  max)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  offset  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  offset  >  max)  {	  if(negative    ||    offset    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  if(negative  &&  offset  >  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  offset  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  offset  >  max)  {	  if(negative    ||    offset    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  if(value  ||  negative  ||  offset  >  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  negative  ||  offset  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  negative  ||  offset  >  max)  {	  if(negative    ||    offset    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  if(negative  ||  offset  ==  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  ==  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  ==  max)  {	  if(negative    ||    offset    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  if(negative  ||  max  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  <  =  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  if(value  ||  negative  ||  max  >  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  negative  ||  max  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  negative  ||  max  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  if(negative  ||  max  >  value.length)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  >  value.length)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  >  value.length)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
43	[BUG]  [BUGGY]  if(negative  &&  max  >  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  max  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  max  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
44	[BUG]  [BUGGY]  if(negative  ||  max  >  val)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  >  val)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  >  val)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  if(max  >  negative  ||  max  >  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(max  >  negative  ||  max  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(max  >  negative  ||  max  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  if(negative  ||  max  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  <  =  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  <  =  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  if(negative  &&  max  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  max  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  max  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  if(value  ||  negative  ||  max  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ||  negative  ||  max  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ||  negative  ||  max  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  if(negative  ||  max  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  >=  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  >=  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  if(negative  ||  max  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  ==  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  ==  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  if(negative  ||  value  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  value  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  value  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  if(buf  ==  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf  ==  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf  ==  null  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  if(val  ==  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(val  ==  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(val  ==  null  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  null  ||  value.length  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  null  ||  value.length  <  =  max)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  if(value!=  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value!=  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value!=  null  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  null  ||  value.length  <  =  MAX_VALUE)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  null  ||  value.length  <  =  MAX_VALUE)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
57	[BUG]  [BUGGY]  if(buf  ==  null  ||  value.length  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf  ==  null  ||  value.length  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf  ==  null  ||  value.length  <  =  max)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  if(buf!=  null  ||  buf.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  buf.length  ==  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  buf.length  ==  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  if(buf!=  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  negative)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(buf!=  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  buffer.length  ==  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  buffer.length  ==  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  if(negative  ||  max  >  offset)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  >  offset)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  >  offset)  {	  if(negative    ||    offset    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  if(!negative  &&  offset  <  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  offset  <  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  offset  <  max)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  if(!negative  &&  offset  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  offset  <  =  length)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  offset  <  =  length)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  if(negative  ||  max  <  =  value)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  <  =  value)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  <  =  value)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  if(negative  ||  max  <  =  offset)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  <  =  offset)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  <  =  offset)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  if(negative  ||  max  >  bits)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  max  >  bits)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  max  >  bits)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  if(negative  ||  buffer  >  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  buffer  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  buffer  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  if(negative  ||  offset  <  bits)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  <  bits)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  <  bits)  {	  if(negative    ||    offset    <    max)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
69	[BUG]  [BUGGY]  if(negative  ||  value  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  value  ==  null)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  value  ==  null)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  if(value  ==  NULL  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  NULL  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  NULL  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  if(value  >=  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  >=  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  >=  null  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  for(int  i  =  offset;  i  <  offset;  i++)  {  buf[i]  =  value;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  value;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  if(negative  &&  value  <  =  bits)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  =  bits)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  =  bits)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(negative  &&  max  <  =  value)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  max  <  =  value)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  max  <  =  value)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(negative  &&  buf.length  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  buf.length  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  buf.length  <  =  max)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  if(negative  &&  value  <  =  offset)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  =  offset)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  =  offset)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(negative  ||  value  ==  buf.length)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  value  ==  buf.length)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  value  ==  buf.length)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  if(value  ==  negative  ||  offset  >  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  negative  ||  offset  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  negative  ||  offset  >  max)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  if(value!=  negative)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value!=  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value!=  negative)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  if(negative  ||  value  ==  max)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  value  ==  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  value  ==  max)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(buf  ==  negative)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf  ==  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf  ==  negative)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  if(negative  ||  bits  >  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  bits  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  bits  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  if(negative  ||  offset  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  offset  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  offset  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  if(value  ==  negative  ||  offset  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(value  ==  negative  ||  offset  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(value  ==  negative  ||  offset  <  =  max)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  if(buf  ==  null  ||  value  ==  negative)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf  ==  null  ||  value  ==  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf  ==  null  ||  value  ==  negative)  {	  if(value    ==    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
89	[BUG]  [BUGGY]  if(negative  ||  length  >  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  length  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  length  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
90	[BUG]  [BUGGY]  if(negative  ||  val  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  val  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  val  >  0)  {	  if(negative    ||    max    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
91	[BUG]  [BUGGY]  if(negative  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  val  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  val  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  if(negative  ||  length  >  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  ||  length  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  ||  length  >  max)  {	  if(negative    ||    max    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
93	[BUG]  [BUGGY]  if(buf!=  null  &&  value  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  &&  value  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  &&  value  <  =  max)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  if(buf!=  null  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  &&  buffer.length  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  &&  buffer.length  >  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
95	[BUG]  [BUGGY]  if(buf!=  null  &&  buf.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  &&  buf.length  >  0)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  &&  buf.length  >  0)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
96	[BUG]  [BUGGY]  if(buf!=  null  ||  buffer.length  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  ||  buffer.length  <  =  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  ||  buffer.length  <  =  max)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
97	[BUG]  [BUGGY]  if(buf!=  null  &&  buffer.length  >  max)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(buf!=  null  &&  buffer.length  >  max)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(buf!=  null  &&  buffer.length  >  max)  {	  if(buf!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
98	[BUG]  [BUGGY]  if(negative  &&  value  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(negative  &&  value  <  =  MAX_VALUE)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(negative  &&  value  <  =  MAX_VALUE)  {	  if(negative    &&    value    <    =    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  if(!negative  &&  offset  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(!negative  &&  offset  <  =  MAX_VALUE)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(!negative  &&  offset  <  =  MAX_VALUE)  {	  if(!negative)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  if(val  >=  null  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }    [BUGGY]  if(val  >=  null  ||  negative)  {  [BUGGY]    val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	504	504	1	replace	if(val  >=  null  ||  negative)  {	  if(value    ==    null    ||    negative)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
