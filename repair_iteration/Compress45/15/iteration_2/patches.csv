bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
2	[BUG]  [BUGGY]  while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
3	[BUG]  [BUGGY]  if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
4	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
5	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
6	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
7	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXIMUM_INT)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXIMUM_INT)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXIMUM_INT)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
8	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
13	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
14	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
15	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
16	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
17	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
18	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
19	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
20	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
21	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  {  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
22	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
23	[BUG]  [BUGGY]  while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	while(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
24	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
25	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
26	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
27	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.length  >  0))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.length  >  0))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.length  >  0))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
28	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  length  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  length  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  length  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
29	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.charAt(value.length  -  1)!=  '-'))  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.charAt(value.length  -  1)!=  '-'))  {  return  formatBigIntegerBytes  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	||(value  <  =  maxAsOctalChar  &&  value.length  >  0)||(value  >  maxAsOctalChar  &&  value.charAt(value.length  -  1)!=  '-'))  {  return  formatBigIntegerBytes	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
30	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
31	[BUG]  [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	long  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
32	[BUG]  [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	char  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
33	[BUG]  [BUGGY]  byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
34	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
35	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
36	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
37	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
38	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
39	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
40	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
41	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
42	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  -  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  -  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  -  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
43	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
44	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
45	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
46	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
47	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
48	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
49	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
50	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
51	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
52	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
53	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  getMaxAsOctalChar();	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  getMaxAsOctalChar();	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  char  maxAsOctalChar  =  getMaxAsOctalChar();	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(0);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(0);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(0);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
59	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
60	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
61	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
62	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
63	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
64	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
65	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
66	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
67	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
68	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
69	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
70	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
71	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
72	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
73	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
74	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
75	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  1);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  1);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
76	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
77	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  +  1);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  +  1);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  +  1);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  2);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  2);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length  -  2);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
79	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  -  1);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  -  1);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  -  1);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
80	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value.length,  value.length);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value.length,  value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(value.length,  value.length);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
81	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
82	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
83	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
84	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
85	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
86	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
87	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
88	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
89	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
90	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
91	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
92	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
93	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
94	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
95	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
96	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
97	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
98	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
99	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
100	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
101	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
102	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
103	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
104	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
105	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
106	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
107	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  {  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
108	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
109	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
110	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
111	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
112	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
113	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
114	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
115	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
116	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
117	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
118	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
119	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
120	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
121	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
122	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
123	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
124	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
125	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
126	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
127	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
128	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
129	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
130	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
131	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
132	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
133	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
134	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
135	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
136	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
137	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
138	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
139	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MINSIZE?  TarConstants.UIDLEN  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MINSIZE?  TarConstants.UIDLEN  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.MINSIZE?  TarConstants.UIDLEN  :  TarConstants.MAXID;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
140	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
141	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
142	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
143	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
144	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.UIDLEN;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
145	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
146	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
147	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
148	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
149	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  getMaxAsOctalChar(value);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
150	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
151	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  length);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
152	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
153	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(length);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
154	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
155	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
156	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
157	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
158	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
159	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
160	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
161	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
163	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
164	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
165	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
166	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
167	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
168	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
169	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
170	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1L;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
171	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
172	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
173	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
174	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
175	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);	  final    int    maxAsOctalChar    =    Math.min(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
176	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  +  1);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length  +  1);	  final    int    maxAsOctalChar    =    Math.min(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
177	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
178	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
179	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
180	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
181	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
182	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
183	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
184	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
185	[BUG]  [BUGGY]  final  byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
186	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
187	[BUG]  [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  char  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
188	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf,  offset);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
189	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
190	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
191	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
192	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
193	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
194	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
195	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
196	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
197	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
198	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
199	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
200	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
201	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
202	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
203	[BUG]  [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	long  maxAsOctalChar  =  getMaxAsOctalChar();	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
204	[BUG]  [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	char  maxAsOctalChar  =  getMaxAsOctalChar();	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
205	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar()  -  1;	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
206	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(length);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(length);	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
207	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(0);  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(0);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(0);	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
208	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value.longValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value.longValue();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value.longValue();	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
209	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  +  length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  +  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.longValue()  +  length;	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
210	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.intValue();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.intValue();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.intValue();	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
211	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  -  1;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.longValue()  -  1;	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
212	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  +  1;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.longValue()  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.longValue()  +  1;	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
213	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
214	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
215	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
216	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
217	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
218	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
219	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
220	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
221	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
222	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
223	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
224	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
225	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
226	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
227	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
228	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =(long)Math.floor(value);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =(long)Math.floor(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =(long)Math.floor(value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
229	[BUG]  [BUGGY]  final  byte  maxAsOctalChar  =(byte)Math.floor(value);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte  maxAsOctalChar  =(byte)Math.floor(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte  maxAsOctalChar  =(byte)Math.floor(value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
230	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(buf,  length);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(buf,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =(int)Math.floor(buf,  length);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
231	[BUG]  [BUGGY]  final  char  maxAsOctalChar  =(char)Math.floor(value);  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  char  maxAsOctalChar  =(char)Math.floor(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  char  maxAsOctalChar  =(char)Math.floor(value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
232	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(value,  length);  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(value,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =(int)Math.floor(value,  length);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
233	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =(int)Math.ceil(value);  [CE]  <identifier>  expected  [FE]                                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =(int)Math.ceil(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =(int)Math.ceil(value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
234	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
235	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
236	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
237	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  {  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
238	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
239	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
240	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  width  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
241	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
242	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
243	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
244	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
245	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(value,  length);	  int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
246	[BUG]  [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  long  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	long  maxAsOctalChar  =  getMaxAsOctalChar(value);	  int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
247	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(value.length);	  int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
248	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
249	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
250	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
251	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
252	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
253	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
254	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  this.maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
255	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    <    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
256	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    <    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
257	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    <    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
258	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
259	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
260	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
261	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
262	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
263	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
264	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
265	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(0);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(0);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
266	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(value);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
267	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getLongOctalChar();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getLongOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getLongOctalChar();	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
268	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
269	[BUG]  [BUGGY]  byte[]  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  byte[]  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	byte[]  maxAsOctalChar  =  getMaxAsOctalChar();	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
270	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getmaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getmaxAsOctalChar();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getmaxAsOctalChar();	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
271	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
272	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
273	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
274	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
275	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
276	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
277	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
278	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
279	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
280	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
281	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >>  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
282	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
283	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
284	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length()  -  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.length()  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length()  -  1;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
285	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value.length();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value.length();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value.length();	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
286	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length()  +  1;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.length()  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length()  +  1;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
287	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length()  -  2;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.length()  -  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length()  -  2;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
288	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length()  +  length;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.length()  +  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length()  +  length;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
289	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length()  *  2;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.length()  *  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length()  *  2;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
290	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
291	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
292	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
293	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
294	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
295	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
296	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  {  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
297	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
298	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
299	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
300	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
301	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
302	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  size  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  size  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  size  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
303	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
304	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
305	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
306	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
307	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
308	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
309	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
310	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
311	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
312	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
313	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
314	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
315	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
316	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
317	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
318	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
319	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
320	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
321	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
322	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
323	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
324	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
325	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
326	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
327	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
328	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINS_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINS_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MINS_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
329	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;	  int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
330	[BUG]  [BUGGY]  final  byte  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
331	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
332	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
333	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
334	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length.longValue();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length.longValue();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length.longValue();	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
335	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  buf.longValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  buf.longValue();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  buf.longValue();	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
336	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
337	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
338	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
339	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
340	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
341	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
342	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
343	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
344	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
345	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
346	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
347	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
348	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
349	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
350	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(length);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
351	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
352	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
353	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
354	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
355	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
356	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
357	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
358	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
359	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
360	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
361	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
362	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
363	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
364	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value,  value.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value,  value.length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(value,  value.length);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
365	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value.length,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  Math.max(value.length,  maxAsOctalChar);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(value.length,  maxAsOctalChar);	  final    int    maxAsOctalChar    =    Math.max(maxAsOctalChar,    value.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
366	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
367	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
368	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_CHAR;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
369	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
370	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
371	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
372	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
373	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  buf.length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  buf.length();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  buf.length();	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
374	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.charAt(0);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value.charAt(0);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.charAt(0);	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
375	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
376	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
377	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
378	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
379	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
380	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
381	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
382	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
383	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
384	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
385	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
386	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
387	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
388	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
389	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
390	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
391	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
392	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MIN_VALUE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
393	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
394	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  2;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
395	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
396	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
397	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MINID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
398	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
399	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
400	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
401	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
402	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
403	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
404	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
405	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
406	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
407	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
408	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_CHAR?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_CHAR?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_CHAR?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
409	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
410	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
411	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
412	[BUG]  [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  char  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  char  maxAsOctalChar  =  getMaxAsOctalChar(value);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
413	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
414	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
415	[BUG]  [BUGGY]  if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  0)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
416	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
417	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)return  formatLongOctalOrBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)return  formatLongOctalOrBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
418	[BUG]  [BUGGY]  if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
419	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
420	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
421	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
422	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
423	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
424	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
425	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
426	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MINSIZE?  TarConstants.MAXID  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MINSIZE?  TarConstants.MAXID  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MINSIZE?  TarConstants.MAXID  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
427	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
428	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
429	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
430	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID  &  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
431	[BUG]  [BUGGY]  int  maxAsOctalChar  =  length  -  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  int  maxAsOctalChar  =  length  -  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  length  -  getMaxAsOctalChar(buf);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
432	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
433	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
434	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
435	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
436	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
437	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
438	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
439	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
440	[BUG]  [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  value  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
441	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
442	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar()  +  length;	  final    int    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
443	[BUG]  [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  char  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	char  maxAsOctalChar  =  getMaxAsOctalChar(value);	  int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
444	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
445	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
446	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
447	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
448	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.VALUE_MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
449	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(buf,  value);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(buf,  value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =(int)Math.floor(buf,  value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
450	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXSIZE  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
451	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
452	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    width    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
453	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
454	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
455	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
456	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
457	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINIMUM_CHAR  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
458	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
459	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    2;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
460	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
461	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
462	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
463	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  +  1  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
464	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
465	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
466	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    int    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
467	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
468	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
469	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  -  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  -  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  -  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
470	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    value!=    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
471	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MINUTE?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
472	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
473	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
474	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    >>    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
475	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
476	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
477	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
478	[BUG]  [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
479	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
480	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
481	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
482	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    >>    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
483	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
484	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
485	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MIN_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MIN_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAX_VALUE?  TarConstants.MIN_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
486	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.MAX_VALUE?  TarConstants.MAX_VALUE  :  TarConstants.MAX_VALUE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
487	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
488	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
489	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
490	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
491	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length.length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length.length();  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length.length();	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
492	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
493	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  -  1;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  -  1;	  final    int    maxAsOctalChar    =    value.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
494	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
495	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  /  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  2  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    /    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
496	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
497	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
498	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MIN_VALUE?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
499	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    <    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
500	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
501	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
502	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.ARRAYLIT?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
503	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
504	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =(double)Math.floor(value);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =(double)Math.floor(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =(double)Math.floor(value);	  final    int    maxAsOctalChar    =(int)Math.floor(value);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
505	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
506	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  this.maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  this.maxAsOctalChar;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  this.maxAsOctalChar;	  final    int    maxAsOctalChar    =    value.longValue();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
507	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
508	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
509	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
510	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIMUM_CHAR;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIMUM_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINIMUM_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXIZE;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
511	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
512	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
513	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.ARRAY  |  TarConstants.MAXID  -  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY    |    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
514	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
515	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
516	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
517	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
518	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAX_VALUE    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
519	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
520	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.BYTE_MASK  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.BYTE_MASK  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.BYTE_MASK  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
521	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
522	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
523	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
524	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
525	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
526	[BUG]  [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
527	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
528	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
529	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
530	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.DEFAULT_ENCODING;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
531	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
532	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
533	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
534	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MINSIZE  :  TarConstants.MAXID;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
535	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MINSIZE;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
536	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.ARRAYLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
537	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  getMaxAsOctalChar(value);	  final    int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
538	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
539	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
540	[BUG]  [BUGGY]  if(value  <  =  LAST_VALID_BYTE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  LAST_VALID_BYTE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  LAST_VALID_BYTE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
541	[BUG]  [BUGGY]  if(value  <  =  0L)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  0L)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  0L)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
542	[BUG]  [BUGGY]  if(value  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
543	[BUG]  [BUGGY]  double  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  double  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	double  maxAsOctalChar  =  getMaxAsOctalChar(value);	  int    maxAsOctalChar    =    getMaxAsOctalChar(value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
544	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    -    1;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
545	[BUG]  [BUGGY]  double  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  double  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	double  maxAsOctalChar  =  getMaxAsOctalChar(buf);	  int    maxAsOctalChar    =    getMaxAsOctalChar(buf);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
546	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
547	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
548	[BUG]  [BUGGY]  if(value  <  =  0L)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  =  0L)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  0L)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
549	[BUG]  [BUGGY]  if(value  <  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  <  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  length)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalOrBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
550	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
551	[BUG]  [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  <  =  MAX_VALUE)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
552	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
553	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
554	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  }  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
555	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
556	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
557	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
558	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  *  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
559	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(offset);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(offset);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(offset);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
560	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(size);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(size);  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar(size);	  final    byte[]    maxAsOctalChar    =    getMaxAsOctalChar();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
561	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MILLIS_PER_CHAR  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MILLIS_PER_CHAR;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
562	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
563	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
564	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.TEST?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
565	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
566	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLISECOND;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLISECOND;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLISECOND;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
567	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
568	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
569	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {        [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]        final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
