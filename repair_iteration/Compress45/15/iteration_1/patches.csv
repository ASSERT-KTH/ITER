bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.min(maxAsOctalChar,  value.length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  Math.max(maxAsOctalChar,  value.length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.length();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  value.length();  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value.longValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  value.longValue();  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value.longValue();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(value);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =(int)Math.floor(value);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =(int)Math.floor(value);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length!=    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  <  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  >  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
24	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  width  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >>  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length!=  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
37	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >  TarConstants.ARRAYLIT?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  >=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    >    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.TEST?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MINSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar();  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  byte[]  maxAsOctalChar  =  getMaxAsOctalChar();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(value);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(value);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(value);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
62	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  getMaxAsOctalChar(buf);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
63	[BUG]  [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  int  maxAsOctalChar  =  getMaxAsOctalChar(buf);  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	int  maxAsOctalChar  =  getMaxAsOctalChar(buf);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
64	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  2;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
66	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.ARRAY?  TarConstants.MAXID  :  TarConstants.MILLIS_PER_CHAR;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.ARRAY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
68	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.BYTE_MASK?  TarConstants.MAXID  :  TarConstants.MAXIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.BYTE_MASK?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
69	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
70	[BUG]  [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  double  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  +  1;	  final    double    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
78	[BUG]  [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  int  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    int    maxAsOctalChar    =    length    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  /  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
80	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.MAXID?  TarConstants.MAXID  :  TarConstants.MAXSIZE  -  1;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.MAXID?    TarConstants.MAXID    :    TarConstants.MAXSIZE    +    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
81	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    value    ==    TarConstants.UIDLEN?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
82	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY  |  TarConstants.MAXID  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAX_VALUE  :  TarConstants.MAXSIZE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.JANUARY?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.JANUARY?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.BYTE_MASK;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
86	[BUG]  [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;  [BUGGY]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	478	478	1	replace	final  long  maxAsOctalChar  =  length  ==  TarConstants.NUMBER?  TarConstants.MAXID  :  TarConstants.MIN_VALUE;	  final    long    maxAsOctalChar    =    length    ==    TarConstants.NUMBER?    TarConstants.MAXID    :    TarConstants.MAXSIZE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
