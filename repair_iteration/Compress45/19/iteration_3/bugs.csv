bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  >  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
2	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative  &&  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative  &&  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  negative  &&  length  >  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
3	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
4	[BUG]  [BUGGY]  if  (length  <  =  2  &&  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  2  &&  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  &&  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
5	[BUG]  [BUGGY]  if  (length  <  =  0  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  0  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  0  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    4    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
6	[BUG]  [BUGGY]  if  (length  <  =  2  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  2  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    4    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
7	[BUG]  [BUGGY]  if  (length  <  4  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  4  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  4  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    4    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
8	[BUG]  [BUGGY]  if  (length  <  =  3  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  3  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  3  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    4    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
9	[BUG]  [BUGGY]  if(length!=  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length!=  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length!=  0)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
10	[BUG]  [BUGGY]  if(length  >=  2)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  2)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
11	[BUG]  [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  maxAsOctalChar)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  >=  maxAsOctalChar)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  if(negative  &&  value  <  =  length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  length)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  length)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  if(negative  &&  value  <  =  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  Long.MIN_VALUE)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  <  =  maxAsOctalChar)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  if(length  ==  0  ||  negative)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  ==  0  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  0  ||  negative)  {	  if(length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  if(length  ==  2)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  ==  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  2)  {	  if(length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
19	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  if(length  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  ==  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  maxAsOctalChar)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
24	[BUG]  [BUGGY]  if(length!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length!=  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length!=  maxAsOctalChar)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
25	[BUG]  [BUGGY]  if(length  >=  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  =  maxAsOctalChar)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
26	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
27	[BUG]  [BUGGY]  if  (length  <  4  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  4  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  4  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    4    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
28	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    4    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
29	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
30	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
31	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
32	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
33	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
36	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
37	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
38	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
39	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
40	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
41	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  &&  value  <  =  negative)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  &&  value  <  =  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  &&  value  <  =  negative)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  if(length  <  =  value  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  value  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  value  &&  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  if(value  <  =  negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  <  =  negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  <  =  negative  &&  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  if(value  <  =  length  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  <  =  length  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  <  =  length  &&  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  if(length  <  =  value  ||  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  value  ||  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  value  ||  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  maxAsOctalChar  ||  negative  &&  value  <  =  maxAsOctalChar)  {	  if(negative    &&    length    <    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  maxAsOctalChar)  {	  if(negative    &&    length    <    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  if(length  ==  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  ==  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  1)  {	  if(length    <    =    1)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  if(length!=  1)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length!=  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length!=  1)  {	  if(length    <    =    1)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  if(length  >  0  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  &&  value  <  =  maxAsOctalChar)  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  if(length  >  0  ||  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  ||  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  ||  value  <  =  maxAsOctalChar)  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  if(length  >  0  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  ||  length  <  =  maxAsOctalChar)  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  if(length  >  0  ||  value.charAt(offset)!=  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  ||  value.charAt(offset)!=  '-')  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  ||  value.charAt(offset)!=  '-')  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  if(length  >  0  ||  negative)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  ||  negative)  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
56	[BUG]  [BUGGY]  While(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  While(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	While(negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
57	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  [Delete]  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	[Delete]	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
58	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
59	[BUG]  [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
60	[BUG]  [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
61	[BUG]  [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	While(negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
62	[BUG]  [BUGGY]  if(negative  &&  length  <  =  10)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  10)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  10)  {	  if(negative    &&    length    >    10)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
63	[BUG]  [BUGGY]  if(negative  &&  length  >  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  1)  {	  if(negative    &&    length    >    10)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
64	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
65	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
66	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
67	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
68	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
69	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
70	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
71	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  2)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  2)  {	  if    (negative    &&    length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
72	[BUG]  [BUGGY]  if  (negative  &&  value  <  2)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  2)  {	  if    (negative    &&    length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
73	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  1)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  1)  {	  if    (negative    &&    length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
74	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  2)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  =  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  =  2)  {	  if    (negative    &&    length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
75	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
76	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
77	[BUG]  [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
78	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
79	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
80	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
81	[BUG]  [BUGGY]  if  (length  <  =  20  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  20  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  20  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
82	[BUG]  [BUGGY]  if  (length  <  10  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  10  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  10  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
84	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {	  if(length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {	  if(length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
87	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {	  if(length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
88	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
89	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
90	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
91	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
92	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
93	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
94	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
95	[BUG]  [BUGGY]  if(negative  &&  length  >  4)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >  4)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  4)  {	  if(negative    &&    length    >    8)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
96	[BUG]  [BUGGY]  if(negative  &&  length  >  3)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >  3)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  3)  {	  if(negative    &&    length    >    8)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
97	[BUG]  [BUGGY]  if(negative  &&  length  >  5)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >  5)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  5)  {	  if(negative    &&    length    >    8)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
98	[BUG]  [BUGGY]  if  (negative  &&  length!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length!=  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length!=  maxAsOctalChar)  {	  if    (negative    &&    length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
99	[BUG]  [BUGGY]  if  (negative  &&  value!=  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value!=  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value!=  0)  {	  if    (negative    &&    length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
100	[BUG]  [BUGGY]  if(length  <  0  ||  negative)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  0  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  0  ||  negative)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
101	[BUG]  [BUGGY]  if(length  <  =  0  ||  value.equals(negative))  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value.equals(negative))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value.equals(negative))  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
102	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  >  negative)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  >  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  >  negative)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
103	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  ==  negative)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  ==  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  ==  negative)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
104	[BUG]  [BUGGY]  if(length  <  =  0  ||  value!=  negative)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value!=  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value!=  negative)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
106	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
109	[BUG]  [BUGGY]  if(negative  &&  length  <  =  9)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  9)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  9)  {	  if(negative    &&    length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
110	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  =  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  =  1)  {	  if    (negative    &&    length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
111	[BUG]  [BUGGY]  if  (negative  &&  value  <  1)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  1)  {	  if    (negative    &&    length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
112	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
113	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
114	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  negative)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
115	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MIN_VALUE)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
116	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAXIMUM_INT)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAXIMUM_INT)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigInteger.MAXIMUM_INT)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
118	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
121	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
122	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  ||  length  <  =  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
123	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
124	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigDecimal.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  BigDecimal.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigDecimal.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
125	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
126	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  size  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  size  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  size  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
127	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
128	[BUG]  [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
129	[BUG]  [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
130	[BUG]  [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
131	[BUG]  [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
132	[BUG]  [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
133	[BUG]  [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	EncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoderEncoding(buf,  offset,  length));	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
134	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  >=  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  >=  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
135	[BUG]  [BUGGY]  if(value  <  =  0  ||  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  <  =  0  ||  value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  <  =  0  ||  value  >  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
136	[BUG]  [BUGGY]  if(length  <  0  ||  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  0  ||  value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  0  ||  value  >  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  ==  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  ==  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  >  maxAsOctalChar  ||  negative)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
139	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  <  =  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
140	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
141	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
142	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
143	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
144	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
145	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
146	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
147	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
148	[BUG]  [BUGGY]  if(length  >  0)  {  int  len  =  length;  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  int  len  =  length;  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  int  len  =  length;  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
151	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
153	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  bu  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  bu  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  bu	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
155	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
157	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  bu  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  bu  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  bu	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
158	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  size)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  =  size)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  =  size)  {	  if    (negative    &&    value    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
159	[BUG]  [BUGGY]  if  (negative  &&  value  >=  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  >=  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  >=  0)  {	  if    (negative    &&    value    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
161	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
164	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  bu  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  bu  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  bu	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
165	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  negative)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
166	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
167	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
168	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  TarConstants.MAXID)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  TarConstants.MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  <  =  TarConstants.MAXID)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
169	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MIN_VALUE)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
175	[BUG]  [BUGGY]  if  (length  <  =  0  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  0  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  0  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
176	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  4  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
177	[BUG]  [BUGGY]  if  (length  <  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
178	[BUG]  [BUGGY]  if  (length  <  =  2  &&  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  2  &&  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  &&  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
179	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  MAXID)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  =  MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  =  MAXID)  {	  if    (negative    &&    length    <    =    MAXID)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
180	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  MAXSIZE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  MAXSIZE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  MAXSIZE)  {	  if    (negative    &&    length    <    =    MAXID)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
181	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  size)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  size)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  size)  {	  if    (negative    &&    length    <    =    MAXID)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
182	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
184	[BUG]  [BUGGY]  if(length  <  =  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
185	[BUG]  [BUGGY]  if(negative  &&  length  <  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
186	[BUG]  [BUGGY]  if(negative  &&  length  <  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
187	[BUG]  [BUGGY]  if(length  <  Long.MIN_VALUE  ||  negative  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  Long.MIN_VALUE  ||  negative  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  Long.MIN_VALUE  ||  negative  >  Long.MAX_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
188	[BUG]  [BUGGY]  if(negative  &&  length  >=  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >=  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >=  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
189	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
190	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
191	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  value.length)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  value.length)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  value.length)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
192	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  maxAsOctalChar  ||  length  >  MAXID)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
193	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
194	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
195	[BUG]  [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	while(negative  &&  offset  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
196	[BUG]  [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
197	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
198	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  length;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
199	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  limit;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
200	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
201	[BUG]  [BUGGY]  if  (length  <  =  10  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  10  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    10)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
202	[BUG]  [BUGGY]  if  (length  <  =  10  ||(offset  +  length)>  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  10  ||(offset  +  length)>  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  ||(offset  +  length)>  maxAsOctalChar)  {	  if    (length    <    =    10)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
203	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
204	[BUG]  [BUGGY]  if(length  <  0  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  0  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  0  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
205	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigDecimal.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigDecimal.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigDecimal.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
206	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
207	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  value  >  Long.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
209	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
212	[BUG]  [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(!negative  &&  value  <  maxAsOctalChar)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
213	[BUG]  [BUGGY]  if(!negative  &&  value  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(!negative  &&  value  >=  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(!negative  &&  value  >=  maxAsOctalChar)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
214	[BUG]  [BUGGY]  if(!negative  &&  value  <  =  length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(!negative  &&  value  <  =  length)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(!negative  &&  value  <  =  length)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
215	[BUG]  [BUGGY]  if  (negative  &&  length  ==  2)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  ==  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  ==  2)  {	  if    (negative    &&    length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
216	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
217	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
218	[BUG]  [BUGGY]  negative  &&  negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
219	[BUG]  [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
220	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
221	[BUG]  [BUGGY]  nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.NUMBER;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.NUMBER;  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.NUMBER;	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
222	[BUG]  [BUGGY]  nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.BYTE_MASK;  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	nisip  =  negative?  TarConstants.NUMBER  :  TarConstants.BYTE_MASK;	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
223	[BUG]  [BUGGY]  if(length  <  =  0  &&  negative)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  &&  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  &&  negative)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
224	[BUG]  [BUGGY]  if(length  <  =  0  ||  Negate.isBigDecimal(negative))  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  Negate.isBigDecimal(negative))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  Negate.isBigDecimal(negative))  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
225	[BUG]  [BUGGY]  if(length  <  =  0  ||  Negate.isBigInteger(negative))  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  Negate.isBigInteger(negative))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  Negate.isBigInteger(negative))  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
226	[BUG]  [BUGGY]  if(length  >  0  &&  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0  &&  length  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0  &&  length  <  =  maxAsOctalChar)  {	  if    (length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
227	[BUG]  [BUGGY]  if(length  <  =  0  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  &&  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
228	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  &&  value  >=  =  negative)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  &&  value  >=  =  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  &&  value  >=  =  negative)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
229	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
230	[BUG]  [BUGGY]  if  (length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
233	[BUG]  [BUGGY]  if(length  <  =  0  &&  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  &&  value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  &&  value  >  maxAsOctalChar)  {	  if(length    <    =    0    ||    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
234	[BUG]  [BUGGY]  long  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  long  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	long  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
235	[BUG]  [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
236	[BUG]  [BUGGY]  if(length  >>  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >>  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >>  0)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
237	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
238	[BUG]  [BUGGY]  if  (length  <  =  4  &&  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  4  &&  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  &&  length  >  maxAsOctalChar)  {	  if    (length    <    =    4    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
239	[BUG]  [BUGGY]  if(length  >=  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
240	[BUG]  [BUGGY]  if(length  <  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
241	[BUG]  [BUGGY]  if(length  ==  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  ==  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
242	[BUG]  [BUGGY]  if(length!=  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length!=  Long.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length!=  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
243	[BUG]  [BUGGY]  if  (length  <  =  1  &&  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  &&  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  &&  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
244	[BUG]  [BUGGY]  if  (length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
245	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {	  if    (length    <    =    4    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
246	[BUG]  [BUGGY]  if  (length  <  =  10  &&  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  10  &&  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  &&  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
247	[BUG]  [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
248	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
249	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
250	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
251	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
252	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
253	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
254	[BUG]  [BUGGY]  if  (length  <  10)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  10)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  10)  {	  if    (length    <    =    10)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
255	[BUG]  [BUGGY]  if  (negative  &&  value  <  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  value  <  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  0)  {	  if    (negative    &&    value    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
256	[BUG]  [BUGGY]  if  (negative  &&  length  >=  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  >=  1)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  >=  1)  {	  if    (negative    &&    length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
259	[BUG]  [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
261	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
262	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
263	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
264	[BUG]  [BUGGY]  if(length  >>  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >>  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >>  maxAsOctalChar)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
265	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
266	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
267	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
268	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
270	[BUG]  [BUGGY]  if  (negative  &&  length  >  2)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  >  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  >  2)  {	  if    (negative    &&    length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
271	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
272	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
273	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
274	[BUG]  [BUGGY]  if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
275	[BUG]  [BUGGY]  if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
276	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
277	[BUG]  [BUGGY]  if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  negative)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
281	[BUG]  [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
282	[BUG]  [BUGGY]  if(length  <  =  0  &&  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  &&  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  &&  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
283	[BUG]  [BUGGY]  if(length  >=  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  BigInteger.MIN_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
284	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MIN_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
285	[BUG]  [BUGGY]  if  (negative  &&  length  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  ==  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  ==  maxAsOctalChar)  {	  if    (negative    &&    length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
286	[BUG]  [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	long  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
287	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
288	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
289	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
290	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
291	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
292	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
293	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
294	[BUG]  [BUGGY]  if  (negative  &&  length  <  MAXID)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  MAXID)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  MAXID)  {	  if    (negative    &&    length    <    =    MAXID)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
295	[BUG]  [BUGGY]  if(negative  &&  value  >=  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  >=  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  >=  =  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
296	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  >  maxAsOctalChar  ||  negative)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
297	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  >  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
298	[BUG]  [BUGGY]  if(length  >  1  &&  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&  length  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&  length  <  =  maxAsOctalChar)  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
299	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
300	[BUG]  [BUGGY]  if(length  >  1  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&  value  <  =  maxAsOctalChar)  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
301	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
302	[BUG]  [BUGGY]  if  (length  <  2  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  2  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  2  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
304	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  offset;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
305	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
306	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
307	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
308	[BUG]  [BUGGY]  if  (length  >  maxAsOctalChar  ||  length  <  =  1  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  >  maxAsOctalChar  ||  length  <  =  1  ||  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  maxAsOctalChar  ||  length  <  =  1  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
309	[BUG]  [BUGGY]  if  (length  <  =  1  &&  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  1  &&  length  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  &&  length  >  maxAsOctalChar)  {	  if    (length    <    =    1    ||    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
313	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
314	[BUG]  [BUGGY]  if(length  <  =  1  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  1  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  1  &&  value  <  =  maxAsOctalChar)  {	  if(length    <    =    negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
315	[BUG]  [BUGGY]  if  (negative  &&  length!=  2)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length!=  2)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length!=  2)  {	  if    (negative    &&    length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	27	None	replace
319	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
320	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
321	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
322	[BUG]  [BUGGY]  if(negative  ||  length  >  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  ||  length  >  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  ||  length  >  0)  {	  if    (length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
323	[BUG]  [BUGGY]  if(negative  &&  offset  <  =  length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  offset  <  =  length)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  offset  <  =  length)  {	  if    (length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
324	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
325	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >=  maxAsOctalChar  ||  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  maxAsOctalChar  ||  negative)  {	  if(length    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
326	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  LAST_VALID_BYTE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  LAST_VALID_BYTE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  LAST_VALID_BYTE)  {	  if    (negative    &&    length    <    =    MAXID)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
327	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
328	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
329	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
330	[BUG]  [BUGGY]  if(negative  &&  value  <  =  LAST_VALID_BYTE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  LAST_VALID_BYTE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  LAST_VALID_BYTE)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
331	[BUG]  [BUGGY]  if(negative  &&  value  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  Long.MAX_VALUE)  {	  if(negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
332	[BUG]  [BUGGY]  if(length  <  =  0  ||  offset  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  offset  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  offset  >  maxAsOctalChar)  {	  if(length    <    =    0    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	44	None	replace
335	[BUG]  [BUGGY]  if(negative  &&  length  <  =  8)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  8)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  8)  {	  if(negative    &&    length    >    8)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
336	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
337	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
338	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM)  {	  if(length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
339	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Integer.MAX_VALUE))  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Integer.MAX_VALUE))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  Integer.MAX_VALUE))  {	  if    (negative    &&    length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
340	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigInteger.MAX_VALUE))  {	  if    (negative    &&    length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
341	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
342	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
343	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
344	[BUG]  [BUGGY]  if(negative  &&  length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    1)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
345	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
346	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
347	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
348	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    4    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
349	[BUG]  [BUGGY]  aughtIfNegative(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aughtIfNegative(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aughtIfNegative(negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
350	[BUG]  [BUGGY]  aughtIfNull(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aughtIfNull(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aughtIfNull(negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
351	[BUG]  [BUGGY]  aughtInvalidByteChar(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aughtInvalidByteChar(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aughtInvalidByteChar(negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
352	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_BACK_ENCODING);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aught(IllegalArgumentException.INVALID_BACK_ENCODING);  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aught(IllegalArgumentException.INVALID_BACK_ENCODING);	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
353	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK);  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aught(IllegalArgumentException.INVALID_BYTE_MASK);	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
354	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_BACK_ENCODING,  value);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  aught(IllegalArgumentException.INVALID_BACK_ENCODING,  value);  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	aught(IllegalArgumentException.INVALID_BACK_ENCODING,  value);	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
355	[BUG]  [BUGGY]  if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    2    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
356	[BUG]  [BUGGY]  if(negative  ||  length  <  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  ||  length  <  0)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  ||  length  <  0)  {	  if(negative    &&    length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
357	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
359	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBy	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
360	[BUG]  [BUGGY]  if(length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
361	[BUG]  [BUGGY]  if(length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  1  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
362	[BUG]  [BUGGY]  if(length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  10  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    10    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
363	[BUG]  [BUGGY]  if(negative  &&  length  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  Long.MAX_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
364	[BUG]  [BUGGY]  if(negative  &&  length  <  =  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  length  <  =  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  Long.MIN_VALUE  ||  length  >  Long.MAX_VALUE)  {	  if(negative    &&    length    <    =    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
366	[BUG]  [BUGGY]  if(length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
367	[BUG]  [BUGGY]  if(length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    1    ||    length    >    BigIntegerBytes.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
368	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
369	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
370	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
371	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length    	non-compiled	[CE]  <identifier>  expected	47	None	replace
375	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
376	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBy	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
377	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
378	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerB  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerB  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerB	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
379	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
380	[BUG]  [BUGGY]  negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
381	[BUG]  [BUGGY]  negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.charAt(idx);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
382	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    buf.length;    idx    <    len;    idx++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
383	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
384	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MIN_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE  ||  length  >  BigInteger.MIN_VALUE)  {	  if(length    <    =    0    ||    length    >    BigInteger.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
385	[BUG]  [BUGGY]  if(length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  BigInteger.MAX_VALUE)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
386	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
387	[BUG]  [BUGGY]  if(length  <  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  negative)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  negative)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
388	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_INT)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_INT)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAX_INT)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
389	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXIMUM_INT)  {	  if(length    <    =    negative)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
390	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
391	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    (byte)(negative?    0xff    :    0x80);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
392	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
393	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
394	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAX_INT))  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAX_INT))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAX_INT))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
395	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_VALUE  ||  value  >  BigIntegerBytes.MAX_VALUE))  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_VALUE  ||  value  >  BigIntegerBytes.MAX_VALUE))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_VALUE  ||  value  >  BigIntegerBytes.MAX_VALUE))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
396	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MAXIMUM_INTEGER  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MAXIMUM_INTEGER  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MAXIMUM_INTEGER  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
397	[BUG]  [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  1  &&(value  <  =  maxAsOctalChar  ||  value  >  BigIntegerBytes.MIN_INT  ||  value  >  BigIntegerBytes.MAXIMUM_INT))  {	  if(length    >=    1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
398	[BUG]  [BUGGY]  negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	negative  &&  value  <  =  BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    buf[offset]    =    value.toByteArray();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
399	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  >  maxAsOctalChar)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
400	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
401	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }      [BUGGY]  if(negative  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  [BUGGY]      formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
