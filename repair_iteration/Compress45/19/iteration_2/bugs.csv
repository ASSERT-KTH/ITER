bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (length  >  0)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  >  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  0)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  if  (length  >  1)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  >  1)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  1)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  if  (length  >  10)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  >  10)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  10)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  if  (length  >  4)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  >  4)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  4)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  if  (length  >  3)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  >  3)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  >  3)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  if(length  <  =  1)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  1)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  1)  {	  if    (length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  0)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  value  <  =  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  value  <  =  0)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  if  (negative  &&  length  ==  0)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  ==  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  ==  0)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if  (negative  &&  length  >  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  >  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  >  0)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  if  (negative  &&  length  >=  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  >=  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  >=  0)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  MAXID)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  <  =  MAXID)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  =  MAXID)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  if(length  <  =  negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  negative  &&  value  <  =  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(!negative  &&  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(!negative  &&  value  <  =  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(!negative  &&  value  <  =  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  if(length  <  =  negative)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  negative)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  negative)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  if(length  ==  0)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  ==  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  ==  0)  {	  if    (length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  if(length  >=  0)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  >=  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  0)  {	  if    (length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  4  ||  length  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  1  ||  length  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  maxAsOctalChar)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  if  (length  <  =  2)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  2)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2)  {	  if    (length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(length  <  =  0  ||  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  0  ||  value  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  value  >  maxAsOctalChar)  {	  if    (length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  if(length  <  =  0  ||  negative)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  <  =  0  ||  negative)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  <  =  0  ||  negative)  {	  if    (length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  if(negative  &&  length  <  0)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  <  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  0)  {	  if    (length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
36	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  if(negative  &&  length  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  >=  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >=  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  if(negative  &&  length  <  =  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  <  =  Long.MIN_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  <  =  Long.MIN_VALUE)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  if  (negative  &&  length!=  0)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length!=  0)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length!=  0)  {	  if    (negative    &&    length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  if  (length  <  =  10)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  10)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  10)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
45	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if  (negative  &&  length  <  2)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  <  2)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  2)  {	  if    (length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
49	[BUG]  [BUGGY]  if  (negative  &&  length  <  1)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (negative  &&  length  <  1)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (negative  &&  length  <  1)  {	  if    (length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  if(length  >=  1)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  >=  1)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  1)  {	  if    (length    <    1)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.toByteArray();  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
54	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  buf[offset]  =  value.charAt(idx);  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  buf[offset]  =  (byte)(negative?  0xff  :  0x80);  return  offset  +  length;  }	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
56	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  4  ||  length  >  BigInteger.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  1  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
60	[BUG]  [BUGGY]  if  (length  <  =  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if  (length  <  =  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if  (length  <  =  2  ||  length  >  BigIntegerBytes.MAX_VALUE)  {	  if    (length    <    =    9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  if(negative)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative)  {	  if    (length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
63	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(length  >=  maxAsOctalChar)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(length  >=  maxAsOctalChar)  {	  if(negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
64	[BUG]  [BUGGY]  if(negative  &&  length  >  9)  {  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  >  9)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  9)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  if(negative  &&  length  >  10)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  >  10)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  10)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  if(negative  &&  length  >  8)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }    [BUGGY]  if(negative  &&  length  >  8)  {  [BUGGY]    formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	485	485	1	replace	if(negative  &&  length  >  8)  {	  if    (length    >    9)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
