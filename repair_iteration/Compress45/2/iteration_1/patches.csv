bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  2;  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)%  2;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  2;	  final    int    bits    =    (length    -    1)%    4;    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  3;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)%  3;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  3;	  final    int    bits    =    (length    -    1)%    4;    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  1;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)%  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  1;	  final    int    bits    =    (length    -    1)%    4;    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  4  +  1;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)%  4  +  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  4  +  1;	  final    int    bits    =    (length    -    1)%    4;    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  2;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)/  2;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  2;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  4;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)/  4;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  4;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  3;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)/  3;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  3;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)/  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  1;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  2  +  1;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)*  2  +  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  2  +  1;	  final    int    bits    =    (length    -    1)*    2;    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)*  1;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =(offset  -  1)*  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)*  1;	  final    int    bits    =    (length    -    1)*    1;    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1L;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)*  1L;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1L;	  final    int    bits    =    (length    -    1)*    1;    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  3;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)*  3;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  3;	  final    int    bits    =    (length    -    1)*    4;    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  final  int  len  =  getLength();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  getLength();  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  final  int  len  =  value.length();  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  value.length();  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length();	      	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length);  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  getLength(buf,  offset,  length);  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length);	      	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length);  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length);  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  offset  +  length);	      	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  length);  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  Math.min(value.length,  length);  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  length);	      	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  final  int  len  =  size();  [CE]  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  size();  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  size();	      	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  value.length);  [CE]  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  Math.min(length,  value.length);  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(length,  value.length);	      	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	if(negative)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  final  int  len  =  buf.length;  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  buf.length;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length;	      	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  final  int  len  =  buf.length  -  offset;  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  buf.length  -  offset;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  -  offset;	      	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  final  int  len  =  buf.length();  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  buf.length();  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length();	      	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  final  int  bits  =  buf.length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  buf.length;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  buf.length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  final  int  len  =  length();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  len  =  length();  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  4  +  1;	  final    int    bits    =    (length    -    1)*    4;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)*  1;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  offset)*  1;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)*  1;	  final    int    bits    =    (length    -    1)*    1;    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	      	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  final  int  bits  =(length  -  offset)/  8;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =(length  -  offset)/  8;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  offset)/  8;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)/  8;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =(offset  -  1)/  8;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)/  8;	  final    int    bits    =    (length    -    1)/    8;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1000;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  bits  =  (length  -  1)*  1000;  [BUGGY]    final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1000;	  final    int    bits    =    (length    -    1)*    4;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
