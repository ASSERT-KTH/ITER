bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  len  =  length()  -  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length()  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length()  -  1;	  final    int    len    =    size();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
2	[BUG]  [BUGGY]  final  int  len  =  size()  -  1;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  size()  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  size()  -  1;	  final    int    len    =    size();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
3	[BUG]  [BUGGY]  final  int  len  =  size()  +  1;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  size()  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  size()  +  1;	  final    int    len    =    size();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
4	[BUG]  [BUGGY]  final  int  len  =  this.length();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  this.length();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  this.length();	  final    int    len    =    size();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
5	[BUG]  [BUGGY]  final  int  len  =  width();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  width();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  width();	  final    int    len    =    size();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
6	[BUG]  [BUGGY]  final  int  len  =  buf.length()  -  offset;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length()  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length()  -  offset;	  final    int    len    =    buf.length();    	non-compiled	[CE]  	23	None	replace
7	[BUG]  [BUGGY]  final  int  len  =  buf.length()  +  1;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length()  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length()  +  1;	  final    int    len    =    buf.length();    	non-compiled	[CE]  	23	None	replace
8	[BUG]  [BUGGY]  final  int  len  =  buf.length()  -  1;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length()  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length()  -  1;	  final    int    len    =    buf.length();    	non-compiled	[CE]  	23	None	replace
9	[BUG]  [BUGGY]  final  int  len  =  buf.length()  +  offset;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length()  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length()  +  offset;	  final    int    len    =    buf.length();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
10	[BUG]  [BUGGY]  final  int  len  =  value.length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
11	[BUG]  [BUGGY]  final  int  len  =  buf.length  -  1;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  -  1;	  final    int    len    =    buf.length;    	non-compiled	[CE]  	21	None	replace
12	[BUG]  [BUGGY]  final  int  len  =  buf.length  -  offset  +  length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  -  offset  +  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  -  offset  +  length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
13	[BUG]  [BUGGY]  final  long  len  =  buf.length;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  buf.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  buf.length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  	21	None	replace
14	[BUG]  [BUGGY]  final  int  len  =  offset  +  length;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset  +  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset  +  length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  	21	None	replace
15	[BUG]  [BUGGY]  final  int  len  =  buf.length  +  1;  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  +  1;	  final    int    len    =    buf.length;    	non-compiled	[CE]  	21	None	replace
16	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  2  +  1;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  2  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  2  +  1;	  final    int    bits    =    (length    -    1)%    2;    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  2L;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  2L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  2L;	  final    int    bits    =    (length    -    1)%    2;    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)/  2;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)/  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)/  2;	  final    int    bits    =(offset    -    1)/    8;    	non-compiled	[CE]  	31	None	replace
19	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)/  4;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)/  4;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)/  4;	  final    int    bits    =(offset    -    1)/    8;    	non-compiled	[CE]  	31	None	replace
20	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)/  3;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)/  3;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)/  3;	  final    int    bits    =(offset    -    1)/    8;    	non-compiled	[CE]  	31	None	replace
21	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)/  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)/  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)/  1;	  final    int    bits    =(offset    -    1)/    8;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
22	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  2  +  1;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  2  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  2  +  1;	  final    int    bits    =    (length    -    1)/    2;    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  2  +  offset;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  2  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  2  +  offset;	  final    int    bits    =    (length    -    1)/    2;    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1  +  1;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  1  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1  +  1;	  final    int    bits    =    (length    -    1)*    2    +    1;    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1000  +  1;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  1000  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1000  +  1;	  final    int    bits    =    (length    -    1)*    2    +    1;    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  3  +  1;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  3  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  3  +  1;	  final    int    bits    =    (length    -    1)*    2    +    1;    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  	29	None	replace
28	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
29	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length()  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length()  -  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  final  int  len  =  value.length()  +  1;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length()  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length()  +  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length()  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length()  -  offset;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length()  -  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length()  -  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  final  long  len  =  value.length();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  value.length();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  value.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1L  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  1L  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1L  +  1;	  final    int    bits    =    (length    -    1)*    1L;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
35	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1L  +  1L;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  1L  +  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1L  +  1L;	  final    int    bits    =    (length    -    1)*    1L;    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  final  int  len  =  length()  +  1;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length()  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length()  +  1;	  final    int    len    =    length();    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  final  int  len  =  offset  +  length();  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset  +  length();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset  +  length();	  final    int    len    =    length();    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  final  int  len  =  length()  -  offset;  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length()  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length()  -  offset;	  final    int    len    =    length();    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  1000L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  1000L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  1000L;	  final    int    bits    =    (length    -    1)*    1000;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
40	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  1000;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  1000;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  1000;	  final    int    bits    =    (length    -    1)*    1000;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
41	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  1000;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  1000;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  1000;	  final    int    bits    =    (length    -    1)*    1000;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
42	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  3  +  1;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  3  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  3  +  1;	  final    int    bits    =    (length    -    1)/    3;    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  3  +  1;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  3  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  3  +  1;	  final    int    bits    =    (length    -    1)%    3;    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  1L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  4  +  1L;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
45	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  4  +  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  4  +  2;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
46	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  4  +  1;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  4  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  4  +  1;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  	26	None	replace
47	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)/  1;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  offset)/  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)/  1;	  final    int    bits    =    (length    -    1)/    1;    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  final  int  bits  =  offset  /  1;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset  /  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset  /  1;	  final    int    bits    =    (length    -    1)/    1;    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  -  1);  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  -  1);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length  -  1);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  +  1);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  +  1);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length  +  1);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length,  negative);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(buf,  offset,  length,  negative);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length,  negative);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  -  2);  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  -  2);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length  -  2);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
53	[BUG]  [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  +  2);  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(buf,  offset,  length  +  2);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(buf,  offset,  length  +  2);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
54	[BUG]  [BUGGY]  final  int  len  =  getLength(value,  buf,  offset,  length);  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength(value,  buf,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength(value,  buf,  offset,  length);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
55	[BUG]  [BUGGY]  final  int  len  =  length  -  getLength(buf,  offset,  length);  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length  -  getLength(buf,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length  -  getLength(buf,  offset,  length);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  	15	None	replace
56	[BUG]  [BUGGY]  final  int  len  =  value.length  -  offset;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length  -  offset;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  	22	None	replace
57	[BUG]  [BUGGY]  final  int  len  =  offset  -  buf.length;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset  -  buf.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset  -  buf.length;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  	22	None	replace
58	[BUG]  [BUGGY]  final  int  len  =  length  -  buf.length;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length  -  buf.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length  -  buf.length;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  	22	None	replace
59	[BUG]  [BUGGY]  final  int  len  =  buf.length  -  offset,  length;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  -  offset,  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  -  offset,  length;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  	22	None	replace
60	[BUG]  [BUGGY]  final  int  len  =  buf.length  /  offset;  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  /  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  /  offset;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  	22	None	replace
61	[BUG]  [BUGGY]  final  int  len  =  Math.max(value.length,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.max(value.length,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.max(value.length,  length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
62	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  buf.length);  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(length,  buf.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(length,  buf.length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  final  int  len  =  Math.min(len,  buf.length);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(len,  buf.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(len,  buf.length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
64	[BUG]  [BUGGY]  final  int  len  =  Math.log(value.length,  length);  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.log(value.length,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.log(value.length,  length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  	19	None	replace
65	[BUG]  [BUGGY]  final  long  len  =  Math.min(length,  value.length);  [CE]  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  Math.min(length,  value.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  Math.min(length,  value.length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  	19	None	replace
66	[BUG]  [BUGGY]  final  int  len  =  Math.min(len,  value.length);  [CE]  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(len,  value.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(len,  value.length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  	19	None	replace
67	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)*  2;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)*  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)*  2;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)*  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)*  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)*  1L;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)&  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)&  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)&  1;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)*  4;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)*  4;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)*  4;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)%  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)%  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)%  1;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  offset);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  offset);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  offset);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  offset,  length);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
74	[BUG]  [BUGGY]  final  long  len  =  Math.min(value.length,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  Math.min(value.length,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  Math.min(value.length,  length);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length,  negative);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length,  negative);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  offset  +  length,  negative);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
76	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  buf.length  +  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  buf.length  +  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  buf.length  +  length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
77	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  offset  +  value.length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(length,  offset  +  value.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(length,  offset  +  value.length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  offset  +  length  -  1);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  offset  +  length  -  1);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  final  int  len  =  Math.min(len,  buf.length  +  length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(len,  buf.length  +  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(len,  buf.length  +  length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  final  int  len  =  Math.max(value.length,  offset  +  length,  negative);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.max(value.length,  offset  +  length,  negative);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.max(value.length,  offset  +  length,  negative);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
81	[BUG]  [BUGGY]  final  int  len  =  Math.min(buf.length,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(buf.length,  offset  +  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(buf.length,  offset  +  length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)%  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  offset)%  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)%  1;	  final    int    bits    =    (length    -    offset)*    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
83	[BUG]  [BUGGY]  final  int  bits  =  (length  -  buf.length)*  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  buf.length)*  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  buf.length)*  1;	  final    int    bits    =    (length    -    offset)*    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
84	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)*  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  offset)*  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)*  2;	  final    int    bits    =    (length    -    offset)*    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
85	[BUG]  [BUGGY]  final  int  bits  =  (offset  -  length)*  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (offset  -  length)*  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (offset  -  length)*  1;	  final    int    bits    =    (length    -    offset)*    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
86	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  4  +  1L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  4  +  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  4  +  1L;	  final    int    bits    =    (length    -    1)%    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  final  int  bits  =(length  -  offset)/  2;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(length  -  offset)/  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  offset)/  2;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
88	[BUG]  [BUGGY]  final  int  bits  =(length  -  offset)/  4;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(length  -  offset)/  4;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  offset)/  4;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
89	[BUG]  [BUGGY]  final  int  bits  =(length  -  offset)/  3;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(length  -  offset)/  3;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  offset)/  3;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
90	[BUG]  [BUGGY]  final  int  bits  =(offset  -  length)/  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  length)/  8;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  length)/  8;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
91	[BUG]  [BUGGY]  final  int  bits  =(length  -  length)/  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(length  -  length)/  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  length)/  2;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
92	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  +  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
93	[BUG]  [BUGGY]  final  long  len  =  getLength();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  getLength();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  getLength();	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  -  offset;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  -  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  *  BYTE_MASK;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  +  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  +  length;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
99	[BUG]  [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
100	[BUG]  [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
101	[BUG]  [BUGGY]  While(value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  While(value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	While(value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
102	[BUG]  [BUGGY]  While(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  While(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	While(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
103	[BUG]  [BUGGY]  While(value  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  While(value  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	While(value  >=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
104	[BUG]  [BUGGY]  While(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  While(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	While(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
107	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
108	[BUG]  [BUGGY]  final  int  bits  =  value.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  value.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  value.length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
109	[BUG]  [BUGGY]  final  int  bits  =  buf.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  buf.length  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  buf.length  -  offset;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  final  int  bits  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset  +  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset  +  length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
111	[BUG]  [BUGGY]  final  int  bits  =  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  buffer.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  buffer.length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
112	[BUG]  [BUGGY]  final  int  bits  =  buf.length  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  buf.length  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  buf.length  -  1;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  final  int  bits  =  offset;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  final  int  bits  =  offset,  buf.length;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset,  buf.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset,  buf.length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
115	[BUG]  [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
116	[BUG]  [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
117	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  2  +  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  2  +  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  2  +  1L;	  final    int    bits    =    (length    -    1)*    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
118	[BUG]  [BUGGY]  final  int  len  =  value  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value  -  offset;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
119	[BUG]  [BUGGY]  final  int  len  =  Math.min(value,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value,  length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
120	[BUG]  [BUGGY]  final  int  len  =  Math.min(offset,  value.length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(offset,  value.length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(offset,  value.length);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
121	[BUG]  [BUGGY]  final  int  len  =  value.length()  +  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  value.length()  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  value.length()  +  offset;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
122	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)*  4;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  offset)*  4;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)*  4;	  final    int    bits    =    (length    -    offset)*    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
123	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  offset;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  +  offset;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
124	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  buf.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getLength()  *  buf.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getLength()  *  buf.length;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
125	[BUG]  [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
126	[BUG]  [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
127	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  buf.length  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  buf.length  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  buf.length  +  1;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  BYTE_MASK  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  BYTE_MASK  +  1;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
129	[BUG]  [BUGGY]  final  int  len  =  Math.min(buf.length,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(buf.length,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(buf.length,  length);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  negative);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  negative);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  negative);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  final  int  len  =  getUpperBound(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  getUpperBound(buf,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  getUpperBound(buf,  offset,  length);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
132	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  1L;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  1L;	  final    int    bits    =    (length    -    1)%    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
133	[BUG]  [BUGGY]  final  int  len  =(buf.length  >  0)?  buf.length  :  offset;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =(buf.length  >  0)?  buf.length  :  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =(buf.length  >  0)?  buf.length  :  offset;	  final    int    len    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
134	[BUG]  [BUGGY]  final  int  len  =(buf.length  >  0)?  buf.length  :  0;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =(buf.length  >  0)?  buf.length  :  0;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =(buf.length  >  0)?  buf.length  :  0;	  final    int    len    =    buf.length;    	non-compiled	[CE]  	21	None	replace
135	[BUG]  [BUGGY]  final  int  len  =  offset();  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset();	  final    int    len    =    size();    	non-compiled	[CE]  	18	None	replace
136	[BUG]  [BUGGY]  final  int  len  =  offset.length();  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset.length();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset.length();	  final    int    len    =    length();    	non-compiled	[CE]  	25	None	replace
137	[BUG]  [BUGGY]  final  int  bits  =  offset.length;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset.length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  	24	None	replace
138	[BUG]  [BUGGY]  final  int  bits  =  offset  -  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset  -  offset;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
140	[BUG]  [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
141	[BUG]  [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
142	[BUG]  [BUGGY]  negative  ||  buf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  ||  buf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  ||  buf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
143	[BUG]  [BUGGY]  negative  &&  buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
144	[BUG]  [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  value  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
145	[BUG]  [BUGGY]  negative  &&  buf.length  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  negative  &&  buf.length  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	negative  &&  buf.length  <  =  length)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
146	[BUG]  [BUGGY]  final  int  bits  =(offset  -  length)/  2;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  length)/  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  length)/  2;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  	30	None	replace
147	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  2  +  offset;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  2  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  2  +  offset;	  final    int    bits    =    (length    -    1)%    2;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
148	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)/  4  +  offset;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)/  4  +  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)/  4  +  offset;	  final    int    bits    =    (length    -    1)/    4;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
149	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  length  -  1);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  length  -  1);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
150	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  0);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  0);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  0);	  final    int    len    =    Math.min(value.length,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
151	[BUG]  [BUGGY]  final  int  bits  =  offset  /  2;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset  /  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset  /  2;	  final    int    bits    =    (length    -    1)/    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  final  int  len  =  buf.length  -  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  buf.length  -  offset  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  buf.length  -  offset  +  1;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  final  int  len  =  length  -  offset;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length  -  offset;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length  -  offset;	  final    int    len    =    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
154	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)%  16  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)%  16  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)%  16  +  1;	  final    int    bits    =    (length    -    1)%    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  final  int  len  =  length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
156	[BUG]  [BUGGY]  final  int  len  =  offset.length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  offset.length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  offset.length;	  final    int    len    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
157	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)*  1000;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)*  1000;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)*  1000;	  final    int    bits    =    (length    -    1)*    1000;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
158	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  [Delete]  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	[Delete]	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
159	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	read()  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
160	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
161	[BUG]  [BUGGY]  aughtException( "Negative  value:  ' "  +  value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  aughtException( "Negative  value:  ' "  +  value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	aughtException( "Negative  value:  ' "  +  value  + "'  is  too  large  for   "  +  length  + "  byte  field.   ");	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
162	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	read()  {  throw  new  IllegalArgumentException( " ".equals(value));  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
163	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( " ".equals(value));  }	  if(negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
164	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  value.length  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(length,  value.length  -  1);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(length,  value.length  -  1);	  final    int    len    =    Math.min(length,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  final  int  len  =  length  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length  -  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length  -  1;	  final    int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
166	[BUG]  [BUGGY]  final  int  len  =  length  +  getLength(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length  +  getLength(buf,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length  +  getLength(buf,  offset,  length);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
167	[BUG]  [BUGGY]  final  long  len  =  getLength(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  len  =  getLength(buf,  offset,  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  long  len  =  getLength(buf,  offset,  length);	  final    int    len    =    getLength(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
168	[BUG]  [BUGGY]  final  int  len  =  Math.min(bits.length,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(bits.length,  offset  +  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(bits.length,  offset  +  length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
169	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  buffer.length  +  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  Math.min(value.length,  buffer.length  +  length);  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  Math.min(value.length,  buffer.length  +  length);	  final    int    len    =    Math.min(value.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
170	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  BYTE_MASK;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  BYTE_MASK;	  final    int    bits    =    (length    -    1)*    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
171	[BUG]  [BUGGY]  final  int  bits  =(offset  -  length)/  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  length)/  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  length)/  1;	  final    int    bits    =(offset    -    1)*    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
172	[BUG]  [BUGGY]  final  int  bits  =  (length  -  1)*  10  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  1)*  10  +  1;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  1)*  10  +  1;	  final    int    bits    =    (length    -    1)*    4    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
173	[BUG]  [BUGGY]  final  int  len  =  length.length();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  len  =  length.length();  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  len  =  length.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
175	[BUG]  [BUGGY]  try  ==  false)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  try  ==  false)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	try  ==  false)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
176	[BUG]  [BUGGY]  try  ==  false)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  try  ==  false)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	try  ==  false)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
177	[BUG]  [BUGGY]  final  int  bits  =(length  -  buf.length)/  8;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(length  -  buf.length)/  8;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(length  -  buf.length)/  8;	  final    int    bits    =(length    -    offset)/    8;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
178	[BUG]  [BUGGY]  final  int  bits  =(offset  -  1)%  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =(offset  -  1)%  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =(offset  -  1)%  2;	  final    int    bits    =    (length    -    1)%    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
179	[BUG]  [BUGGY]  final  int  bits  =  (length  -  offset)%  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  (length  -  offset)%  2;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  (length  -  offset)%  2;	  final    int    bits    =    (length    -    1)%    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  final  int  bits  =  offset,  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset,  offset  +  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset,  offset  +  length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
181	[BUG]  [BUGGY]  final  int  bits  =  offset,  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset,  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset,  length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
182	[BUG]  [BUGGY]  final  int  bits  =  offset,  offset,  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  bits  =  offset,  offset,  length;  [BUGGY]      final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	497	497	1	replace	final  int  bits  =  offset,  offset,  length;	  final    int    bits    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
