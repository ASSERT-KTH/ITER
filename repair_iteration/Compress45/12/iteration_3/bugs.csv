bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(length  >  max)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(length  >  max)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(length  >  max)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  <  length;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  <  length;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  offset;  i  >=  length;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  >=  length;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  >=  length;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  (int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  (int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	(int  i  =  offset;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  offset;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  int  i  =  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  int  i  =  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	int  i  =  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buffer[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buffer[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buffer[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
38	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
39	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf[i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  if(val)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(val)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(val)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
48	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
49	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
50	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  if(negative)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    0;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(length  >  0)  {  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  len;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  while(buf[i]!=  null  &&  buf[i]  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null  &&  buf[i]  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null  &&  buf[i]  <  =  max)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
64	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
65	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  val  >  ==  4;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  val  >  ==  4;  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	val  >  ==  4;	  val    >    ==    1;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  val  >  ==  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  val  >  ==  2;  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	val  >  ==  2;	  val    >    ==    1;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(length  >  max)  {  for(int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  0;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  len;  i--)  {  buf[i]  =(byte)val;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
76	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
80	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
81	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i!=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i!=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i!=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
84	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
85	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
86	[BUG]  [BUGGY]  long  i  =  offset;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  long  i  =  offset;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	long  i  =  offset;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
89	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
90	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
94	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
95	[BUG]  [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	long  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
97	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
99	[BUG]  [BUGGY]  long  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  long  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	long  i  =  offset  +  length;  i  >=  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
102	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
104	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
105	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    0;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
106	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    0;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
107	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    0;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
109	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
111	[BUG]  [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
112	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(negative)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
113	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    offset;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
114	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  offset  +  length;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  <  offset  +  length;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  <  offset  +  length;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  size;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset;  i  <  size;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset;  i  <  size;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset;    i    <    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
117	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
119	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
120	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  byte[buf.length  +  i];  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    byte[buf.length    +    i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)value;  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
123	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
124	[BUG]  [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i--)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
125	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
126	[BUG]  [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(value[i]!=  null)  {  for(int  i  =  offset  +  length;  i  >=  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)buf[i];  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  offset;  i--)  {  buf[i]  =(byte)buf[i];  }	  for(int    i    =    offset    +    length    -    1;    i    >=    offset;    i--)    {    buf[i]    =(byte)buf[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
129	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
130	[BUG]  [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	while(buf[i]!=  null)  {  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  buf[i]  =  new  Byte(buf[i]);  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    new    Byte(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
131	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buf[i]  =  (byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    <    len;    i++)    {    buf[i]    =    (byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
132	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
133	[BUG]  [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]!=  null)  {  for(int  i  =  offset  +  length  -  1;  i  >  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
134	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(value!=  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =  (byte)val;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >    0;    i--)    {    buf[i]    =    (byte)val;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
135	[BUG]  [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;      [BUGGY]  if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }  [BUGGY]      }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	511	511	1	replace	if(buf[i]  ==  null)  {  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  buf[i]  =(byte)value;  }	  if(buf[i]!=    null)    {    for(int    i    =    offset    +    length;    i    >=    0;    i--)    {    buf[i]    =(byte)value;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
