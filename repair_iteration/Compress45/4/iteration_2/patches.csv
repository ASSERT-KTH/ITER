bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte  val  =  value;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  value;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  value;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
2	[BUG]  [BUGGY]  final  byte  val  =  Long.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =  Long.MIN_VALUE;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
3	[BUG]  [BUGGY]  byte  val  =  Integer.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Integer.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Integer.MIN_VALUE;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
4	[BUG]  [BUGGY]  byte  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  value.longValue();	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
5	[BUG]  [BUGGY]  byte  val  =  Long.MIN_VALUE  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Long.MIN_VALUE  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Long.MIN_VALUE  -  1;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
6	[BUG]  [BUGGY]  byte  val  =  max;  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  max;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
7	[BUG]  [BUGGY]  if(value  <  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  <  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  <  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
8	[BUG]  [BUGGY]  ||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
9	[BUG]  [BUGGY]  ||(value  <  =  max  &&  value  <  =  length))  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||(value  <  =  max  &&  value  <  =  length))  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||(value  <  =  max  &&  value  <  =  length))  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
10	[BUG]  [BUGGY]  long  val  =  max.longValue()  +  value;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  max.longValue()  +  value;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  max.longValue()  +  value;	  long    val    =    value.longValue()    +    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
11	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  max;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  max;	  long    val    =    value.longValue()    +    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
12	[BUG]  [BUGGY]  long  val  =  buf.longValue()  +  max;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue()  +  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue()  +  max;	  long    val    =    value.longValue()    +    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
13	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  offset;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  +  offset;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  +  offset;	  long    val    =    value.longValue()    +    max;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
14	[BUG]  [BUGGY]  long  val  =  value.longValue()  /  max;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  /  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  /  max;	  long    val    =    value.longValue()    +    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
15	[BUG]  [BUGGY]  int  val  =  Math.min(max,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(max,  value);	  long    val    =    Math.min(max,    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
16	[BUG]  [BUGGY]  long  val  =  Math.min(value,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  value);	  long    val    =    Math.min(max,    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
17	[BUG]  [BUGGY]  long  val  =  Math.min(max,  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  value.length);	  long    val    =    Math.min(max,    value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
18	[BUG]  [BUGGY]  long  val  =  value.longValue  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  -  1;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
19	[BUG]  [BUGGY]  long  val  =  value.longValue  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  +  1;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
20	[BUG]  [BUGGY]  long  val  =  value.longValue  /  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  /  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  /  BYTE_MASK;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
21	[BUG]  [BUGGY]  long  val  =  value.longValue  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  /  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  /  2;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
22	[BUG]  [BUGGY]  long  val  =  value.longValue  /  2.0;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  /  2.0;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  /  2.0;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
23	[BUG]  [BUGGY]  int  val  =  value.longValue;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value.longValue;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value.longValue;	  long    val    =    value.longValue;    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
24	[BUG]  [BUGGY]  final  long  val  =(long)Math.rint(value);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =(long)Math.rint(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =(long)Math.rint(value);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
25	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(buf,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(buf,  value);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
26	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(value,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(value,  max);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
27	[BUG]  [BUGGY]  final  byte  val  =(byte)Math.rint(value);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =(byte)Math.rint(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =(byte)Math.rint(value);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
28	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(buf,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(buf,  max);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
29	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(value  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(value  +  1);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
30	[BUG]  [BUGGY]  final  int  val  =  buf.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  buf.length  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  buf.length  -  1;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
31	[BUG]  [BUGGY]  final  int  val  =  value.length;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  value.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  value.length;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
32	[BUG]  [BUGGY]  final  long  val  =  buf.length;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  buf.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  buf.length;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
33	[BUG]  [BUGGY]  final  byte  val  =  buf.length;  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =  buf.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =  buf.length;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
34	[BUG]  [BUGGY]  final  int  val  =  max;  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  max;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
35	[BUG]  [BUGGY]  final  int  val  =  buf.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  buf.length  -  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  buf.length  -  2;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
36	[BUG]  [BUGGY]  final  int  val  =  buf.length  -  offset;  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  buf.length  -  offset;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  buf.length  -  offset;	  final    int    val    =    buf.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
37	[BUG]  [BUGGY]  final  int  val  =  Long.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Long.MIN_VALUE;	  int    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
38	[BUG]  [BUGGY]  float  val  =  Long.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Long.MIN_VALUE;	  int    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
39	[BUG]  [BUGGY]  double  val  =  Long.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Long.MIN_VALUE;	  int    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
40	[BUG]  [BUGGY]  char  val  =  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  char  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	char  val  =  Long.MIN_VALUE;	  int    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
41	[BUG]  [BUGGY]  short  val  =  getValue(buf,  offset,  length,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  getValue(buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  getValue(buf,  offset,  length,  negative);	  short    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
42	[BUG]  [BUGGY]  byte  val  =  getValue(buf,  offset,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  getValue(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  getValue(buf,  offset,  length);	  short    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
43	[BUG]  [BUGGY]  short  val  =  getValue(buf,  offset,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  getValue(buf,  offset,  length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  getValue(buf,  offset,  length  +  1);	  short    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
44	[BUG]  [BUGGY]  byte  val  =  Math.abs(buf.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
45	[BUG]  [BUGGY]  int  val  =  Math.abs(value.length);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(value.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  	75	None	replace
46	[BUG]  [BUGGY]  final  int  val  =  Math.abs(buf.length);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  	75	None	replace
47	[BUG]  [BUGGY]  int  val  =  Math.min(value.length,  buf.length);  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value.length,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value.length,  buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  	75	None	replace
48	[BUG]  [BUGGY]  int  val  =  Math.abs(buf.length  -  1);  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(buf.length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(buf.length  -  1);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  	75	None	replace
49	[BUG]  [BUGGY]  long  val  =  Math.abs(buf.length);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
50	[BUG]  [BUGGY]  int  val  =  Math.max(buf.length,  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(buf.length,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(buf.length,  value.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
51	[BUG]  [BUGGY]  int  val  =  max;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  max;	  long    val    =    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
52	[BUG]  [BUGGY]  long  val  =  max  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  max  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  max  +  1;	  long    val    =    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
53	[BUG]  [BUGGY]  long  val  =  buf.length;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.length;	  long    val    =    max;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
54	[BUG]  [BUGGY]  long  val  =  max  -  1;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  max  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  max  -  1;	  long    val    =    max;    	non-compiled	[CE]  	25	None	replace
55	[BUG]  [BUGGY]  final  long  val  =  max;  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  max;	  long    val    =    max;    	non-compiled	[CE]  	25	None	replace
56	[BUG]  [BUGGY]  long  val  =  getLongValue()  +  1;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getLongValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getLongValue()  +  1;	  long    val    =    getLongValue();    	non-compiled	[CE]  	43	None	replace
57	[BUG]  [BUGGY]  int  val  =  getLongValue();  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getLongValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getLongValue();	  long    val    =    getLongValue();    	non-compiled	[CE]  	43	None	replace
58	[BUG]  [BUGGY]  long  val  =  getLongValue(buf,  offset,  length);  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getLongValue(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getLongValue(buf,  offset,  length);	  long    val    =    getLongValue();    	non-compiled	[CE]  	43	None	replace
59	[BUG]  [BUGGY]  long  val  =  getUpperBound();  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getUpperBound();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getUpperBound();	  long    val    =    getLongValue();    	non-compiled	[CE]  	43	None	replace
60	[BUG]  [BUGGY]  long  val  =  getNumberValue();  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getNumberValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getNumberValue();	  long    val    =    getLongValue();    	non-compiled	[CE]  	43	None	replace
61	[BUG]  [BUGGY]  final  long  val  =  buf.longValue();  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  buf.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  buf.longValue();	  final    long    val    =    value.longValue();    	non-compiled	[CE]  	58	None	replace
62	[BUG]  [BUGGY]  final  long  val  =  value.longValue()  +  1;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue()  +  1;	  final    long    val    =    value.longValue();    	non-compiled	[CE]  	58	None	replace
63	[BUG]  [BUGGY]  final  int  val  =  value.longValue();  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  value.longValue();	  final    long    val    =    value.longValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
64	[BUG]  [BUGGY]  final  long  val  =  value.longValue()  +  max;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue()  +  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue()  +  max;	  final    long    val    =    value.longValue();    	non-compiled	[CE]  	58	None	replace
65	[BUG]  [BUGGY]  final  long  val  =  value.longValue()  *  2;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue()  *  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue()  *  2;	  final    long    val    =    value.longValue();    	non-compiled	[CE]  	58	None	replace
66	[BUG]  [BUGGY]  final  long  val  =  value.longValue()  +  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue()  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue()  +  1L;	  final    long    val    =    value.longValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
67	[BUG]  [BUGGY]  final  long  val  =  getValue(buf,  offset,  length,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(buf,  offset,  length,  negative);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
68	[BUG]  [BUGGY]  final  long  val  =  getValue(buf,  offset,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(buf,  offset,  length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(buf,  offset,  length  +  1);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
69	[BUG]  [BUGGY]  final  long  val  =  getValue(value,  buf,  offset,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(value,  buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(value,  buf,  offset,  length);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
70	[BUG]  [BUGGY]  final  long  val  =  getValue(buf,  offset,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(buf,  offset,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(buf,  offset,  max);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
71	[BUG]  [BUGGY]  final  byte  val  =  getValue(buf,  offset,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =  getValue(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =  getValue(buf,  offset,  length);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
72	[BUG]  [BUGGY]  int  val  =  getValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue()  +  1;	  long    val    =    getValue()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
73	[BUG]  [BUGGY]  long  val  =  getValue()  *  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue()  *  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue()  *  1;	  long    val    =    getValue()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
74	[BUG]  [BUGGY]  long  val  =  getValue().length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().length  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().length  +  1;	  long    val    =    getValue()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
75	[BUG]  [BUGGY]  final  long  val  =  getValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue()  +  1;	  long    val    =    getValue()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
76	[BUG]  [BUGGY]  final  int  val  =  Math.min(value,  max);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.min(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.min(value,  max);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
77	[BUG]  [BUGGY]  final  long  val  =  Math.min(value,  max,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(value,  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(value,  max,  negative);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
78	[BUG]  [BUGGY]  final  long  val  =  Math.min(value,  max  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(value,  max  +  1);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
79	[BUG]  [BUGGY]  final  long  val  =  Math.log(value,  max);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.log(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.log(value,  max);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
80	[BUG]  [BUGGY]  final  long  val  =  Math.round(value,  max);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.round(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.round(value,  max);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
81	[BUG]  [BUGGY]  final  long  val  =  Math.min(max,  value);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(max,  value);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
82	[BUG]  [BUGGY]  long  val  =  Math.min(value.length,  max);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value.length,  max);	  long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
83	[BUG]  [BUGGY]  long  val  =  Math.abs(max  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(max  +  1);	  long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
84	[BUG]  [BUGGY]  long  val  =  buf.length();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.length();	  long    val    =    buf.longValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
85	[BUG]  [BUGGY]  int  val  =  buf.longValue();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  buf.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  buf.longValue();	  long    val    =    buf.longValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
86	[BUG]  [BUGGY]  long  val  =  max.longValue();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  max.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  max.longValue();	  long    val    =    buf.longValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
87	[BUG]  [BUGGY]  byte  val  =  buf.longValue();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  buf.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  buf.longValue();	  long    val    =    buf.longValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
88	[BUG]  [BUGGY]  short  val  =  buf.longValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  buf.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  buf.longValue();	  long    val    =    buf.longValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
89	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  max);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length,  negative,  max);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
90	[BUG]  [BUGGY]  int  val  =  getValue(buf,  offset,  length,  negative);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue(buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue(buf,  offset,  length,  negative);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
91	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  size);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  size);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length,  negative,  size);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
92	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length,  negative,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length,  negative,  value);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
93	[BUG]  [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(value,  buf,  offset,  length,  negative);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
94	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length,  value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length,  value);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
95	[BUG]  [BUGGY]  long  val  =  Math.sqrt(buf,  value);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(buf,  value);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
96	[BUG]  [BUGGY]  long  val  =  Math.sqrt(value,  max);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(value,  max);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
97	[BUG]  [BUGGY]  long  val  =  Math.sqrt(value  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(value  +  1);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
98	[BUG]  [BUGGY]  long  val  =  Math.sqrt(buf,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(buf,  max);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
99	[BUG]  [BUGGY]  final  int  val  =  Math.sqrt(value);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.sqrt(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.sqrt(value);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
100	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(buf,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(buf,  value);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
101	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value,  max);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
102	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value  +  1);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
103	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value,  value.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value,  value.length);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
104	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(buf,  max);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(buf,  max);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
105	[BUG]  [BUGGY]  int  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(value  +  1);	  long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
106	[BUG]  [BUGGY]  long  val  =  Math.abs(buf.length  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(buf.length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(buf.length  +  1);	  long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
107	[BUG]  [BUGGY]  long  val  =  Math.abs(value  /  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  /  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  /  1);	  long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
108	[BUG]  [BUGGY]  short  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Math.abs(value  +  1);	  long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
109	[BUG]  [BUGGY]  long  val  =  Math.abs(value  +  1L);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  +  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  +  1L);	  long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
110	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max  +  1,  negative);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max  +  1,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max  +  1,  negative);	  long    val    =    Math.min(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
111	[BUG]  [BUGGY]  long  val  =  Math.min(max,  value  +  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  value  +  1);	  long    val    =    Math.min(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
112	[BUG]  [BUGGY]  int  val  =  Math.min(value,  max  +  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value,  max  +  1);	  long    val    =    Math.min(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
113	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max  +  1,  negative);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max  +  1,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max  +  1,  negative);	  long    val    =    Math.min(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
114	[BUG]  [BUGGY]  long  val  =  Math.log(value,  max  +  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.log(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.log(value,  max  +  1);	  long    val    =    Math.log(value,    max);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
115	[BUG]  [BUGGY]  long  val  =  Math.rint(value,  max);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.rint(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.rint(value,  max);	  long    val    =    Math.log(value,    max);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
116	[BUG]  [BUGGY]  long  val  =  Math.log(buf,  max);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.log(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.log(buf,  max);	  long    val    =    Math.log(value,    max);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
117	[BUG]  [BUGGY]  int  val  =  Math.log(value,  max);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.log(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.log(value,  max);	  long    val    =    Math.log(value,    max);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
118	[BUG]  [BUGGY]  long  val  =  Math.exp(value,  max);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.exp(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.exp(value,  max);	  long    val    =    Math.log(value,    max);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
119	[BUG]  [BUGGY]  long  val  =  buf.longValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue()  +  1;	  long    val    =    value.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
120	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  1;	  long    val    =    value.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  1l;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  +  1l;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  +  1l;	  long    val    =    value.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
122	[BUG]  [BUGGY]  int  val  =  value.longValue()  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value.longValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value.longValue()  +  1;	  long    val    =    value.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
123	[BUG]  [BUGGY]  if(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
124	[BUG]  [BUGGY]  while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
125	[BUG]  [BUGGY]  ||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
126	[BUG]  [BUGGY]  while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	while(value  <  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
127	[BUG]  [BUGGY]  final  long  val  =  Math.abs(max  +  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(max  +  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  final  int  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(value  +  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  /  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  /  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  /  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  final  long  val  =  Math.max(value,  max  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(value,  max  +  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  +  1L);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  +  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  +  1L);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max  -  1L);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max  -  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max  -  1L);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
133	[BUG]  [BUGGY]  int  val  =  Math.min(value,  max  -  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value,  max  -  1);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
134	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max  -  1,  negative);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max  -  1,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max  -  1,  negative);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
135	[BUG]  [BUGGY]  long  val  =  Math.min(max,  value  -  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  value  -  1);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
136	[BUG]  [BUGGY]  final  long  val  =(long)Math.floor(value);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =(long)Math.floor(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =(long)Math.floor(value);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  final  int  val  =(int)Math.floor(buf,  value);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.floor(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.floor(buf,  value);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  final  byte  val  =(byte)Math.floor(value);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =(byte)Math.floor(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =(byte)Math.floor(value);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  final  int  val  =(int)Math.floor(buf,  max);  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.floor(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.floor(buf,  max);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  final  int  val  =(int)Math.floor(value,  max);  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.floor(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.floor(value,  max);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  final  int  val  =(int)Math.log(value);  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.log(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.log(value);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
142	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
143	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
144	[BUG]  [BUGGY]  long  val  =  Math.max(max,  length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  length);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
145	[BUG]  [BUGGY]  int  val  =  Math.min(length,  max);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(length,  max);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
146	[BUG]  [BUGGY]  long  val  =  Math.min(max,  length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  length);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
147	[BUG]  [BUGGY]  final  long  val  =  Math.min(length,  max);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(length,  max);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
148	[BUG]  [BUGGY]  long  val  =  Math.min(length,  max,  negative);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(length,  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(length,  max,  negative);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
149	[BUG]  [BUGGY]  final  int  val  =  Math.abs(value  -  offset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(value  -  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(value  -  offset);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
150	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  /  offset);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  /  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  /  offset);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
151	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  offset  +  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  offset  +  length);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
152	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  max);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  offset,  max);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
153	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  offset,  length);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
154	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  offset  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  offset  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  offset  +  1);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
155	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  max  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(value.length,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(value.length,  max  +  1);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
156	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  max  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(value.length,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(value.length,  max  -  1);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
157	[BUG]  [BUGGY]  final  int  len  =  Math.max(value.length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.max(value.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.max(value.length,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
158	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(length,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
159	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  max,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(value.length,  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(value.length,  max,  negative);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
160	[BUG]  [BUGGY]  final  int  len  =  Math.min(max,  value.length);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(max,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(max,  value.length);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
161	[BUG]  [BUGGY]  final  int  len  =  Math.min(buf.length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(buf.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(buf.length,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
162	[BUG]  [BUGGY]  int  val  =  getValue(buf,  offset,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue(buf,  offset,  length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue(buf,  offset,  length  +  1);	  long    val    =    getValue(buf,    offset,    length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
163	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  1,  negative);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  1,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  +  1,  negative);	  long    val    =    getValue(buf,    offset,    length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
164	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  2);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  +  2);	  long    val    =    getValue(buf,    offset,    length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
165	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  1L);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  +  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  +  1L);	  long    val    =    getValue(buf,    offset,    length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
166	[BUG]  [BUGGY]  final  int  val  =  getLongValue();  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getLongValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getLongValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
167	[BUG]  [BUGGY]  final  int  val  =  getValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue()  +  1;	  final    int    val    =    getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
168	[BUG]  [BUGGY]  final  int  val  =  getNumberValue();  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getNumberValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getNumberValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
169	[BUG]  [BUGGY]  final  int  val  =  getValue().length;  [CE]  class,  interface,  or  enum  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue().length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue().length;	  final    int    val    =    getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
170	[BUG]  [BUGGY]  Long  val  =  value.longValue();  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  Long  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	Long  val  =  value.longValue();	  long    val    =    value.longValue()    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
171	[BUG]  [BUGGY]  long  value  =  value.longValue();  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  value  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  value  =  value.longValue();	  long    val    =    value.longValue()    +    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
172	[BUG]  [BUGGY]  long  val  =  getValue()  *  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue()  *  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue()  *  1L;	  long    val    =    getValue()    +    1L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
173	[BUG]  [BUGGY]  long  val  =  getValue()  /  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue()  /  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue()  /  1L;	  long    val    =    getValue()    +    1L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
174	[BUG]  [BUGGY]  long  val  =  getValue().length  +  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().length  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().length  +  1L;	  long    val    =    getValue()    +    1L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
175	[BUG]  [BUGGY]  int  val  =  getValue()  +  1L;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue()  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue()  +  1L;	  long    val    =    getValue()    +    1L;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
176	[BUG]  [BUGGY]  float  val  =  Math.abs(value  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.abs(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.abs(value  -  1);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
177	[BUG]  [BUGGY]  float  val  =  Math.abs(max);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.abs(max);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
178	[BUG]  [BUGGY]  final  float  val  =  Math.abs(value);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  float  val  =  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  float  val  =  Math.abs(value);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
179	[BUG]  [BUGGY]  float  val  =  Math.abs(value  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.abs(value  +  1);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
180	[BUG]  [BUGGY]  float  val  =  Math.abs(value  -  max);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.abs(value  -  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.abs(value  -  max);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
181	[BUG]  [BUGGY]  int  val  =  Integer.MIN_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Integer.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Integer.MIN_VALUE;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
182	[BUG]  [BUGGY]  long  val  =  Integer.MIN_VALUE  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Integer.MIN_VALUE  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Integer.MIN_VALUE  -  1;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
183	[BUG]  [BUGGY]  long  val  =  Integer.MAX_VALUE;  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Integer.MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Integer.MAX_VALUE;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
184	[BUG]  [BUGGY]  long  val  =  Integer.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Integer.MIN_VALUE  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Integer.MIN_VALUE  +  1;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
185	[BUG]  [BUGGY]  final  long  val  =  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Integer.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Integer.MIN_VALUE;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
186	[BUG]  [BUGGY]  long  val  =  Integer.MIN_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Integer.MIN_VALUE  /  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Integer.MIN_VALUE  /  2;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
187	[BUG]  [BUGGY]  long  val  =  Math.max(max,  buf.length);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  buf.length);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
188	[BUG]  [BUGGY]  int  val  =  Math.max(buf.length,  max);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(buf.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(buf.length,  max);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
189	[BUG]  [BUGGY]  long  val  =  Math.max(buf.length,  value);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf.length,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf.length,  value);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
190	[BUG]  [BUGGY]  final  long  val  =  Math.max(buf.length,  max);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(buf.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(buf.length,  max);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
191	[BUG]  [BUGGY]  long  val  =  Math.min(max,  buf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  buf.length);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
192	[BUG]  [BUGGY]  long  val  =  getValue(buf,  value);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
193	[BUG]  [BUGGY]  int  val  =  getValue(value);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
194	[BUG]  [BUGGY]  final  long  val  =  getValue(value);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
195	[BUG]  [BUGGY]  long  val  =  getValue(buf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
196	[BUG]  [BUGGY]  long  val  =  getLongValue(value);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getLongValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getLongValue(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
197	[BUG]  [BUGGY]  long  val  =  getLong(value);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getLong(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getLong(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
198	[BUG]  [BUGGY]  long  val  =  Math.abs(max  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(max  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
199	[BUG]  [BUGGY]  int  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(value  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
200	[BUG]  [BUGGY]  long  val  =  Math.max(max,  value  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  value  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
201	[BUG]  [BUGGY]  long  val  =  Math.sqrt(max  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(max  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
202	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  1L);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  -  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  -  1L);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
203	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  offset,  negative);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  offset,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  offset,  negative);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
204	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  length);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
205	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  value);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
206	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  negative,  buf.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  negative,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  negative,  buf.length);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
207	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  size);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  size);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  size);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
208	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  negative,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  negative,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  negative,  length);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
209	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  negative,  bits);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  negative,  bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  negative,  bits);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
210	[BUG]  [BUGGY]  long  val  =  Math.max(max,  value  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  value  +  1);	  long    val    =    Math.max(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
211	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max  +  1L);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max  +  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max  +  1L);	  long    val    =    Math.max(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
212	[BUG]  [BUGGY]  int  val  =  Math.max(value,  max  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(value,  max  +  1);	  long    val    =    Math.max(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
213	[BUG]  [BUGGY]  final  int  val  =  getValue(buf,  offset,  length,  negative);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(buf,  offset,  length,  negative);	  final    int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
214	[BUG]  [BUGGY]  final  int  val  =  getValue(value,  buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(value,  buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(value,  buf,  offset,  length);	  final    int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
215	[BUG]  [BUGGY]  final  int  val  =  getValue(buf,  offset,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(buf,  offset,  length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(buf,  offset,  length  +  1);	  final    int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
216	[BUG]  [BUGGY]  final  int  val  =  getValue(buf,  offset,  width,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(buf,  offset,  width,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(buf,  offset,  width,  length);	  final    int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
217	[BUG]  [BUGGY]  int  val  =  Math.max(max,  value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(max,  value);	  int    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
218	[BUG]  [BUGGY]  byte  val  =  Math.max(value,  max);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.max(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.max(value,  max);	  int    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
219	[BUG]  [BUGGY]  int  val  =  Math.max(buf,  max);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(buf,  max);	  int    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
220	[BUG]  [BUGGY]  float  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  value.longValue();	  int    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
221	[BUG]  [BUGGY]  int  val  =  value.intValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value.intValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value.intValue();	  int    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
222	[BUG]  [BUGGY]  int  val  =  value.length();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value.length();	  int    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
223	[BUG]  [BUGGY]  if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
224	[BUG]  [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||(buf!=  null  &&  buf.length  >  0)||(buf.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
225	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
226	[BUG]  [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
227	[BUG]  [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf[0].length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf[0].length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||(buf!=  null  &&  buf.length  >  0)||(buf[0].length  <  =  max))  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
228	[BUG]  [BUGGY]  long  val  =  Math.max(max,  buf);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  buf);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  buf);	  long    val    =    Math.max(buf,    max);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
229	[BUG]  [BUGGY]  final  long  val  =  Math.max(buf,  max);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(buf,  max);	  long    val    =    Math.max(buf,    max);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
230	[BUG]  [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(value,  buf,  offset,  length  +  1);	  long    val    =    getValue(value,    buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
231	[BUG]  [BUGGY]  int  val  =  getValue(value,  buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue(value,  buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue(value,  buf,  offset,  length);	  long    val    =    getValue(value,    buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
232	[BUG]  [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(value,  buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(value,  buf,  offset,  length  -  1);	  long    val    =    getValue(value,    buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
233	[BUG]  [BUGGY]  int  val  =  Math.min(value,  value.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value,  value.length);	  long    val    =    Math.min(value,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
234	[BUG]  [BUGGY]  long  val  =  Math.max(value,  value.length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  value.length);	  long    val    =    Math.min(value,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
235	[BUG]  [BUGGY]  final  long  val  =  Math.min(value,  value.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(value,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(value,  value.length);	  long    val    =    Math.min(value,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
236	[BUG]  [BUGGY]  long  val  =  Math.min(value,  value.length  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  value.length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  value.length  -  1);	  long    val    =    Math.min(value,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
237	[BUG]  [BUGGY]  long  val  =  Math.abs(max  -  value);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(max  -  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(max  -  value);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
238	[BUG]  [BUGGY]  long  val  =  Math.abs(value  /  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  /  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  /  max);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
239	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  max  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  -  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  -  max  +  1);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
240	[BUG]  [BUGGY]  int  val  =  Math.abs(value  -  max);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(value  -  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(value  -  max);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
241	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  offset);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  -  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  -  offset);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
242	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  bits);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  -  bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  -  bits);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
243	[BUG]  [BUGGY]  final  long  val  =  Math.abs(max  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(max  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
244	[BUG]  [BUGGY]  final  int  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(value  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
245	[BUG]  [BUGGY]  final  long  val  =  Math.max(max,  value  -  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(max,  value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(max,  value  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(max  -  1);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(max  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
247	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  1L);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  1L);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
248	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  length;	  long    val    =    value.longValue()    +    length;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
249	[BUG]  [BUGGY]  long  val  =  buf.longValue()  +  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue()  +  length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue()  +  length;	  long    val    =    value.longValue()    +    length;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
250	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  +  length  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  +  length  +  1;	  long    val    =    value.longValue()    +    length;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
251	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  size;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  +  size;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  +  size;	  long    val    =    value.longValue()    +    length;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
252	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  +  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
253	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  -  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
254	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  2;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  *  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  *  2;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
255	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  2;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  -  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  -  2;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
256	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  4;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  *  4;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  *  4;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
257	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  2;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  +  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  +  2;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
258	[BUG]  [BUGGY]  long  val  =  value  -  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
259	[BUG]  [BUGGY]  int  val  =  Long.MIN_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Long.MIN_VALUE  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Long.MIN_VALUE  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
260	[BUG]  [BUGGY]  final  long  val  =  Long.MIN_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Long.MIN_VALUE  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Long.MIN_VALUE  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
261	[BUG]  [BUGGY]  long  val  =  value.length  -  1;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.length  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.length  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
262	[BUG]  [BUGGY]  long  val  =  value.longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
263	[BUG]  [BUGGY]  int  val  =  Math.sqrt(buf,  value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.sqrt(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.sqrt(buf,  value);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
264	[BUG]  [BUGGY]  byte  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.sqrt(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.sqrt(value);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
265	[BUG]  [BUGGY]  int  val  =  Math.sqrt(buf,  max);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.sqrt(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.sqrt(buf,  max);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
266	[BUG]  [BUGGY]  int  val  =  Math.sqrt(value,  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.sqrt(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.sqrt(value,  max);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
267	[BUG]  [BUGGY]  int  val  =  Math.sqrt(bits);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.sqrt(bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.sqrt(bits);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
268	[BUG]  [BUGGY]  int  val  =  getValue(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue(buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue(buf,  offset,  length  -  1);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
269	[BUG]  [BUGGY]  final  long  val  =  getValue(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue(buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue(buf,  offset,  length  -  1);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
270	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  1,  negative);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  1,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  -  1,  negative);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
271	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  max  -  1);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
272	[BUG]  [BUGGY]  final  int  val  =  Math.max(value,  max);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.max(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.max(value,  max);	  final    long    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
273	[BUG]  [BUGGY]  final  long  val  =  Math.max(max,  value);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(max,  value);	  final    long    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
274	[BUG]  [BUGGY]  final  long  val  =  Math.max(value,  max,  negative);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(value,  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(value,  max,  negative);	  final    long    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
275	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max  -  1L);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max  -  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max  -  1L);	  long    val    =    Math.max(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
276	[BUG]  [BUGGY]  int  val  =  Math.max(value,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(value,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(value,  max  -  1);	  long    val    =    Math.max(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
277	[BUG]  [BUGGY]  final  long  val  =  Math.max(value,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(value,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(value,  max  -  1);	  long    val    =    Math.max(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
278	[BUG]  [BUGGY]  final  int  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(max);	  final    long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
279	[BUG]  [BUGGY]  final  long  val  =  Math.min(value.length,  max);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(value.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(value.length,  max);	  final    long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
280	[BUG]  [BUGGY]  final  long  val  =  Math.rint(value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.rint(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.rint(value);	  final    long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
281	[BUG]  [BUGGY]  final  long  val  =  Math.abs(max  -  value);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(max  -  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(max  -  value);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
282	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  /  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  /  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  /  max);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
283	[BUG]  [BUGGY]  final  int  val  =  Math.abs(value  -  max);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(value  -  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(value  -  max);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
284	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  max  +  1);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  max  +  1);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
285	[BUG]  [BUGGY]  final  int  val  =  Math.abs(max  -  value);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(max  -  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(max  -  value);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
286	[BUG]  [BUGGY]  boolean  val  =  negative?  Math.abs(value):  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  Math.abs(value):  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  Math.abs(value):  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
287	[BUG]  [BUGGY]  boolean  val  =  negative  &&  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative  &&  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative  &&  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
288	[BUG]  [BUGGY]  boolean  val  =  negative?  Math.abs(value)>  max  :  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  Math.abs(value)>  max  :  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  Math.abs(value)>  max  :  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
289	[BUG]  [BUGGY]  boolean  val  =  negative?  value  :  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  value  :  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  value  :  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
290	[BUG]  [BUGGY]  boolean  val  =  negative?  Math.abs(value)/  2.0  :  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  Math.abs(value)/  2.0  :  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  Math.abs(value)/  2.0  :  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
291	[BUG]  [BUGGY]  boolean  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  Math.abs(value  +  1);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
292	[BUG]  [BUGGY]  int  val  =  value;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value;	  long    val    =    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
293	[BUG]  [BUGGY]  long  val  =  value  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value  +  1;	  long    val    =    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
294	[BUG]  [BUGGY]  long  val  =  value.length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.length;	  long    val    =    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
295	[BUG]  [BUGGY]  int  val  =  Math.min(bits,  max);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(bits,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(bits,  max);	  int    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
296	[BUG]  [BUGGY]  int  val  =  Math.min(value,  max,  negative);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value,  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value,  max,  negative);	  int    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
297	[BUG]  [BUGGY]  byte  val  =  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.min(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.min(value,  max);	  int    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
298	[BUG]  [BUGGY]  Long  val  =  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  Long  val  =  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	Long  val  =  Long.MIN_VALUE;	  short    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
299	[BUG]  [BUGGY]  short  val  =  Long.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Long.MIN_VALUE  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Long.MIN_VALUE  +  1;	  short    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
300	[BUG]  [BUGGY]  byte  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(max);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
301	[BUG]  [BUGGY]  byte  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(value  +  1);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
302	[BUG]  [BUGGY]  final  byte  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =  Math.abs(value);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
303	[BUG]  [BUGGY]  byte  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(value  -  1);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
304	[BUG]  [BUGGY]  long  val  =  value.longValue()  /  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  /  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  /  2;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
305	[BUG]  [BUGGY]  long  val  =  buf.longValue()  *  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue()  *  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue()  *  2;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
306	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  4;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  4;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  4;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
307	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  8;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  8;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  8;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
308	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  2  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  2  +  1;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
309	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  2L;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  2L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  2L;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
310	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
311	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
312	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max.   ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
313	[BUG]  [BUGGY]  long  val  =  value.longValue()  /  1L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  /  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  /  1L;	  long    val    =    value.longValue()    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
314	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  1L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  1L;	  long    val    =    value.longValue()    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
315	[BUG]  [BUGGY]  long  val  =  buf.longValue()  +  1L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue()  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue()  +  1L;	  long    val    =    value.longValue()    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
316	[BUG]  [BUGGY]  final  int  len  =  buf.length();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  buf.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  buf.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
317	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  value.length()  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  value.length()  -  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
318	[BUG]  [BUGGY]  final  int  len  =  value.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  value.length()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  value.length()  +  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
319	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  2;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  value.length()  -  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  value.length()  -  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
320	[BUG]  [BUGGY]  final  int  len  =  value.length()  *  2;  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  value.length()  *  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  value.length()  *  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
321	[BUG]  [BUGGY]  final  int  len  =  value.length()  /  2;  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  value.length()  /  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  value.length()  /  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
322	[BUG]  [BUGGY]  double  val  =  Math.max(value,  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.max(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.max(value,  max);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
323	[BUG]  [BUGGY]  double  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.sqrt(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.sqrt(value);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
324	[BUG]  [BUGGY]  double  val  =  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.min(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.min(value,  max);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
325	[BUG]  [BUGGY]  double  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.abs(value  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.abs(value  +  1);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
326	[BUG]  [BUGGY]  double  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.abs(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.abs(value  -  1);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
327	[BUG]  [BUGGY]  double  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.abs(max);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
328	[BUG]  [BUGGY]  byte  val  =  getValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  getValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  getValue();	  int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
329	[BUG]  [BUGGY]  long  val  =  Math.round(buf,  max);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.round(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.round(buf,  max);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
330	[BUG]  [BUGGY]  long  val  =  Math.round(max,  value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.round(max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.round(max,  value);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
331	[BUG]  [BUGGY]  long  val  =  Math.round(value,  max  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.round(value,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.round(value,  max  +  1);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
332	[BUG]  [BUGGY]  int  val  =  Math.round(value,  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.round(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.round(value,  max);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
333	[BUG]  [BUGGY]  long  val  =  Math.round(value,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.round(value,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.round(value,  max  -  1);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
334	[BUG]  [BUGGY]  final  long  val  =  value;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
335	[BUG]  [BUGGY]  final  long  val  =  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Long.MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Long.MAX_VALUE;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
336	[BUG]  [BUGGY]  final  long  val  =  Math.min(bits,  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(bits,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(bits,  max);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
337	[BUG]  [BUGGY]  long  val  =  Math.max(max,  bits);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(max,  bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(max,  bits);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
338	[BUG]  [BUGGY]  long  val  =  Math.min(bits,  value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(bits,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(bits,  value);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
339	[BUG]  [BUGGY]  long  val  =  Math.min(max,  bits);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  bits);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
340	[BUG]  [BUGGY]  long  val  =  getValue().longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().longValue()  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().longValue()  +  1;	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
341	[BUG]  [BUGGY]  long  val  =  getValue().length();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().length();	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
342	[BUG]  [BUGGY]  final  long  val  =  getValue().longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue().longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue().longValue();	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
343	[BUG]  [BUGGY]  int  val  =  getValue().longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getValue().longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getValue().longValue();	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
344	[BUG]  [BUGGY]  long  val  =  getValue().longValue()  +  1L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().longValue()  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().longValue()  +  1L;	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
345	[BUG]  [BUGGY]  long  val  =  getValue().longValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().longValue()  +  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().longValue()  +  2;	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
346	[BUG]  [BUGGY]  final  long  val  =  getLongValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getLongValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getLongValue();	  final    long    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
347	[BUG]  [BUGGY]  final  long  val  =  getValue().length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue().length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue().length;	  final    long    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
348	[BUG]  [BUGGY]  final  long  val  =  getWrappedValue();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getWrappedValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getWrappedValue();	  final    long    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
349	[BUG]  [BUGGY]  long  val  =  Math.max(buf,  value);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf,  value);	  long    val    =    Math.max(max,    value);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
350	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  length);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
351	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  offset,  negative);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  offset,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  offset,  negative);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
352	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  value);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
353	[BUG]  [BUGGY]  long  val  =  Math.max(buf,  value,  negative);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf,  value,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf,  value,  negative);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
354	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  size);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  size);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  size);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
355	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  negative,  buf.length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  negative,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  negative,  buf.length);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
356	[BUG]  [BUGGY]  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  val  =  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	val  =  Math.abs(value);	  int    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
357	[BUG]  [BUGGY]  int  val  =  Math.abs(buf,  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(buf,  max);	  int    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
358	[BUG]  [BUGGY]  boolean  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  value.longValue();	  int    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
359	[BUG]  [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	readFully(buf,  offset,  length,  negative)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
360	[BUG]  [BUGGY]  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	value  <  =  max)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
361	[BUG]  [BUGGY]  if(value  >=  max)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  >=  max)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  >=  max)  {  throw  new  IllegalArgumentException( "Value "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
362	[BUG]  [BUGGY]  short  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Math.abs(max);	  long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
363	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
364	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf!=  null)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
365	[BUG]  [BUGGY]  if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf  ==  null)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
366	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])buf.clone();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte[]  buf  =(byte[])buf.clone();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte[]  buf  =(byte[])buf.clone();	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
367	[BUG]  [BUGGY]  final  long  len  =  value.length();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  len  =  value.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  len  =  value.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
368	[BUG]  [BUGGY]  final  int  len  =  buffer.length();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  buffer.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  buffer.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
369	[BUG]  [BUGGY]  int  val  =  Math.min(bits,  value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(bits,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(bits,  value);	  int    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
370	[BUG]  [BUGGY]  final  int  val  =  getOffset();  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getOffset();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getOffset();	  final    int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
371	[BUG]  [BUGGY]  final  int  val  =  getValue(bits);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(bits);	  final    int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
372	[BUG]  [BUGGY]  int  val  =  Math.sqrt(buf,  negative);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.sqrt(buf,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.sqrt(buf,  negative);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
373	[BUG]  [BUGGY]  float  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.sqrt(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.sqrt(value);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
374	[BUG]  [BUGGY]  boolean  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  Math.abs(max);	  int    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
375	[BUG]  [BUGGY]  int  val  =  Math.abs(bits);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(bits);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(bits);	  int    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
376	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(value,  offset);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(value,  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(value,  offset);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
377	[BUG]  [BUGGY]  short  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  value.longValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  value.longValue();	  long    val    =    value.longValue()    +    2;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
378	[BUG]  [BUGGY]  long  val  =  Math.max(negative,  value,  max);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(negative,  value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(negative,  value,  max);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
379	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value  -  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value  -  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value  -  max);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
380	[BUG]  [BUGGY]  final  int  val  =  Math.abs(buf,  value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Math.abs(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Math.abs(buf,  value);	  final    int    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
381	[BUG]  [BUGGY]  long  val  =  Math.min(length,  value);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(length,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(length,  value);	  long    val    =    Math.min(max,    value);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
382	[BUG]  [BUGGY]  long  val  =  Math.min(buf,  value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(buf,  value);	  long    val    =    Math.min(max,    value);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
383	[BUG]  [BUGGY]  long  val  =  Math.min(negative,  value,  max);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(negative,  value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(negative,  value,  max);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
384	[BUG]  [BUGGY]  long  val  =  Math.min(negative,  max,  value);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(negative,  max,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(negative,  max,  value);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
385	[BUG]  [BUGGY]  long  val  =  Math.min(buf,  offset,  max);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(buf,  offset,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(buf,  offset,  max);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
386	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
387	[BUG]  [BUGGY]  final  long  val  =  Math.abs(buf.length  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(buf.length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(buf.length  -  1);	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
388	[BUG]  [BUGGY]  final  int  val  =  buffer.length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  buffer.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  buffer.length;	  final    int    val    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
389	[BUG]  [BUGGY]  byte  val  =  Math.abs(buf,  max);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(buf,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(buf,  max);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
390	[BUG]  [BUGGY]  byte  val  =  Math.abs(buf,  value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Math.abs(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Math.abs(buf,  value);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
391	[BUG]  [BUGGY]  short  val  =  Integer.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Integer.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Integer.MIN_VALUE;	  long    val    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
392	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  bits;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  +  bits;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  +  bits;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
393	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  bits;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  -  bits;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  -  bits;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
394	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  bits;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  *  bits;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  *  bits;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
395	[BUG]  [BUGGY]  final  long  val  =  Math.min(value,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.min(value,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.min(value,  max  -  1);	  final    long    val    =    Math.min(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
396	[BUG]  [BUGGY]  long  val  =  max  +  1l;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  max  +  1l;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  max  +  1l;	  long    val    =    max;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
397	[BUG]  [BUGGY]  long  val  =  getValue(buf,  negative);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  negative);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
398	[BUG]  [BUGGY]  long  val  =  getValue(value,  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(value,  max);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
399	[BUG]  [BUGGY]  short  val  =  getValue(value);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  getValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  getValue(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
400	[BUG]  [BUGGY]  long  val  =  Math.min(max,  buf);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(max,  buf);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(max,  buf);	  long    val    =    Math.max(buf,    max);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
401	[BUG]  [BUGGY]  final  long  val  =  Math.max(max,  buf);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.max(max,  buf);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.max(max,  buf);	  long    val    =    Math.max(buf,    max);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
402	[BUG]  [BUGGY]  long  val  =  Math.min(bits,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(bits,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(bits,  max  -  1);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
403	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(buf,  negative);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(buf,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(buf,  negative);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
404	[BUG]  [BUGGY]  byte  val  =  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Long.MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Long.MAX_VALUE;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
405	[BUG]  [BUGGY]  byte  val  =  Long.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  Long.MIN_VALUE  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  Long.MIN_VALUE  +  1;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
406	[BUG]  [BUGGY]  long  val  =  Math.min(length,  value.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(length,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(length,  value.length);	  long    val    =    Math.min(value,    value.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
407	[BUG]  [BUGGY]  long  val  =  Math.sqrt(buf,  negative);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(buf,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(buf,  negative);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
408	[BUG]  [BUGGY]  long  val  =  Long.MIN_VALUE  -  1L;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Long.MIN_VALUE  -  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Long.MIN_VALUE  -  1L;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
409	[BUG]  [BUGGY]  long  val  =  Long.MIN_VALUE  /  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Long.MIN_VALUE  /  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Long.MIN_VALUE  /  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
410	[BUG]  [BUGGY]  short  val  =  Long.MIN_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Long.MIN_VALUE  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Long.MIN_VALUE  -  1;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
411	[BUG]  [BUGGY]  long  val  =  buf.longValue;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf.longValue;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf.longValue;	  long    val    =    value.longValue;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
412	[BUG]  [BUGGY]  long  val  =  value.longValue  +  1L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  +  1L;	  long    val    =    value.longValue;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
413	[BUG]  [BUGGY]  long  val  =  value.longValue  +  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue  +  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue  +  2;	  long    val    =    value.longValue;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
414	[BUG]  [BUGGY]  final  long  val  =  value.longValue()  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue()  +  length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue()  +  length;	  final    long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
415	[BUG]  [BUGGY]  final  int  val  =  getValue(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(buf,  offset,  length  -  1);	  final    int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
416	[BUG]  [BUGGY]  long  val  =  Math.abs(buf.length  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(buf.length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(buf.length  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
417	[BUG]  [BUGGY]  long  val  =  Math.sqrt(value  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(value  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(value  -  1);	  long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
418	[BUG]  [BUGGY]  final  byte  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  byte  val  =  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  byte  val  =  Math.abs(max);	  final    long    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
419	[BUG]  [BUGGY]  long  val  =  Math.max(buf,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf,  max  -  1);	  long    val    =    Math.max(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
420	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max  -  2);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max  -  2);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max  -  2);	  long    val    =    Math.max(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
421	[BUG]  [BUGGY]  long  val  =  Math.min(length,  max  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(length,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(length,  max  +  1);	  long    val    =    Math.min(length,    max);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
422	[BUG]  [BUGGY]  double  val  =  Math.abs(value  -  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.abs(value  -  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.abs(value  -  max);	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
423	[BUG]  [BUGGY]  long  val  =  Math.max(buf.length,  max  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf.length,  max  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf.length,  max  +  1);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
424	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max.   ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
425	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max:   "  +  max);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max:   "  +  max);  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  max:   "  +  max);  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for   "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
426	[BUG]  [BUGGY]  boolean  val  =  negative?  Math.abs(value):  value;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  Math.abs(value):  value;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  Math.abs(value):  value;	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
427	[BUG]  [BUGGY]  boolean  val  =  negative?  false  :  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  false  :  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  false  :  Math.abs(value);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
428	[BUG]  [BUGGY]  boolean  val  =  negative?  Math.abs(value):  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative?  Math.abs(value):  Math.abs(max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative?  Math.abs(value):  Math.abs(max);	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
429	[BUG]  [BUGGY]  short  val  =  getValue(value,  buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  getValue(value,  buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  getValue(value,  buf,  offset,  length);	  long    val    =    getValue(value,    buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
430	[BUG]  [BUGGY]  final  int  len  =  Math.min(bits,  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(bits,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(bits,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
431	[BUG]  [BUGGY]  final  int  len  =  Math.min(len,  max);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(len,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(len,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
432	[BUG]  [BUGGY]  final  int  len  =  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(value,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
433	[BUG]  [BUGGY]  long  val  =  buf;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  buf;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  buf;	  long    val    =    value;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
434	[BUG]  [BUGGY]  negative  &&  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  negative  &&  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	negative  &&  value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
435	[BUG]  [BUGGY]  negative  &&  buf.length  >  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  negative  &&  buf.length  >  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	negative  &&  buf.length  >  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
436	[BUG]  [BUGGY]  int  val  =  Math.max(bits,  max);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(bits,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(bits,  max);	  int    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
437	[BUG]  [BUGGY]  float  val  =  Math.max(value,  max);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.max(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.max(value,  max);	  int    val    =    Math.max(value,    max);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
438	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  2  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  *  2  +  length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  *  2  +  length;	  long    val    =    value.longValue()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
439	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  2);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  2);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  -  2);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
440	[BUG]  [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  1L);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue(buf,  offset,  length  -  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue(buf,  offset,  length  -  1L);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
441	[BUG]  [BUGGY]  short  val  =  getValue(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  getValue(buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  getValue(buf,  offset,  length  -  1);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
442	[BUG]  [BUGGY]  final  long  val  =  value.longValue;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.longValue;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.longValue;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
443	[BUG]  [BUGGY]  final  long  val  =  Long.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Long.MIN_VALUE  +  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Long.MIN_VALUE  +  1;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
444	[BUG]  [BUGGY]  final  long  val  =  value  +  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value  +  Long.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value  +  Long.MIN_VALUE;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
445	[BUG]  [BUGGY]  float  val  =  getValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  getValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  getValue();	  int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
446	[BUG]  [BUGGY]  int  val  =  getOffset();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  getOffset();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  getOffset();	  int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
447	[BUG]  [BUGGY]  int  val  =  Math.abs(buf.length  -  offset);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.abs(buf.length  -  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.abs(buf.length  -  offset);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
448	[BUG]  [BUGGY]  boolean  val  =  Math.abs(buf.length);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  Math.abs(buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  Math.abs(buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
449	[BUG]  [BUGGY]  int  val  =  Math.min(value,  buf.length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(value,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(value,  buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
450	[BUG]  [BUGGY]  float  val  =  Math.abs(buf.length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.abs(buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.abs(buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
451	[BUG]  [BUGGY]  long  val  =  Math.min(length,  max  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(length,  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(length,  max  -  1);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
452	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max  -  2);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max  -  2);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max  -  2);	  long    val    =    Math.min(value,    max    -    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
453	[BUG]  [BUGGY]  final  long  val  =  Math.abs(buf.length  +  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(buf.length  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(buf.length  +  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
454	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  max  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.abs(value  -  max  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.abs(value  -  max  -  1);	  long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
455	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max  +  1L);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max  +  1L);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max  +  1L);	  long    val    =    Math.min(value,    max    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
456	[BUG]  [BUGGY]  final  long  val  =  getValue()  +  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  getValue()  +  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  getValue()  +  1L;	  final    long    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
457	[BUG]  [BUGGY]  long  val  =  getFloatValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getFloatValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getFloatValue();	  long    val    =    getLongValue();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
458	[BUG]  [BUGGY]  long  val  =  Math.pow(10,  value);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.pow(10,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.pow(10,  value);	  long    val    =    Math.max(max,    value);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
459	[BUG]  [BUGGY]  byte  val  =  getValue(value);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  getValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  getValue(value);	  long    val    =    getValue(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
460	[BUG]  [BUGGY]  long  val  =  getValue().longValue()  *  2;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getValue().longValue()  *  2;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getValue().longValue()  *  2;	  long    val    =    getValue().longValue();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
461	[BUG]  [BUGGY]  long  val  =  getOffset();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  getOffset();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  getOffset();	  long    val    =    getLongValue();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
462	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value.longValue()  +  length  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value.longValue()  +  length  -  1;	  long    val    =    value.longValue()    +    length;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
463	[BUG]  [BUGGY]  final  double  val  =  getValue(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  double  val  =  getValue(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  double  val  =  getValue(buf,  offset,  length);	  final    long    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
464	[BUG]  [BUGGY]  byte  val  =  getValue(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  getValue(buf,  offset,  length  -  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  getValue(buf,  offset,  length  -  1);	  long    val    =    getValue(buf,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
465	[BUG]  [BUGGY]  float  val  =  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  float  val  =  Math.min(value,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	float  val  =  Math.min(value,  max);	  float    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
466	[BUG]  [BUGGY]  long  val  =  Math.max(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(buf,  offset,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(buf,  offset,  negative);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
467	[BUG]  [BUGGY]  long  val  =  Math.max(value,  max,  offset);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(value,  max,  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(value,  max,  offset);	  long    val    =    Math.max(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
468	[BUG]  [BUGGY]  short  val  =  Math.max(buf.length,  max);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  Math.max(buf.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  Math.max(buf.length,  max);	  long    val    =    Math.max(buf.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
469	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  max,  negative);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  max,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  max,  negative);	  final    long    val    =    Math.abs(value    -    max);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
470	[BUG]  [BUGGY]  byte  val  =  negative?  Long.MIN_VALUE  :  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  negative?  Long.MIN_VALUE  :  Long.MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  negative?  Long.MIN_VALUE  :  Long.MAX_VALUE;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
471	[BUG]  [BUGGY]  byte  val  =  negative?  Long.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  negative?  Long.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  negative?  Long.MIN_VALUE  :  Integer.MAX_VALUE;	  byte    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
472	[BUG]  [BUGGY]  final  long  val  =  value.length  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  value.length  -  1;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  value.length  -  1;	  final    long    val    =    Math.abs(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
473	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  negative);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  -  offset,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  -  offset,  negative);	  final    long    val    =    Math.abs(value    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
474	[BUG]  [BUGGY]  final  int  val  =  getValue(value);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue(value);	  final    int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
475	[BUG]  [BUGGY]  final  int  val  =  getValue()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  getValue()  *  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  getValue()  *  BYTE_MASK;	  final    int    val    =    getValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
476	[BUG]  [BUGGY]  final  int  val  =(int)Math.rint(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.rint(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.rint(buf,  offset,  length);	  final    int    val    =(int)Math.rint(value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
477	[BUG]  [BUGGY]  final  int  len  =  Math.min(bits.length,  max);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  Math.min(bits.length,  max);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  Math.min(bits.length,  max);	  final    int    len    =    Math.min(value.length,    max);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
478	[BUG]  [BUGGY]  final  int  val  =(int)Math.ceil(value);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(int)Math.ceil(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(int)Math.ceil(value);	  final    int    val    =(int)Math.floor(value);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
479	[BUG]  [BUGGY]  long  val  =  value  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value  *  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value  *  BYTE_MASK;	  long    val    =    value;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
480	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  offset  +  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  offset  +  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  offset  +  1);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
481	[BUG]  [BUGGY]  long  val  =  Math.min(value,  max,  offset);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.min(value,  max,  offset);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.min(value,  max,  offset);	  long    val    =    Math.min(value,    max,    negative);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
482	[BUG]  [BUGGY]  if(value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(value  <  =  max)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  bytes.   ");  }	  if(value    <    =    max)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
483	[BUG]  [BUGGY]  final  int  len  =  length.length();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  length.length();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  length.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
484	[BUG]  [BUGGY]  final  long  val  =  Math.abs(value  *  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.abs(value  *  1);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.abs(value  *  1);	  final    long    val    =    Math.abs(value    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
485	[BUG]  [BUGGY]  boolean  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  Math.sqrt(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  Math.sqrt(value);	  int    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
486	[BUG]  [BUGGY]  long  val  =  Math.sqrt(value,  negative);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.sqrt(value,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.sqrt(value,  negative);	  long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
487	[BUG]  [BUGGY]  final  long  val  =  Math.sqrt(value,  negative);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  long  val  =  Math.sqrt(value,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  long  val  =  Math.sqrt(value,  negative);	  final    long    val    =    Math.sqrt(value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
488	[BUG]  [BUGGY]  int  val  =  Math.min(max,  value.length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.min(max,  value.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.min(max,  value.length);	  int    val    =    Math.abs(max);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
489	[BUG]  [BUGGY]  long  val  =  Math.max(0,  value);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.max(0,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.max(0,  value);	  long    val    =    Math.min(bits,    max);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
490	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  *  BYTE_MASK;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
491	[BUG]  [BUGGY]  final  int  len  =  getLength()  >  max;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  len  =  getLength()  >  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  len  =  getLength()  >  max;	  final    int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
492	[BUG]  [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max:   "  +  max);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max:   "  +  max);  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(negative)  {  throw  new  IllegalArgumentException( "Value  is  too  large  for   "  +  value  + "  is  too  large  for   "  +  length  + "  max:   "  +  max);  }	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
493	[BUG]  [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	aughtException( "Value  is  too  large  for "  +  value  + "  is  too  large  for "  +  length  + "  byte  field.   ");	  if(negative)    {    throw    new    IllegalArgumentException(   "Value    is    too    large    for       "    +    value    +   "    is    too    large    for   "    +    length    +   "    byte    field.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
494	[BUG]  [BUGGY]  double  val  =  getValue(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  getValue(buf,  offset,  length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  getValue(buf,  offset,  length);	  int    val    =    getValue(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
495	[BUG]  [BUGGY]  short  val  =  max;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  short  val  =  max;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	short  val  =  max;	  long    val    =    max;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
496	[BUG]  [BUGGY]  int  val  =  value.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  value.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  value.length;	  int    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
497	[BUG]  [BUGGY]  int  val  =  Math.max(value,  buf.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  int  val  =  Math.max(value,  buf.length);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	int  val  =  Math.max(value,  buf.length);	  int    val    =    Math.abs(buf.length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
498	[BUG]  [BUGGY]  double  val  =  value.doubleValue();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  value.doubleValue();  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  value.doubleValue();	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
499	[BUG]  [BUGGY]  double  val  =  Math.abs(value)/  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  double  val  =  Math.abs(value)/  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	double  val  =  Math.abs(value)/  BYTE_MASK;	  double    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
500	[BUG]  [BUGGY]  long  val  =  Math.round(buf,  value);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  Math.round(buf,  value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  Math.round(buf,  value);	  long    val    =    Math.round(value,    max);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
501	[BUG]  [BUGGY]  byte  val  =  negative?  value  :  Math.abs(value);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  negative?  value  :  Math.abs(value);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  negative?  value  :  Math.abs(value);	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
502	[BUG]  [BUGGY]  byte  val  =  value.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  value.length;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  value.length;	  byte    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
503	[BUG]  [BUGGY]  if(buf!=  null  ||  max  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf!=  null  ||  max  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf!=  null  ||  max  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
504	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	if(buf!=  null)  {  throw  new  IllegalArgumentException( "Value   "  +  value  + "  is  too  large  for   "  +  length  + "  byte  field.   ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
505	[BUG]  [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  ||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	||(buf!=  null  &&  buf.length  >  0)||(buf.length  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(buf!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
506	[BUG]  [BUGGY]  boolean  val  =  negative  &&  value  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative  &&  value  <  =  BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative  &&  value  <  =  BYTE_MASK;	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
507	[BUG]  [BUGGY]  boolean  val  =  negative  &&  value  <  =  MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative  &&  value  <  =  MAX_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative  &&  value  <  =  MAX_VALUE;	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
508	[BUG]  [BUGGY]  boolean  val  =  negative  &&  value  <  =  MAX_BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  negative  &&  value  <  =  MAX_BYTE_MASK;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  negative  &&  value  <  =  MAX_BYTE_MASK;	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
509	[BUG]  [BUGGY]  boolean  val  =  value!=  null  &&  value.length  >  0;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  boolean  val  =  value!=  null  &&  value.length  >  0;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	boolean  val  =  value!=  null  &&  value.length  >  0;	  boolean    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
510	[BUG]  [BUGGY]  final  int  val  =  Integer.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =  Integer.MIN_VALUE;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =  Integer.MIN_VALUE;	  final    long    val    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
511	[BUG]  [BUGGY]  final  int  val  =(buf.length  >  0)?  buf.length  :  0;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  final  int  val  =(buf.length  >  0)?  buf.length  :  0;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	final  int  val  =(buf.length  >  0)?  buf.length  :  0;	  final    int    val    =    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
512	[BUG]  [BUGGY]  byte  val  =  getValue(buf,  offset,  length,  negative);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  byte  val  =  getValue(buf,  offset,  length,  negative);  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	byte  val  =  getValue(buf,  offset,  length,  negative);	  long    val    =    getValue(buf,    offset,    length,    negative);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
513	[BUG]  [BUGGY]  long  val  =  value  -  1L;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;      [BUGGY]  long  val  =  value  -  1L;  [BUGGY]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	499	500	1	replace	long  val  =  value  -  1L;	  long    val    =    Long.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
