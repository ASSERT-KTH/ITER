bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buf[offset]  =  (byte)(0x80?  1  :  0x80);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(0x80?  1  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(0x80?  1  :  0x80);	  buf[offset]    =    (byte)(length?    1    :    0x80);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
3	[BUG]  [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
4	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
5	[BUG]  [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
6	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
7	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
8	[BUG]  [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  limit;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  idx  =  limit;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  maxAsOctalChar)  {  for(int  idx  =  limit;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
9	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x800);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x800);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  1  :  0x800);	  buf[offset]    =    (byte)(length?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
10	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0x800  :  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  0x800  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0x800  :  0xff);	  buf[offset]    =    (byte)(length?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
12	[BUG]  [BUGGY]  Context.checkState(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
13	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
14	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
15	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
16	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
17	[BUG]  [BUGGY]  while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
18	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
19	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
20	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
21	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
22	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
23	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x20);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x20);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0xff  :  0x20);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
24	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x20);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x20);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0xff  :  0x20);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
25	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x8000);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x8000);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0xff  :  0x8000);	  buf[offset]    =    (byte)(negative?    0xff    :    0x8000);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x8000);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x8000);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0xff  :  0x8000);	  buf[offset]    =    (byte)(negative?    0xff    :    0x8000);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  1  :  0xff);	  buf[offset]    =    (byte)(length?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  buf[offset]  =  (byte)(0x80?  0xff  :  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(0x80?  0xff  :  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(0x80?  0xff  :  length);	  buf[offset]    =    (byte)(length?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0x90  :  0xff);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  0x90  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0x90  :  0xff);	  buf[offset]    =    (byte)(negative?    0x90    :    0xff);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
30	[BUG]  [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	lungul(long)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  while(idx  >  maxAsOctalChar)  {  int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  maxAsOctalChar)  {  int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  maxAsOctalChar)  {  int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  while(idx  <  limit  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
38	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
39	[BUG]  [BUGGY]  while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
40	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
41	[BUG]  [BUGGY]  while(idx  <  limit  &&  value.charAt(idx  -  1)!=  'n')  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value.charAt(idx  -  1)!=  'n')  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value.charAt(idx  -  1)!=  'n')  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
42	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
43	[BUG]  [BUGGY]  while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value.length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
44	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0x800  :  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  0x800  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0x800  :  0xff);	  buf[offset]    =    (byte)(value?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
45	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0xff);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  1  :  0xff);	  buf[offset]    =    (byte)(value?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  /  0x80);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  /  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  /  0x80);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
47	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  &  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  &  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  &  0xff);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
48	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  -  0x80);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  -  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  -  0x80);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
49	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  -  1);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  -  1);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
50	[BUG]  [BUGGY]  lungul(long)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  lungul(long)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	lungul(long)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  off;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  off;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  off;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.reportCodeChange();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
57	[BUG]  [BUGGY]  Context.codeBug();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.codeBug();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.codeBug();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
58	[BUG]  [BUGGY]  Context.checkState(length  >  0);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  0);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  0);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
59	[BUG]  [BUGGY]  Context.checkState(idx  ==  start  +  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(idx  ==  start  +  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(idx  ==  start  +  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
60	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(value));  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.equals(value));  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.equals(value));	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
61	[BUG]  [BUGGY]  Context.checkState(idx!=  start  +  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(idx!=  start  +  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(idx!=  start  +  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
62	[BUG]  [BUGGY]  Context.checkState(idx  >=  start  +  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(idx  >=  start  +  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(idx  >=  start  +  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
63	[BUG]  [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar);  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  Context.checkState(value!=  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(value!=  BYTE_MASK);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(value!=  BYTE_MASK);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
71	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x90);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x90);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  1  :  0x90);	  buf[offset]    =    (byte)(value?    0xff    :    0x90);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  while(idx  <  limit  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
76	[BUG]  [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
78	[BUG]  [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
80	[BUG]  [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
81	[BUG]  [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar,  value.length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar,  value.length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(maxAsOctalChar,  value.length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
82	[BUG]  [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
83	[BUG]  [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length  -  buffer.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length  -  buffer.length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	ContiguousByteBuffer  buffer  =  new  ContiguousByteBuffer(buf,  offset,  length  -  buffer.length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
84	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  1L  :  0x80);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  1L  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  1L  :  0x80);	  buf[offset]    =    (byte)(value?    1    :    0x80);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
85	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  2  :  0x80);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  2  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  2  :  0x80);	  buf[offset]    =    (byte)(value?    1    :    0x80);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
86	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x90);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x90);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  1  :  0x90);	  buf[offset]    =    (byte)(length?    0xff    :    0x90);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
87	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.parent)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent  ==  value.parent)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent  ==  value.parent)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
88	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
89	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
90	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
91	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
92	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
93	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.getType()  ==  Token.BYTE_MASK)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
94	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  1  :  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  1  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  1  :  0xff);	  buf[offset]    =    (byte)(negative?    0x800    :    0xff);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
95	[BUG]  [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
96	[BUG]  [BUGGY]  while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
98	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
99	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
100	[BUG]  [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
101	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
103	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
104	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
105	[BUG]  [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
106	[BUG]  [BUGGY]  while(idx  >=  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >=  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >=  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
107	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(value))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  parent!=  null  &&  parent.equals(value))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	parent!=  null  &&  parent.equals(value))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
108	[BUG]  [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
109	[BUG]  [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
110	[BUG]  [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
111	[BUG]  [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
112	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x7F);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x7F);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0xff  :  0x7F);	  buf[offset]    =    (byte)(negative?    0xff    :    0x7F);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
113	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x7F);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x7F);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0xff  :  0x7F);	  buf[offset]    =    (byte)(negative?    0xff    :    0x7F);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
114	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x7FF);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x7FF);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x7FF);	  buf[offset]    =    (byte)(negative?    0xff    :    0x7F);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
115	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
116	[BUG]  [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
117	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
118	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
119	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
120	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
121	[BUG]  [BUGGY]  For(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  For(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	For(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
122	[BUG]  [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
123	[BUG]  [BUGGY]  if(length  >  9)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  9)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  9)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
124	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  size;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  size;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  size;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
125	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
126	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
127	[BUG]  [BUGGY]  while(idx  >=  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >=  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >=  limit  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
128	[BUG]  [BUGGY]  while(idx  >=  limit)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >=  limit)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >=  limit)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
129	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
130	[BUG]  [BUGGY]  while(idx  >=  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >=  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >=  limit  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
131	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x800);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x800);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  1  :  0x800);	  buf[offset]    =    (byte)(value?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
132	[BUG]  [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	lungul(long)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
133	[BUG]  [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
134	[BUG]  [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
135	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
136	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
137	[BUG]  [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Context.checkState(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
138	[BUG]  [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(idx  <  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
139	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
140	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
141	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
142	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
143	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
144	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
145	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
146	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
147	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
148	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
149	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
150	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
151	[BUG]  [BUGGY]  Integer  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
152	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
153	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx  <  0;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx  <  0;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx  <  0;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
154	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
155	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
156	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
157	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x8000  :  0xff);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0x8000  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x8000  :  0xff);	  buf[offset]    =    (byte)(negative?    0x800    :    0xff);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
158	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
159	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
160	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
161	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
162	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negativ);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negativ);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negativ);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
163	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
164	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
165	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
166	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
167	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
168	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
169	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  limit;  idx  <  start;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  limit;  idx  <  start;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  limit;  idx  <  start;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
170	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
171	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
172	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
173	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
174	[BUG]  [BUGGY]  Integer  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  offset;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
175	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
176	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
177	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
178	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset  +  len;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset  +  len;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  offset  +  len;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
179	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
180	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  size);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
181	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
182	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
183	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
184	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  width);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  width);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  width);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
185	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
186	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
187	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
188	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  end;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  end;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  end;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
189	[BUG]  [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
190	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
191	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
192	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x10F);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x10F);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x10F);	  buf[offset]    =    (byte)(negative?    0xff    :    0x7F);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
193	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
195	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
196	[BUG]  [BUGGY]  Format.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Format.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Format.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
197	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  :  0x800);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  :  0x800);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  :  0x800);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
198	[BUG]  [BUGGY]  buf[offset]  =  (byte)(buf  &  0xff  :  0x80);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(buf  &  0xff  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(buf  &  0xff  :  0x80);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
199	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
200	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
201	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
202	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start  +  limit;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start  +  limit;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start  +  limit;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
203	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  Negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
204	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  neg);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  neg);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  neg);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
205	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
206	[BUG]  [BUGGY]  Integer  idx  =  start  +  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  start  +  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  start  +  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
207	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  1  :  0x80);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  1  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  1  :  0x80);	  buf[offset]    =    (byte)(value?    1    :    0x80);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
208	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
209	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
210	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
211	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  i  =  start;  i  <  start;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
212	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  start  +  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  start  +  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  start  +  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
213	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
214	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
215	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
216	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
217	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
218	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x20  +  1);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x20  +  1);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x20  +  1);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
219	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x17);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x17);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x17);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
220	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
221	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
222	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
223	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
224	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
225	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
226	[BUG]  [BUGGY]  Integer  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Integer  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Integer  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
227	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
228	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x100  :  0xff);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0x100  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x100  :  0xff);	  buf[offset]    =    (byte)(negative?    0x90    :    0xff);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
229	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x10  :  0xff);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0x10  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x10  :  0xff);	  buf[offset]    =    (byte)(negative?    0x90    :    0xff);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
230	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
231	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
232	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
233	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
234	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
235	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
236	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
237	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  offset  +  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
238	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
239	[BUG]  [BUGGY]  if(len  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(len  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(len  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
240	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
241	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    len;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
242	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff?  0x80  :  0xff);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(value  &  0xff?  0x80  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff?  0x80  :  0xff);	  buf[offset]    =    (byte)(value    &    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
243	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  BYTE_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  BYTE_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  BYTE_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
244	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
245	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
246	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  chars))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  chars))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  chars))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
247	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_MASK))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
248	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAX_BACK_ENCODING))  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative	  if(length    >    0)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
249	[BUG]  [BUGGY]  if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
250	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  2  :  0x80);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(length?  2  :  0x80);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  2  :  0x80);	  buf[offset]    =    (byte)(length?    1    :    0x80);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
251	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
252	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
253	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
254	[BUG]  [BUGGY]  cearcăToFrontBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  cearcăToFrontBytes(value,  buf,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	cearcăToFrontBytes(value,  buf,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
255	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  value.bytes().iterator();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  Object>  it  =  value.bytes().iterator();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  Object>  it  =  value.bytes().iterator();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
256	[BUG]  [BUGGY]  Iterator  <  Object>  remaining  =  value.bytes().iterator();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  Object>  remaining  =  value.bytes().iterator();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  Object>  remaining  =  value.bytes().iterator();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
257	[BUG]  [BUGGY]  Iterator  <  Object>  remaining  =  value.bytes().iterator().next();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  Object>  remaining  =  value.bytes().iterator().next();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  Object>  remaining  =  value.bytes().iterator().next();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
258	[BUG]  [BUGGY]  cearcăToFrontBytes(negative,  value,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  cearcăToFrontBytes(negative,  value,  buffer,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	cearcăToFrontBytes(negative,  value,  buffer,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
259	[BUG]  [BUGGY]  cearcăToFrontBytes(value,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  cearcăToFrontBytes(value,  offset,  length);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	cearcăToFrontBytes(value,  offset,  length);	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
260	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
261	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
262	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
263	[BUG]  [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
264	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
265	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
266	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
267	[BUG]  [BUGGY]  if(negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
268	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
269	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
270	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
271	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
272	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
273	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
274	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
275	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
276	[BUG]  [BUGGY]  while(negative  &&  length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(negative  &&  length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(negative  &&  length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
277	[BUG]  [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
278	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
279	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  =  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  =  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  =  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
280	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  10;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  10;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  10;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    i    =    start;    i    <    limit;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
281	[BUG]  [BUGGY]  Iterator  <  String>  idx  =  value.bytes().iterator().next();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  String>  idx  =  value.bytes().iterator().next();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  String>  idx  =  value.bytes().iterator().next();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
282	[BUG]  [BUGGY]  Iterator  <  String>  idx  =  values.iterator().next();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  String>  idx  =  values.iterator().next();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  String>  idx  =  values.iterator().next();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
283	[BUG]  [BUGGY]  Iterator  <  String>  idx  =  value.bytes().iterator();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  Iterator  <  String>  idx  =  value.bytes().iterator();  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	Iterator  <  String>  idx  =  value.bytes().iterator();	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
284	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
285	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
286	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
287	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
288	[BUG]  [BUGGY]  while(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    length;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
289	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
290	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
291	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
292	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    offset;    i    <    length;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
293	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
294	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
295	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
296	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
297	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
298	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  9;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
299	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  2;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
300	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  4;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    0)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
301	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x10FF);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x10FF);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x10FF);	  buf[offset]    =    (byte)(negative?    0xff    :    0x7F);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
302	[BUG]  [BUGGY]  if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
303	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  10;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(length    >    limit)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
304	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x20  :  0xff);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(negative?  0x20  :  0xff);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x20  :  0xff);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
305	[BUG]  [BUGGY]  buf[offset]  =  (byte)(positive?  0xff  :  0x20);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  buf[offset]  =  (byte)(positive?  0xff  :  0x20);  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(positive?  0xff  :  0x20);	  buf[offset]    =    (byte)(negative?    0xff    :    0x20);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
306	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
307	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
308	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
309	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
310	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
311	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar  ||  negative)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
312	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  end;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
313	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  offset;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
314	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    i    =    start;    i    <    limit;    i++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
315	[BUG]  [BUGGY]  int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
316	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(negative)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    >=    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
