bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  length;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  i  =  start;  i  <  limit;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x800);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x800);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0xff  :  0x800);	  buf[offset]    =    (byte)(negative?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x8000);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x8000);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x8000);	  buf[offset]    =    (byte)(negative?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x90);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(value?  0xff  :  0x90);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0xff  :  0x90);	  buf[offset]    =    (byte)(negative?    0xff    :    0x90);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x90);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x90);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0xff  :  0x90);	  buf[offset]    =    (byte)(negative?    0xff    :    0x90);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x80);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(length?  1  :  0x80);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  1  :  0x80);	  buf[offset]    =    (byte)(length?    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0x80  :  0xff);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(length?  0x80  :  0xff);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0x80  :  0xff);	  buf[offset]    =    (byte)(length?    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  0x80  :  0xff);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(value?  0x80  :  0xff);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  0x80  :  0xff);	  buf[offset]    =    (byte)(negative?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x80);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(value?  1  :  0x80);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value?  1  :  0x80);	  buf[offset]    =    (byte)(value?    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  :  0x80);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(value  &  0xff  :  0x80);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(value  &  0xff  :  0x80);	  buf[offset]    =    (byte)(value?    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  >=  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x20);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x20);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x20);	  buf[offset]    =    (byte)(negative?    0xff    :    0x90);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x800  :  0xff);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(negative?  0x800  :  0xff);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x800  :  0xff);	  buf[offset]    =    (byte)(negative?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0x90  :  0xff);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(negative?  0x90  :  0xff);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0x90  :  0xff);	  buf[offset]    =    (byte)(negative?    0x80    :    0xff);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x7F);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(negative?  0xff  :  0x7F);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(negative?  0xff  :  0x7F);	  buf[offset]    =    (byte)(negative?    0xff    :    0x800);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x800);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  buf[offset]  =  (byte)(length?  0xff  :  0x800);  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	buf[offset]  =  (byte)(length?  0xff  :  0x800);	  buf[offset]    =    (byte)(length?    0xff    :    0x80);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  0)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);    [BUGGY]  if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	490	490	1	replace	if(length  >  limit)  {  for(int  idx  =  start;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
