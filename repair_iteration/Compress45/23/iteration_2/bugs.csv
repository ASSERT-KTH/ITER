bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);	  final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(negative);	  final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  val  =  BigInteger.valueOf(negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(negative);	  final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(0);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  negative);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value).toByteArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value).toByteArray();  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value).toByteArray();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  final  byte[]  val  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  byte[]  val  =  val.toByteArray();  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  val.toByteArray();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)value.clone();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =(BigInteger)value.clone();  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)value.clone();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE;  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE;	  final    BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.ZERO;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.ZERO;  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.ZERO;	  final    BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE;  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MIN_VALUE;	  final    BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf);	  final    BigInteger    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  int  val  =  BigInteger.valueOf(buf);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(buf);	  final    BigInteger    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(negative);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
37	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(1);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(1);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(1);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(full);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(full);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(full);	  BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(full);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(full);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(full);	  final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  value);	  final    BigInteger    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(2);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(2);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(2);	  final    BigInteger    val    =    BigInteger.valueOf(1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  positive);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  positive);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  positive);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(b,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  value);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  value);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(positive,  value);	  final    BigInteger    val    =    BigInteger.valueOf(positive);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(negative);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(negative);	  final    BigInteger    val    =    BigInteger.valueOf(positive);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {    [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);  [BUGGY]    final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
