bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
2	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  off,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  off,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
3	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
4	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
5	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
6	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
7	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
8	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
9	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
10	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
11	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
12	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
13	[BUG]  [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
14	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
15	[BUG]  [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
16	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
17	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value,  negative);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value,  buf,  negative);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  offset);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
20	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  value);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  value);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
21	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(buf,  negative);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  offset,  negative);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
24	[BUG]  [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length);  }	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
25	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length  +  1);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
26	[BUG]  [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
27	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.MAX_VALUE;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.MAX_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.MAX_VALUE;	  BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.MIN_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.MIN_VALUE;	  BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.ZERO;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.ZERO;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.ZERO;	  BigInteger    val    =    BigInteger.valueOf(0);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  len);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  len);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
31	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  offset);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  offset);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
32	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length  +  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length  +  1);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
33	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
34	[BUG]  [BUGGY]  final  byte[]  val  =  buf.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  buf.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  buf.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  final  byte[]  val  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  value.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  value.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  final  byte[]  val  =  new  BigInteger(value,  buf.toByteArray());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  new  BigInteger(value,  buf.toByteArray());  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  new  BigInteger(value,  buf.toByteArray());	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  final  byte[]  val  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  buffer.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  buffer.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
38	[BUG]  [BUGGY]  final  byte[]  val  =  key.toByteArray();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  key.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  key.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
39	[BUG]  [BUGGY]  final  byte[]  val  =  Buf.toByteArray();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  Buf.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  Buf.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)value.intValue();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)value.intValue();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)value.intValue();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
41	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)value.getValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)value.getValue();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)value.getValue();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)value.toByteArray();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)value.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)value.toByteArray();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)this.value.clone();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)this.value.clone();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)this.value.clone();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)value.byteValue();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)value.byteValue();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)value.byteValue();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(value);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
46	[BUG]  [BUGGY]  final  long  val  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  val  =  BigInteger.valueOf(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  long  val  =  BigInteger.valueOf(buf);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
47	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseInt(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseInt(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseInt(value);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
48	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(0);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(0);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
49	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseInt(buf);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseInt(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseInt(buf);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
50	[BUG]  [BUGGY]  final  int  val  =  Integer.parseInt(value);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  Integer.parseInt(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  Integer.parseInt(value);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
51	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
52	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
53	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  value);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
54	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
55	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
56	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
57	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
58	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
59	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  positive);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  positive);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
60	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(value,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
61	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(value);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
62	[BUG]  [BUGGY]  final  static  BigInteger  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  static  BigInteger  val  =  BigInteger.valueOf(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  static  BigInteger  val  =  BigInteger.valueOf(negative);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
63	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(0);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(0);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
64	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.parseBigInteger(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.parseBigInteger(value);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
65	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(buf,  negative);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
66	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  buf,  negative);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  offset,  negative);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  value);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  offset);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
70	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  buf);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
71	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(value);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
72	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(buf);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigDecimal(buf);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
73	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  value);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf,  value);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
74	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf,  offset);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
75	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf,  negative);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
76	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(buf);	  final    byte    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
77	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigDecimal(buf);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigDecimal(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigDecimal(buf);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
78	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  off,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
79	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  len);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  len);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  len);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
80	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
81	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(buf,  offset);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
82	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  off);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  off);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  off);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
83	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value);	  final    byte    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
84	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(0);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(0);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(0);	  final    byte    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  byte  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  byte  val  =  BigInteger.valueOf(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	byte  val  =  BigInteger.valueOf(value);	  final    byte    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  final  long  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  val  =  BigInteger.valueOf(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  long  val  =  BigInteger.valueOf(negative);	  final    byte    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
88	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf);	  final    BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
89	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
90	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  offset);	  final    BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
91	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  negative);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(value);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  offset);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
94	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  length);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
95	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf;	  final    BigInteger    val    =    BigInteger.ZERO;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
96	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  +  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  +  1;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE  +  1;	  final    BigInteger    val    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
97	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  -  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  -  1;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE  -  1;	  final    BigInteger    val    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
98	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MAX_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MAX_VALUE;	  final    BigInteger    val    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
99	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  /  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  /  BYTE_MASK;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE  /  BYTE_MASK;	  final    BigInteger    val    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
100	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MIN_VALUE;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MIN_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MAX_VALUE  |  BigInteger.MIN_VALUE;	  final    BigInteger    val    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
101	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
102	[BUG]  [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
103	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
104	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
105	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset,  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
106	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
107	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
108	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(b);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(b);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(b);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
109	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseByte(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseByte(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseByte(value);	  final    byte    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
110	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
111	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  value);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
112	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE;	  final    BigInteger    val    =    BigInteger.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
113	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  -  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  -  1;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MIN_VALUE  -  1;	  final    BigInteger    val    =    BigInteger.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
114	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.MIN_VALUE  +  1;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.MIN_VALUE  +  1;	  final    BigInteger    val    =    BigInteger.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
115	[BUG]  [BUGGY]  final  double  val  =  BigInteger.valueOf(negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  double  val  =  BigInteger.valueOf(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  double  val  =  BigInteger.valueOf(negative);	  final    int    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
116	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(buf);	  BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
117	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  value);	  BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf);	  BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
119	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  length);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset,  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
121	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  0,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  0,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  0,  length);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
122	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  +  1);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
123	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
124	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    offset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
125	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    offset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
126	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(value,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    offset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
127	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    offset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
128	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset  +  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    offset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
129	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  offset,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    negative);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
130	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
131	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  +  1);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
132	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset,  length  -  1);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
133	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  value);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(negative,  value);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
134	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  value);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  value);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
135	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  positive);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  positive);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
136	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(positive,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
137	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
138	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
139	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
140	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(value,  buf,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
141	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
142	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
143	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  -  1);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
144	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(buf,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
145	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  value.length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  value.length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length,  value.length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
146	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  2);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  2);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  2);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
147	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
148	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
149	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  value,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
150	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
151	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(value,  buf,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
152	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
153	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
154	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(value,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
155	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf.length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf.length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf.length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
156	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
157	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
158	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
159	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
160	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigInteger(buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigInteger(buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
161	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf).toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf).toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf).toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
162	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative).toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative).toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative).toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
163	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative).toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  negative).toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  negative).toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
164	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value)+  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value)+  1;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value)+  1;	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
165	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value)/  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value)/  BYTE_MASK;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value)/  BYTE_MASK;	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
166	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset,  negative);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
167	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf,  negative);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
168	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
169	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  value);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  value);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
170	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
171	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(buf,  negative);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigDecimal(buf,  negative);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
172	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(b,  value);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
173	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(b,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(b,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(b,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
174	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(b,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(b,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(b,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
175	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(BYTE_MASK,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(BYTE_MASK,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(BYTE_MASK,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
176	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
177	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  buf,  offset);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
178	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(buf,  offset);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
179	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  size);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  size);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  size);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
180	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(buf,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(buf,  offset);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
181	[BUG]  [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
182	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(value,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  System.arraycopy(value,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	System.arraycopy(value,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
184	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
185	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
186	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(value,  buf);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    value);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
187	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  length);	  BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
188	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset,  negative);	  BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
189	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset);	  BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
190	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  1);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
191	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  -  1);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
192	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(2);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(2);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(2);	  BigInteger    val    =    BigInteger.valueOf(1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
193	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buffer);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    value);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
194	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
195	[BUG]  [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
196	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(3);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(3);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(3);	  final    BigInteger    val    =    BigInteger.valueOf(2);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
197	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  off,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
198	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length  -  1);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
199	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative,  value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative,  value);	  BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
200	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  0,  negative);	  BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
201	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  buf);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(positive,  buf);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
202	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  value  +  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  value  +  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(positive,  value  +  1);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
203	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  positive);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(positive,  positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(positive,  positive);	  final    BigInteger    val    =    BigInteger.valueOf(positive,    value);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
204	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
205	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  offset,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
206	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
207	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  0,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  0,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buf,  0,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
208	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
209	[BUG]  [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(buf,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
210	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
211	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(0);  System.arraycopy(val,  0,  buf,  offset,  length);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
212	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(negative,  value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(negative,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(negative,  value);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    negative);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
213	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative,  value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative,  value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(negative,  value);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
214	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative,  buf);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(negative,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(negative,  buf);	  final    BigInteger    val    =    BigInteger.valueOf(b,    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
215	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(1);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
216	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(positive);	  BigInteger    val    =    BigInteger.valueOf(value);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
217	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  2);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  2);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
218	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
219	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(negative);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
220	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  negative);	  BigInteger    val    =    BigInteger.parseBigInteger(value);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
221	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  off);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  off);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  off);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
222	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  -  1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  offset,  length  -  1);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
223	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative,  offset,  length);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
224	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)negative.clone();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)negative.clone();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)negative.clone();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
225	[BUG]  [BUGGY]  BigInteger  val  =(BigInteger)buf.clone();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =(BigInteger)buf.clone();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =(BigInteger)buf.clone();	  BigInteger    val    =(BigInteger)value.clone();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
226	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseBigDecimal(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseBigDecimal(value);	  final    byte    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
227	[BUG]  [BUGGY]  final  byte[]  val  =  BufferUtils.toByteArray(value);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  BufferUtils.toByteArray(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  BufferUtils.toByteArray(value);	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
228	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
229	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0).toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(0).toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(0).toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
230	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive).toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(positive).toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(positive).toByteArray();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
231	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(1);	  final    byte    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
232	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(buf,  negative);	  BigInteger    val    =    BigInteger.parseBigInteger(buf);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
233	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  negative);	  BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
234	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
235	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(booleanValue);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(booleanValue);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(booleanValue);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
236	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(full);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(full);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(full);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
237	[BUG]  [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.parseBigInteger(value);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.parseBigInteger(value);	  final    int    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
238	[BUG]  [BUGGY]  final  int  val  =  BigInteger.valueOf(1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  int  val  =  BigInteger.valueOf(1);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  int  val  =  BigInteger.valueOf(1);	  final    int    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
239	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.ZERO  |  BigInteger.MAX_VALUE;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.ZERO  |  BigInteger.MAX_VALUE;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.ZERO  |  BigInteger.MAX_VALUE;	  final    BigInteger    val    =    BigInteger.ZERO;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
240	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  positive);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(negative,  positive);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
241	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(negative,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(negative,  negative);	  final    BigInteger    val    =    BigInteger.valueOf(value,    positive);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
242	[BUG]  [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  static  final  BigInteger  val  =  BigInteger.valueOf(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	static  final  BigInteger  val  =  BigInteger.valueOf(value,  negative);	  static    final    BigInteger    val    =    BigInteger.valueOf(negative);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
243	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
244	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(length);	  final    BigInteger    val    =    BigInteger.parseBigInteger(negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
245	[BUG]  [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  off,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
246	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  size);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  size);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  size);	  final    BigInteger    val    =    BigInteger.valueOf(value,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
247	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset,  length  +  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset,    negative);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
248	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigDecimal(value,  negative);	  final    BigInteger    val    =    BigInteger.parseBigDecimal(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
249	[BUG]  [BUGGY]  final  BigInteger  val  =  negative?  BigInteger.ZERO  :  BigInteger.ZERO;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  negative?  BigInteger.ZERO  :  BigInteger.ZERO;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  negative?  BigInteger.ZERO  :  BigInteger.ZERO;	  final    BigInteger    val    =    BigInteger.ZERO;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
250	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(value,  buf);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
251	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigDecimal(value,  buf);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    value);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
252	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value).doubleValue();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value).doubleValue();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value).doubleValue();	  BigInteger    val    =    BigInteger.valueOf(value).toByteArray();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
253	[BUG]  [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  offset,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
254	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.parseBigInteger(buf,  offset  +  length,  negative);	  final    BigInteger    val    =    BigInteger.parseBigInteger(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
255	[BUG]  [BUGGY]  final  byte[]  val  =  this.val.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte[]  val  =  this.val.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte[]  val  =  this.val.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
256	[BUG]  [BUGGY]  byte[]  val  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  byte[]  val  =  value.toByteArray();  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	byte[]  val  =  value.toByteArray();	  final    byte[]    val    =    val.toByteArray();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
257	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(b,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(b,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(b,  negative);	  BigInteger    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
258	[BUG]  [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    off,    length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
259	[BUG]  [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	if(negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
260	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.POSITIVE_INFINITY;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.POSITIVE_INFINITY;  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.POSITIVE_INFINITY;	  final    BigInteger    val    =    BigInteger.MIN_VALUE;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
261	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.parseByteArray(buf);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.parseByteArray(buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.parseByteArray(buf);	  final    byte    val    =    BigInteger.valueOf(buf);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
262	[BUG]  [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	boolean  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
263	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off  +  length,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(negative);  System.arraycopy(val,  0,  buf,  off  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
264	[BUG]  [BUGGY]  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	byte  val  =  BigInteger.valueOf(value);  System.arraycopy(val,  0,  buf,  offset  +  length,  negative);	  BigInteger    val    =    BigInteger.valueOf(value);    System.arraycopy(val,    0,    buf,    offset    +    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
265	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(value,  buffer,  length);	  final    BigInteger    val    =    BigInteger.valueOf(value,    buf,    negative);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
266	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buffer);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buffer);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.parseBigInteger(value,  buffer);	  final    BigInteger    val    =    BigInteger.parseBigInteger(value,    negative);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
267	[BUG]  [BUGGY]  final  long  val  =  BigInteger.valueOf(buf,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  long  val  =  BigInteger.valueOf(buf,  negative);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  long  val  =  BigInteger.valueOf(buf,  negative);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
268	[BUG]  [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  positive);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  byte  val  =  BigInteger.valueOf(value,  positive);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  byte  val  =  BigInteger.valueOf(value,  positive);	  final    byte    val    =    BigInteger.valueOf(buf,    negative);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
269	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  length,  buf);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value,  length,  buf);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	BigInteger  val  =  BigInteger.valueOf(value,  length,  buf);	  BigInteger    val    =    BigInteger.valueOf(value,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
270	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  BYTE_MASK);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(buf,  offset  +  length  *  BYTE_MASK);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
271	[BUG]  [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  offset  +  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {      [BUGGY]  final  BigInteger  val  =  BigInteger.valueOf(b,  offset  +  length);  [BUGGY]      final  byte[]  b  =  val.toByteArray();  final  int  len  =  b.length;  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	519	519	1	replace	final  BigInteger  val  =  BigInteger.valueOf(b,  offset  +  length);	  final    BigInteger    val    =    BigInteger.valueOf(buf,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
