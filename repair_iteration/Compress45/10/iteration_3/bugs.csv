bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
2	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
3	[BUG]  [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
4	[BUG]  [BUGGY]  if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
5	[BUG]  [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
6	[BUG]  [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
7	[BUG]  [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
8	[BUG]  [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
9	[BUG]  [BUGGY]  ||  buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  ||  buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	||  buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
10	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  <  length;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  val;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  val;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  val;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  this.length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  this.length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  this.length;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val.length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val.length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  val.length;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
15	[BUG]  [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
16	[BUG]  [BUGGY]  if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
17	[BUG]  [BUGGY]  if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  >  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
18	[BUG]  [BUGGY]  if(val  <  =  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
19	[BUG]  [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
20	[BUG]  [BUGGY]  if(val  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
21	[BUG]  [BUGGY]  int  len  =  length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length()  -  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length()  -  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
22	[BUG]  [BUGGY]  int  len  =  length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length()  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length()  +  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
23	[BUG]  [BUGGY]  int  len  =  val.length();  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  val.length();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  val.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
24	[BUG]  [BUGGY]  long  len  =  length();  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  len  =  length();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  len  =  length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  int  len  =  offset();  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  offset();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  offset();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
26	[BUG]  [BUGGY]  int  len  =  this.length();  [CE]  illegal  start  of  expression  [FE]                                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  this.length();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  this.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i!=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i!=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i!=  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i!=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i!=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i!=  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  >>  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  >>  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  >>  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  start  +  len  /  1;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  /  1;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  /  1;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  offset  +  width  /  1;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  width  /  1;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  width  /  1;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >>  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >>  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  >>  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  8;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  8;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
40	[BUG]  [BUGGY]  byte[]  buf  =(byte[])val;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])val;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])val;	  byte[]    buf    =(byte[])value;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
41	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value  +  1;	  byte[]    buf    =(byte[])value;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
42	[BUG]  [BUGGY]  byte[]  buf  =(byte[])buf;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])buf;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])buf;	  byte[]    buf    =(byte[])value;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
43	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Value;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Value;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Value;	  byte[]    buf    =(byte[])value;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  8;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  8;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  8;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  =  offset;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  =  len;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i!=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i!=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i!=  len;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
50	[BUG]  [BUGGY]  int  len  =  getLength()  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  getLength()  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  getLength()  +  1;	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  long  len  =  getLength();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  len  =  getLength();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  len  =  getLength();	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  int  len  =  getLength()  -  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  getLength()  -  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  getLength()  -  1;	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  byte  len  =  getLength();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte  len  =  getLength();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte  len  =  getLength();	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  int  len  =  getLength()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  getLength()  *  BYTE_MASK;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  getLength()  *  BYTE_MASK;	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  int  len  =  getLength()  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  getLength()  /  BYTE_MASK;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  getLength()  /  BYTE_MASK;	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  limit;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  limit;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  this.buf.length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  this.buf.length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  this.buf.length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i!=  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i!=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2  +  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  =  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
63	[BUG]  [BUGGY]  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(value  -  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(value  -  1);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(value  +  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(value  +  1);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  val  =  Math.abs(val);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(val);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(val);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
66	[BUG]  [BUGGY]  val  =  Math.max(val,  max);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.max(val,  max);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.max(val,  max);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
67	[BUG]  [BUGGY]  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.sqrt(value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.sqrt(value);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  8;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  8;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  8;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  =  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  =  off;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  >=  off;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  offset  +  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  val  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  1;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  max  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  offset  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  offset  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  offset  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  buffer.length  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  buffer.length  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  buffer.length  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  1;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
84	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  1);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
85	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(val,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(val,  offset,  length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(val,  offset,  length);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
86	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value.encode(buf,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value.encode(buf,  offset,  length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value.encode(buf,  offset,  length);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
87	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  -  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  -  1);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
88	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length,  value);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length,  value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length,  value);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
89	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  0,  length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  0,  length);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
90	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  len);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  len);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  len);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
91	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
92	[BUG]  [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
93	[BUG]  [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
94	[BUG]  [BUGGY]  if(val  <  =  0  ||  value  >  max)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0  ||  value  >  max)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0  ||  value  >  max)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  =  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  =  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  =  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  max  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  max  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  =  max  -  1;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  ==  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  ==  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  ==  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  =  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  <  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  =  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  =  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  =  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  offset  +  width  -  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  width  -  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  width  -  1;  i  <  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  8;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  8;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  8;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  8;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  3;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  8;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  8;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  8;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
110	[BUG]  [BUGGY]  if(value[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
111	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  =  len;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  end;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
114	[BUG]  [BUGGY]  long  idx  =  value.longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  value.longValue()  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  value.longValue()  +  1;	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
115	[BUG]  [BUGGY]  int  idx  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  idx  =  value.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  idx  =  value.longValue();	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
116	[BUG]  [BUGGY]  long  idx  =  value.longValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  value.longValue()  +  2;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  value.longValue()  +  2;	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
117	[BUG]  [BUGGY]  long  idx  =  buf.longValue();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  buf.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  buf.longValue();	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
118	[BUG]  [BUGGY]  long  idx  =  value.longValue()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  value.longValue()  *  2;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  value.longValue()  *  2;	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  this.offset  +  length  -  1;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  this.offset  +  length  -  1;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  this.offset  +  length  -  1;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  1;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  =  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  <  =  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  <  =  len;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i!=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i!=  len;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  <  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  <  limit;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    length    -    4;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    length    -    4;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  <  =  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  <  =  0;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val.length  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val.length  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  val.length  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  length  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  length  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  <  length  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  end  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  end  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  end  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  length  -  2;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  length  -  2;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  length  -  2;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  -  2;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  len  -  2;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  len  -  2;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  max  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  max  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
140	[BUG]  [BUGGY]  int  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  val  =  Math.abs(value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  val  =  Math.abs(value);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
141	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.abs(value  -  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.abs(value  -  1);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
142	[BUG]  [BUGGY]  long  val  =  Math.abs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.abs(value  +  1);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.abs(value  +  1);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
143	[BUG]  [BUGGY]  byte  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte  val  =  Math.abs(value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte  val  =  Math.abs(value);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
144	[BUG]  [BUGGY]  long  val  =  Math.max(0,  value);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.max(0,  value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.max(0,  value);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
145	[BUG]  [BUGGY]  long  val  =  Math.min(value,  value.length);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.min(value,  value.length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.min(value,  value.length);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
146	[BUG]  [BUGGY]  short  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  short  val  =  Math.abs(value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	short  val  =  Math.abs(value);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  =  end;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  end;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  2;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  2;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  2;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  end;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >>  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >>  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >>  len;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  len;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >>  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >>  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  >>  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  1;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  =  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
160	[BUG]  [BUGGY]  int  len  =  offset  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  offset  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  offset  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
161	[BUG]  [BUGGY]  int  len  =  value  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  value  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  value  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
162	[BUG]  [BUGGY]  int  len  =  val  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  val  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  val  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
163	[BUG]  [BUGGY]  int  len  =  length  -  buf.length  -  1;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length  -  buf.length  -  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length  -  buf.length  -  1;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
164	[BUG]  [BUGGY]  long  len  =  length  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  len  =  length  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  len  =  length  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
165	[BUG]  [BUGGY]  int  len  =  value.length  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  value.length  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  value.length  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
166	[BUG]  [BUGGY]  int  len  =  length  -  buf.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length  -  buf.length  -  offset;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length  -  buf.length  -  offset;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  =  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  =  off;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i!=  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  start;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  start;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  start;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  >=  offset;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i!=  start;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i!=  start;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i!=  start;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >>  start;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >>  start;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  >>  start;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i!=  offset;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  start  +  offset  -  1;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  offset  -  1;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  offset  -  1;  i  >=  len;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  <  offset;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
178	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  value.longValue()  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  value.longValue()  +  1;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
179	[BUG]  [BUGGY]  long  val  =  buf.longValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  buf.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  buf.longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
180	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  value.longValue()  +  2;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  value.longValue()  +  2;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
181	[BUG]  [BUGGY]  int  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  val  =  value.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  val  =  value.longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
182	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  2;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  value.longValue()  *  2;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  value.longValue()  *  2;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
183	[BUG]  [BUGGY]  long  val  =  value.longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  value.longValue()  -  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  value.longValue()  -  1;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  val;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  val;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  val;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    >=    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  start  +  len  -  1;  i  >=  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  len  -  1;  i  >=  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  len  -  1;  i  >=  length;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    >=    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
186	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Byte_SIZE.clone();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Byte_SIZE.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Byte_SIZE.clone();	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
187	[BUG]  [BUGGY]  byte[]  buf  =(byte[])ByTE_MASK.clone();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])ByTE_MASK.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])ByTE_MASK.clone();	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
188	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Byte_ENCODING.clone();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Byte_ENCODING.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Byte_ENCODING.clone();	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
189	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Byte_MILLIS.clone();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Byte_MILLIS.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Byte_MILLIS.clone();	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  8;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  8;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
193	[BUG]  [BUGGY]  byte[]  buf  =(byte[])val.clone();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])val.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])val.clone();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
194	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value.toByteArray();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value.toByteArray();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value.toByteArray();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
195	[BUG]  [BUGGY]  byte[]  buf  =(byte[])this.value.clone();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])this.value.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])this.value.clone();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
196	[BUG]  [BUGGY]  byte[]  buf  =(byte[])buf.clone();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])buf.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])buf.clone();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
197	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Value.clone();  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Value.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Value.clone();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  start  +  length  /  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  /  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  /  1;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  1;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  1;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  >=  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i!=  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  ==  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  2;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  2;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  2;  i  <  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >>  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >>  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  >>  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  buf.length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  buf.length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  buf.length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    val;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  val;  i--)  {  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  <  val;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  <  val;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    val;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
209	[BUG]  [BUGGY]  int  len  =  length  -  buf.length  +  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length  -  buf.length  +  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length  -  buf.length  +  1;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
210	[BUG]  [BUGGY]  int  len  =  buf.length  -  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  buf.length  -  length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  buf.length  -  length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
211	[BUG]  [BUGGY]  int  len  =  width  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  width  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  width  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
213	[BUG]  [BUGGY]  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
214	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
215	[BUG]  [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
216	[BUG]  [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2  +  1;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  2;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  2;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  2;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  ==  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  ==  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  ==  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    ==    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  ==  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  2;  i  ==  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  2;  i  ==  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    ==    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2  +  1;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  2;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  offset  +  width  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  width  -  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  width  -  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    width    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
225	[BUG]  [BUGGY]  long  idx  =  value.longValue()  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  value.longValue()  +  length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  value.longValue()  +  length;	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
226	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(value,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(value,  offset,  length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(value,  offset,  length);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
227	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  2);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  2);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset,  length  +  2);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  8;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  8;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  8;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  [Delete]  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  [Delete]  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  [Delete]  0;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  =  0;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  >=  off;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  end;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  3;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  3;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
236	[BUG]  [BUGGY]  val  =  Math.abs(value  -  offset);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(value  -  offset);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(value  -  offset);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
237	[BUG]  [BUGGY]  val  =  Math.abs(value  /  2);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(value  /  2);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(value  /  2);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
238	[BUG]  [BUGGY]  val  =  Math.min(value,  max);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.min(value,  max);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.min(value,  max);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  3;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  3;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  8;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  8;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  8;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i!=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i!=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i!=  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i!=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  2;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
244	[BUG]  [BUGGY]  long  val  =  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.sqrt(value);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.sqrt(value);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
245	[BUG]  [BUGGY]  long  val  =  Math.abs(value  -  offset);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.abs(value  -  offset);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.abs(value  -  offset);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
246	[BUG]  [BUGGY]  int  len  =  getLength()  +  2;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  getLength()  +  2;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  getLength()  +  2;	  int    len    =    getLength();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
247	[BUG]  [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(value);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
248	[BUG]  [BUGGY]  if(value  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value  <  =  0L)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i!=  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i!=  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  ==  this.offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  ==  this.offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  ==  this.offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    this.offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  *  2;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  *  2;  i  >=  offset;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
253	[BUG]  [BUGGY]  if(buf[i]  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
254	[BUG]  [BUGGY]  if(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
255	[BUG]  [BUGGY]  if(value  <  =  0  ||  buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(value  <  =  0  ||  buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(value  <  =  0  ||  buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  4;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  4;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  4;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  ==  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  ==  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  ==  len;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  3;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  3;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  3;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  3;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  limit;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  limit;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2  +  1;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2  +  1;  i  >=  off;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  off  +  length  /  2;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  off  +  length  /  2;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  off  +  length  /  2;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  >=  off;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  off  +  length  -  1;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  off  +  length  -  1;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  off  +  length  -  1;  i  <  0;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  offset  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  offset  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  offset  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  2;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  2;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  offset  +  length  -  2;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
268	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Byte_BYTE_MASK.clone();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Byte_BYTE_MASK.clone();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Byte_BYTE_MASK.clone();	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
269	[BUG]  [BUGGY]  byte[]  buf  =(byte[])Byte_ENCODING.encode(val);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])Byte_ENCODING.encode(val);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])Byte_ENCODING.encode(val);	  byte[]    buf    =(byte[])Byte_MASK.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
270	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  value.longValue()  +  length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  value.longValue()  +  length;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
271	[BUG]  [BUGGY]  byte  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte  val  =  value.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte  val  =  value.longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  val;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  val;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  val;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    val;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  4;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  4;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
276	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value.toCharArray();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value.toCharArray();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value.toCharArray();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
277	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value.getBytes();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value.getBytes();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value.getBytes();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
278	[BUG]  [BUGGY]  byte[]  buf  =(byte[])value.trim();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])value.trim();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])value.trim();	  byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  3;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  3;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  end;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  8;  i  >=  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  8;  i  >=  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  8;  i  >=  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  ==  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  ==  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  ==  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    ==    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  3;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  3;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  3;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
284	[BUG]  [BUGGY]  int  len  =  buf.length();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  buf.length();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  buf.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >>  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >>  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >>  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  1;  i  <  =  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  1;  i  <  =  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  16;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  16;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  16;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  >=  off;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  off  +  len  -  1;  i  >=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  off  +  len  -  1;  i  >=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  off  +  len  -  1;  i  >=  offset;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  >=  off;  i--)  {	  for(int    i    =    start    +    len    -    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i!=  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i!=  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i!=  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i!=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
293	[BUG]  [BUGGY]  val  =  Math.abs(value  /  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.abs(value  /  BYTE_MASK);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.abs(value  /  BYTE_MASK);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
294	[BUG]  [BUGGY]  val  =  Math.min(value,  val);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  val  =  Math.min(value,  val);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	val  =  Math.min(value,  val);	  val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  8;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  =  max;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  =  max;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  =  max;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    =    max;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  2;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  ==  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  ==  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  ==  offset;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    ==    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
300	[BUG]  [BUGGY]  if(val  <  =  0x7F)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0x7F)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0x7F)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
301	[BUG]  [BUGGY]  if(val  <  =  0xff)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0xff)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0xff)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
302	[BUG]  [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
303	[BUG]  [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  0,  val);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    0,    val);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  2;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  2;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  8;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >=  off  +  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  >=  off  +  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  >=  off  +  1;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  8;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  8;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  8;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val  +  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  val  +  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  val  +  1;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    val;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  off;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i  >=  off;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i  >=  off;  i--)  {	  for(int    i    =    offset    +    len    /    1;    i    >=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
313	[BUG]  [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte[]  buf  =(byte[])encoding.encode(buf,  offset  +  1,  length);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte[]  buf  =(byte[])encoding.encode(buf,  offset  +  1,  length);	  byte[]    buf    =(byte[])encoding.encode(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
314	[BUG]  [BUGGY]  int  len  =  offset  +  length  -  buf.length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  offset  +  length  -  buf.length;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  offset  +  length  -  buf.length;	  int    len    =    length    -    buf.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  len  -  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  len  -  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  len  -  1;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    <    length    -    1;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  off  +  length  -  1;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  off  +  length  -  1;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  off  +  length  -  1;  i  <  len;  i--)  {	  for(int    i    =    start    +    length    -    1;    i    <    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  ==  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  1;  i  ==  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  1;  i  ==  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i    ==    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  end;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  end;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  end;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    end;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  off  +  1;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  >=  off  +  1;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  >=  off  +  1;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    >=    off;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  8;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  8;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    length    -    8;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  <  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  2;  i  <  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  2;  i  <  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i    <    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
322	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  offset;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  offset;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  offset;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    offset;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
323	[BUG]  [BUGGY]  int  len  =  length  -  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  length  -  1;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  length  -  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
324	[BUG]  [BUGGY]  int  len  =  offset  +  length();  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  int  len  =  offset  +  length();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	int  len  =  offset  +  length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  start  +  length  -  1;  i  ==  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  start  +  length  -  1;  i  ==  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  start  +  length  -  1;  i  ==  len;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    ==    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
326	[BUG]  [BUGGY]  while(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  while(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	while(buf[i]  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
327	[BUG]  [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(buf[i]!=  0)  {  throw  new  IllegalArgumentException( " "));  }	  if(buf[i]!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
328	[BUG]  [BUGGY]  if(val  <  =  0x80)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0x80)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0x80)  {  if(buf[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(value);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  offset  +  len;  i  <  len;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len;  i  <  len;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len;  i  <  len;  i--)  {	  for(int    i    =    offset    +    length;    i    >=    len;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  1;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  1;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  1;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    1;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
331	[BUG]  [BUGGY]  long  val  =  Math.min(value,  val);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  val  =  Math.min(value,  val);  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  val  =  Math.min(value,  val);	  long    val    =    Math.abs(value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  limit;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  1;  i  <  limit;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  1;  i  <  limit;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    limit;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
333	[BUG]  [BUGGY]  byte  idx  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  byte  idx  =  value.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	byte  idx  =  value.longValue();	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
334	[BUG]  [BUGGY]  long  idx  =  value.longValue()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  value.longValue()  *  BYTE_MASK;  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  value.longValue()  *  BYTE_MASK;	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
335	[BUG]  [BUGGY]  long  idx  =  length.longValue();  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  long  idx  =  length.longValue();  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	long  idx  =  length.longValue();	  long    idx    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
336	[BUG]  [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
337	[BUG]  [BUGGY]  if(val  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  if(val  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	if(val  <  =  0L)  {  throw  new  IllegalArgumentException( " ");  }  else  {  buf[i]  =  Long.parseLong(buf[i]);  }	  if(buf[i]    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buf[i]    =    Long.parseLong(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  offset  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  /  2;  i  <  offset  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  /  2;  i  <  offset  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  end  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  end  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  end  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  off  +  length;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  length  -  1;  i  <  off  +  length;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  length  -  1;  i  <  off  +  length;  i--)  {	  for(int    i    =    offset    +    length    -    1;    i    <    offset    +    length;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  off  +  length  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  off  +  length  -  1;  i  >=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  off  +  length  -  1;  i  >=  0;  i--)  {	  for(int    i    =    offset    +    len    -    1;    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  -  2;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  -  2;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  -  2;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    -    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  for(int  i  =  offset  +  len  /  2;  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE  if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }      [BUGGY]  for(int  i  =  offset  +  len  /  2;  i!=  0;  i--)  {  [BUGGY]      buf[i]  =  (byte)  val;  val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	509	509	1	replace	for(int  i  =  offset  +  len  /  2;  i!=  0;  i--)  {	  for(int    i    =    offset    +    length    /    2;    i!=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
